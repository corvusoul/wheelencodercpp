
wheelencodercpp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004074  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08004244  08004244  00014244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042e4  080042e4  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  080042e4  080042e4  000142e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080042ec  080042ec  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042ec  080042ec  000142ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080042f0  080042f0  000142f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080042f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000210  2000005c  08004350  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000026c  08004350  0002026c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cf98  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c1f  00000000  00000000  0002d067  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c18  00000000  00000000  0002ec88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000980  00000000  00000000  0002f8a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021c40  00000000  00000000  00030220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e948  00000000  00000000  00051e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d0641  00000000  00000000  000607a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003924  00000000  00000000  00130dec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  00134710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800422c 	.word	0x0800422c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	0800422c 	.word	0x0800422c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_uldivmod>:
 8000a9c:	b953      	cbnz	r3, 8000ab4 <__aeabi_uldivmod+0x18>
 8000a9e:	b94a      	cbnz	r2, 8000ab4 <__aeabi_uldivmod+0x18>
 8000aa0:	2900      	cmp	r1, #0
 8000aa2:	bf08      	it	eq
 8000aa4:	2800      	cmpeq	r0, #0
 8000aa6:	bf1c      	itt	ne
 8000aa8:	f04f 31ff 	movne.w	r1, #4294967295
 8000aac:	f04f 30ff 	movne.w	r0, #4294967295
 8000ab0:	f000 b970 	b.w	8000d94 <__aeabi_idiv0>
 8000ab4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ab8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000abc:	f000 f806 	bl	8000acc <__udivmoddi4>
 8000ac0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ac4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ac8:	b004      	add	sp, #16
 8000aca:	4770      	bx	lr

08000acc <__udivmoddi4>:
 8000acc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ad0:	9e08      	ldr	r6, [sp, #32]
 8000ad2:	460d      	mov	r5, r1
 8000ad4:	4604      	mov	r4, r0
 8000ad6:	460f      	mov	r7, r1
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d14a      	bne.n	8000b72 <__udivmoddi4+0xa6>
 8000adc:	428a      	cmp	r2, r1
 8000ade:	4694      	mov	ip, r2
 8000ae0:	d965      	bls.n	8000bae <__udivmoddi4+0xe2>
 8000ae2:	fab2 f382 	clz	r3, r2
 8000ae6:	b143      	cbz	r3, 8000afa <__udivmoddi4+0x2e>
 8000ae8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000aec:	f1c3 0220 	rsb	r2, r3, #32
 8000af0:	409f      	lsls	r7, r3
 8000af2:	fa20 f202 	lsr.w	r2, r0, r2
 8000af6:	4317      	orrs	r7, r2
 8000af8:	409c      	lsls	r4, r3
 8000afa:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000afe:	fa1f f58c 	uxth.w	r5, ip
 8000b02:	fbb7 f1fe 	udiv	r1, r7, lr
 8000b06:	0c22      	lsrs	r2, r4, #16
 8000b08:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b0c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b10:	fb01 f005 	mul.w	r0, r1, r5
 8000b14:	4290      	cmp	r0, r2
 8000b16:	d90a      	bls.n	8000b2e <__udivmoddi4+0x62>
 8000b18:	eb1c 0202 	adds.w	r2, ip, r2
 8000b1c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000b20:	f080 811c 	bcs.w	8000d5c <__udivmoddi4+0x290>
 8000b24:	4290      	cmp	r0, r2
 8000b26:	f240 8119 	bls.w	8000d5c <__udivmoddi4+0x290>
 8000b2a:	3902      	subs	r1, #2
 8000b2c:	4462      	add	r2, ip
 8000b2e:	1a12      	subs	r2, r2, r0
 8000b30:	b2a4      	uxth	r4, r4
 8000b32:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b36:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b3a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b3e:	fb00 f505 	mul.w	r5, r0, r5
 8000b42:	42a5      	cmp	r5, r4
 8000b44:	d90a      	bls.n	8000b5c <__udivmoddi4+0x90>
 8000b46:	eb1c 0404 	adds.w	r4, ip, r4
 8000b4a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b4e:	f080 8107 	bcs.w	8000d60 <__udivmoddi4+0x294>
 8000b52:	42a5      	cmp	r5, r4
 8000b54:	f240 8104 	bls.w	8000d60 <__udivmoddi4+0x294>
 8000b58:	4464      	add	r4, ip
 8000b5a:	3802      	subs	r0, #2
 8000b5c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b60:	1b64      	subs	r4, r4, r5
 8000b62:	2100      	movs	r1, #0
 8000b64:	b11e      	cbz	r6, 8000b6e <__udivmoddi4+0xa2>
 8000b66:	40dc      	lsrs	r4, r3
 8000b68:	2300      	movs	r3, #0
 8000b6a:	e9c6 4300 	strd	r4, r3, [r6]
 8000b6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b72:	428b      	cmp	r3, r1
 8000b74:	d908      	bls.n	8000b88 <__udivmoddi4+0xbc>
 8000b76:	2e00      	cmp	r6, #0
 8000b78:	f000 80ed 	beq.w	8000d56 <__udivmoddi4+0x28a>
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	e9c6 0500 	strd	r0, r5, [r6]
 8000b82:	4608      	mov	r0, r1
 8000b84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b88:	fab3 f183 	clz	r1, r3
 8000b8c:	2900      	cmp	r1, #0
 8000b8e:	d149      	bne.n	8000c24 <__udivmoddi4+0x158>
 8000b90:	42ab      	cmp	r3, r5
 8000b92:	d302      	bcc.n	8000b9a <__udivmoddi4+0xce>
 8000b94:	4282      	cmp	r2, r0
 8000b96:	f200 80f8 	bhi.w	8000d8a <__udivmoddi4+0x2be>
 8000b9a:	1a84      	subs	r4, r0, r2
 8000b9c:	eb65 0203 	sbc.w	r2, r5, r3
 8000ba0:	2001      	movs	r0, #1
 8000ba2:	4617      	mov	r7, r2
 8000ba4:	2e00      	cmp	r6, #0
 8000ba6:	d0e2      	beq.n	8000b6e <__udivmoddi4+0xa2>
 8000ba8:	e9c6 4700 	strd	r4, r7, [r6]
 8000bac:	e7df      	b.n	8000b6e <__udivmoddi4+0xa2>
 8000bae:	b902      	cbnz	r2, 8000bb2 <__udivmoddi4+0xe6>
 8000bb0:	deff      	udf	#255	; 0xff
 8000bb2:	fab2 f382 	clz	r3, r2
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	f040 8090 	bne.w	8000cdc <__udivmoddi4+0x210>
 8000bbc:	1a8a      	subs	r2, r1, r2
 8000bbe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bc2:	fa1f fe8c 	uxth.w	lr, ip
 8000bc6:	2101      	movs	r1, #1
 8000bc8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000bcc:	fb07 2015 	mls	r0, r7, r5, r2
 8000bd0:	0c22      	lsrs	r2, r4, #16
 8000bd2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000bd6:	fb0e f005 	mul.w	r0, lr, r5
 8000bda:	4290      	cmp	r0, r2
 8000bdc:	d908      	bls.n	8000bf0 <__udivmoddi4+0x124>
 8000bde:	eb1c 0202 	adds.w	r2, ip, r2
 8000be2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000be6:	d202      	bcs.n	8000bee <__udivmoddi4+0x122>
 8000be8:	4290      	cmp	r0, r2
 8000bea:	f200 80cb 	bhi.w	8000d84 <__udivmoddi4+0x2b8>
 8000bee:	4645      	mov	r5, r8
 8000bf0:	1a12      	subs	r2, r2, r0
 8000bf2:	b2a4      	uxth	r4, r4
 8000bf4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000bf8:	fb07 2210 	mls	r2, r7, r0, r2
 8000bfc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c00:	fb0e fe00 	mul.w	lr, lr, r0
 8000c04:	45a6      	cmp	lr, r4
 8000c06:	d908      	bls.n	8000c1a <__udivmoddi4+0x14e>
 8000c08:	eb1c 0404 	adds.w	r4, ip, r4
 8000c0c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c10:	d202      	bcs.n	8000c18 <__udivmoddi4+0x14c>
 8000c12:	45a6      	cmp	lr, r4
 8000c14:	f200 80bb 	bhi.w	8000d8e <__udivmoddi4+0x2c2>
 8000c18:	4610      	mov	r0, r2
 8000c1a:	eba4 040e 	sub.w	r4, r4, lr
 8000c1e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c22:	e79f      	b.n	8000b64 <__udivmoddi4+0x98>
 8000c24:	f1c1 0720 	rsb	r7, r1, #32
 8000c28:	408b      	lsls	r3, r1
 8000c2a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c2e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c32:	fa05 f401 	lsl.w	r4, r5, r1
 8000c36:	fa20 f307 	lsr.w	r3, r0, r7
 8000c3a:	40fd      	lsrs	r5, r7
 8000c3c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c40:	4323      	orrs	r3, r4
 8000c42:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c46:	fa1f fe8c 	uxth.w	lr, ip
 8000c4a:	fb09 5518 	mls	r5, r9, r8, r5
 8000c4e:	0c1c      	lsrs	r4, r3, #16
 8000c50:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c54:	fb08 f50e 	mul.w	r5, r8, lr
 8000c58:	42a5      	cmp	r5, r4
 8000c5a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c5e:	fa00 f001 	lsl.w	r0, r0, r1
 8000c62:	d90b      	bls.n	8000c7c <__udivmoddi4+0x1b0>
 8000c64:	eb1c 0404 	adds.w	r4, ip, r4
 8000c68:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c6c:	f080 8088 	bcs.w	8000d80 <__udivmoddi4+0x2b4>
 8000c70:	42a5      	cmp	r5, r4
 8000c72:	f240 8085 	bls.w	8000d80 <__udivmoddi4+0x2b4>
 8000c76:	f1a8 0802 	sub.w	r8, r8, #2
 8000c7a:	4464      	add	r4, ip
 8000c7c:	1b64      	subs	r4, r4, r5
 8000c7e:	b29d      	uxth	r5, r3
 8000c80:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c84:	fb09 4413 	mls	r4, r9, r3, r4
 8000c88:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c8c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c90:	45a6      	cmp	lr, r4
 8000c92:	d908      	bls.n	8000ca6 <__udivmoddi4+0x1da>
 8000c94:	eb1c 0404 	adds.w	r4, ip, r4
 8000c98:	f103 35ff 	add.w	r5, r3, #4294967295
 8000c9c:	d26c      	bcs.n	8000d78 <__udivmoddi4+0x2ac>
 8000c9e:	45a6      	cmp	lr, r4
 8000ca0:	d96a      	bls.n	8000d78 <__udivmoddi4+0x2ac>
 8000ca2:	3b02      	subs	r3, #2
 8000ca4:	4464      	add	r4, ip
 8000ca6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000caa:	fba3 9502 	umull	r9, r5, r3, r2
 8000cae:	eba4 040e 	sub.w	r4, r4, lr
 8000cb2:	42ac      	cmp	r4, r5
 8000cb4:	46c8      	mov	r8, r9
 8000cb6:	46ae      	mov	lr, r5
 8000cb8:	d356      	bcc.n	8000d68 <__udivmoddi4+0x29c>
 8000cba:	d053      	beq.n	8000d64 <__udivmoddi4+0x298>
 8000cbc:	b156      	cbz	r6, 8000cd4 <__udivmoddi4+0x208>
 8000cbe:	ebb0 0208 	subs.w	r2, r0, r8
 8000cc2:	eb64 040e 	sbc.w	r4, r4, lr
 8000cc6:	fa04 f707 	lsl.w	r7, r4, r7
 8000cca:	40ca      	lsrs	r2, r1
 8000ccc:	40cc      	lsrs	r4, r1
 8000cce:	4317      	orrs	r7, r2
 8000cd0:	e9c6 7400 	strd	r7, r4, [r6]
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cdc:	f1c3 0120 	rsb	r1, r3, #32
 8000ce0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ce4:	fa20 f201 	lsr.w	r2, r0, r1
 8000ce8:	fa25 f101 	lsr.w	r1, r5, r1
 8000cec:	409d      	lsls	r5, r3
 8000cee:	432a      	orrs	r2, r5
 8000cf0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cf4:	fa1f fe8c 	uxth.w	lr, ip
 8000cf8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cfc:	fb07 1510 	mls	r5, r7, r0, r1
 8000d00:	0c11      	lsrs	r1, r2, #16
 8000d02:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d06:	fb00 f50e 	mul.w	r5, r0, lr
 8000d0a:	428d      	cmp	r5, r1
 8000d0c:	fa04 f403 	lsl.w	r4, r4, r3
 8000d10:	d908      	bls.n	8000d24 <__udivmoddi4+0x258>
 8000d12:	eb1c 0101 	adds.w	r1, ip, r1
 8000d16:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d1a:	d22f      	bcs.n	8000d7c <__udivmoddi4+0x2b0>
 8000d1c:	428d      	cmp	r5, r1
 8000d1e:	d92d      	bls.n	8000d7c <__udivmoddi4+0x2b0>
 8000d20:	3802      	subs	r0, #2
 8000d22:	4461      	add	r1, ip
 8000d24:	1b49      	subs	r1, r1, r5
 8000d26:	b292      	uxth	r2, r2
 8000d28:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d2c:	fb07 1115 	mls	r1, r7, r5, r1
 8000d30:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d34:	fb05 f10e 	mul.w	r1, r5, lr
 8000d38:	4291      	cmp	r1, r2
 8000d3a:	d908      	bls.n	8000d4e <__udivmoddi4+0x282>
 8000d3c:	eb1c 0202 	adds.w	r2, ip, r2
 8000d40:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d44:	d216      	bcs.n	8000d74 <__udivmoddi4+0x2a8>
 8000d46:	4291      	cmp	r1, r2
 8000d48:	d914      	bls.n	8000d74 <__udivmoddi4+0x2a8>
 8000d4a:	3d02      	subs	r5, #2
 8000d4c:	4462      	add	r2, ip
 8000d4e:	1a52      	subs	r2, r2, r1
 8000d50:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d54:	e738      	b.n	8000bc8 <__udivmoddi4+0xfc>
 8000d56:	4631      	mov	r1, r6
 8000d58:	4630      	mov	r0, r6
 8000d5a:	e708      	b.n	8000b6e <__udivmoddi4+0xa2>
 8000d5c:	4639      	mov	r1, r7
 8000d5e:	e6e6      	b.n	8000b2e <__udivmoddi4+0x62>
 8000d60:	4610      	mov	r0, r2
 8000d62:	e6fb      	b.n	8000b5c <__udivmoddi4+0x90>
 8000d64:	4548      	cmp	r0, r9
 8000d66:	d2a9      	bcs.n	8000cbc <__udivmoddi4+0x1f0>
 8000d68:	ebb9 0802 	subs.w	r8, r9, r2
 8000d6c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d70:	3b01      	subs	r3, #1
 8000d72:	e7a3      	b.n	8000cbc <__udivmoddi4+0x1f0>
 8000d74:	4645      	mov	r5, r8
 8000d76:	e7ea      	b.n	8000d4e <__udivmoddi4+0x282>
 8000d78:	462b      	mov	r3, r5
 8000d7a:	e794      	b.n	8000ca6 <__udivmoddi4+0x1da>
 8000d7c:	4640      	mov	r0, r8
 8000d7e:	e7d1      	b.n	8000d24 <__udivmoddi4+0x258>
 8000d80:	46d0      	mov	r8, sl
 8000d82:	e77b      	b.n	8000c7c <__udivmoddi4+0x1b0>
 8000d84:	3d02      	subs	r5, #2
 8000d86:	4462      	add	r2, ip
 8000d88:	e732      	b.n	8000bf0 <__udivmoddi4+0x124>
 8000d8a:	4608      	mov	r0, r1
 8000d8c:	e70a      	b.n	8000ba4 <__udivmoddi4+0xd8>
 8000d8e:	4464      	add	r4, ip
 8000d90:	3802      	subs	r0, #2
 8000d92:	e742      	b.n	8000c1a <__udivmoddi4+0x14e>

08000d94 <__aeabi_idiv0>:
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop

08000d98 <HAL_GPIO_EXTI_Callback>:
int flag = 0, rightvel = 0, rpm = 0;



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_PIN)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	4603      	mov	r3, r0
 8000da0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_PIN == LeftEncoderA_Pin)
 8000da2:	88fb      	ldrh	r3, [r7, #6]
 8000da4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000da8:	d147      	bne.n	8000e3a <HAL_GPIO_EXTI_Callback+0xa2>
	{
		if(HAL_GPIO_ReadPin(LeftEncoderA_GPIO_Port, LeftEncoderA_Pin) == 1)
 8000daa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dae:	484a      	ldr	r0, [pc, #296]	; (8000ed8 <HAL_GPIO_EXTI_Callback+0x140>)
 8000db0:	f000 ff22 	bl	8001bf8 <HAL_GPIO_ReadPin>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b01      	cmp	r3, #1
 8000db8:	d11b      	bne.n	8000df2 <HAL_GPIO_EXTI_Callback+0x5a>
		{
			if(HAL_GPIO_ReadPin(GPIOA, LeftEncoderB_Pin) == 1) leftenc++;
 8000dba:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dbe:	4847      	ldr	r0, [pc, #284]	; (8000edc <HAL_GPIO_EXTI_Callback+0x144>)
 8000dc0:	f000 ff1a 	bl	8001bf8 <HAL_GPIO_ReadPin>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b01      	cmp	r3, #1
 8000dc8:	d105      	bne.n	8000dd6 <HAL_GPIO_EXTI_Callback+0x3e>
 8000dca:	4b45      	ldr	r3, [pc, #276]	; (8000ee0 <HAL_GPIO_EXTI_Callback+0x148>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	3301      	adds	r3, #1
 8000dd0:	4a43      	ldr	r2, [pc, #268]	; (8000ee0 <HAL_GPIO_EXTI_Callback+0x148>)
 8000dd2:	6013      	str	r3, [r2, #0]
 8000dd4:	e079      	b.n	8000eca <HAL_GPIO_EXTI_Callback+0x132>
			else if(HAL_GPIO_ReadPin(GPIOA, LeftEncoderB_Pin) == 0) leftenc--;
 8000dd6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dda:	4840      	ldr	r0, [pc, #256]	; (8000edc <HAL_GPIO_EXTI_Callback+0x144>)
 8000ddc:	f000 ff0c 	bl	8001bf8 <HAL_GPIO_ReadPin>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d171      	bne.n	8000eca <HAL_GPIO_EXTI_Callback+0x132>
 8000de6:	4b3e      	ldr	r3, [pc, #248]	; (8000ee0 <HAL_GPIO_EXTI_Callback+0x148>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	3b01      	subs	r3, #1
 8000dec:	4a3c      	ldr	r2, [pc, #240]	; (8000ee0 <HAL_GPIO_EXTI_Callback+0x148>)
 8000dee:	6013      	str	r3, [r2, #0]
 8000df0:	e06b      	b.n	8000eca <HAL_GPIO_EXTI_Callback+0x132>
		}
		else if(HAL_GPIO_ReadPin(LeftEncoderA_GPIO_Port, LeftEncoderA_Pin) == 0)
 8000df2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000df6:	4838      	ldr	r0, [pc, #224]	; (8000ed8 <HAL_GPIO_EXTI_Callback+0x140>)
 8000df8:	f000 fefe 	bl	8001bf8 <HAL_GPIO_ReadPin>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d163      	bne.n	8000eca <HAL_GPIO_EXTI_Callback+0x132>
		{
			if(HAL_GPIO_ReadPin(GPIOA, LeftEncoderB_Pin) == 0) leftenc++;
 8000e02:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e06:	4835      	ldr	r0, [pc, #212]	; (8000edc <HAL_GPIO_EXTI_Callback+0x144>)
 8000e08:	f000 fef6 	bl	8001bf8 <HAL_GPIO_ReadPin>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d105      	bne.n	8000e1e <HAL_GPIO_EXTI_Callback+0x86>
 8000e12:	4b33      	ldr	r3, [pc, #204]	; (8000ee0 <HAL_GPIO_EXTI_Callback+0x148>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	3301      	adds	r3, #1
 8000e18:	4a31      	ldr	r2, [pc, #196]	; (8000ee0 <HAL_GPIO_EXTI_Callback+0x148>)
 8000e1a:	6013      	str	r3, [r2, #0]
 8000e1c:	e055      	b.n	8000eca <HAL_GPIO_EXTI_Callback+0x132>
			else if(HAL_GPIO_ReadPin(GPIOA, LeftEncoderB_Pin) == 1) leftenc--;
 8000e1e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e22:	482e      	ldr	r0, [pc, #184]	; (8000edc <HAL_GPIO_EXTI_Callback+0x144>)
 8000e24:	f000 fee8 	bl	8001bf8 <HAL_GPIO_ReadPin>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b01      	cmp	r3, #1
 8000e2c:	d14d      	bne.n	8000eca <HAL_GPIO_EXTI_Callback+0x132>
 8000e2e:	4b2c      	ldr	r3, [pc, #176]	; (8000ee0 <HAL_GPIO_EXTI_Callback+0x148>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	3b01      	subs	r3, #1
 8000e34:	4a2a      	ldr	r2, [pc, #168]	; (8000ee0 <HAL_GPIO_EXTI_Callback+0x148>)
 8000e36:	6013      	str	r3, [r2, #0]
 8000e38:	e047      	b.n	8000eca <HAL_GPIO_EXTI_Callback+0x132>
		}
	}
	else if(GPIO_PIN == RightEncoderA_Pin)
 8000e3a:	88fb      	ldrh	r3, [r7, #6]
 8000e3c:	2b40      	cmp	r3, #64	; 0x40
 8000e3e:	d144      	bne.n	8000eca <HAL_GPIO_EXTI_Callback+0x132>
	{
		if(HAL_GPIO_ReadPin(RightEncoderA_GPIO_Port, RightEncoderA_Pin) == 1)
 8000e40:	2140      	movs	r1, #64	; 0x40
 8000e42:	4828      	ldr	r0, [pc, #160]	; (8000ee4 <HAL_GPIO_EXTI_Callback+0x14c>)
 8000e44:	f000 fed8 	bl	8001bf8 <HAL_GPIO_ReadPin>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b01      	cmp	r3, #1
 8000e4c:	d11b      	bne.n	8000e86 <HAL_GPIO_EXTI_Callback+0xee>
		{
			if(HAL_GPIO_ReadPin(GPIOB, RightEncoderB_Pin) == 0) rightenc++;
 8000e4e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e52:	4821      	ldr	r0, [pc, #132]	; (8000ed8 <HAL_GPIO_EXTI_Callback+0x140>)
 8000e54:	f000 fed0 	bl	8001bf8 <HAL_GPIO_ReadPin>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d105      	bne.n	8000e6a <HAL_GPIO_EXTI_Callback+0xd2>
 8000e5e:	4b22      	ldr	r3, [pc, #136]	; (8000ee8 <HAL_GPIO_EXTI_Callback+0x150>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	3301      	adds	r3, #1
 8000e64:	4a20      	ldr	r2, [pc, #128]	; (8000ee8 <HAL_GPIO_EXTI_Callback+0x150>)
 8000e66:	6013      	str	r3, [r2, #0]
 8000e68:	e02f      	b.n	8000eca <HAL_GPIO_EXTI_Callback+0x132>
			else if(HAL_GPIO_ReadPin(GPIOB, RightEncoderB_Pin) == 1) rightenc--;
 8000e6a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e6e:	481a      	ldr	r0, [pc, #104]	; (8000ed8 <HAL_GPIO_EXTI_Callback+0x140>)
 8000e70:	f000 fec2 	bl	8001bf8 <HAL_GPIO_ReadPin>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b01      	cmp	r3, #1
 8000e78:	d127      	bne.n	8000eca <HAL_GPIO_EXTI_Callback+0x132>
 8000e7a:	4b1b      	ldr	r3, [pc, #108]	; (8000ee8 <HAL_GPIO_EXTI_Callback+0x150>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	3b01      	subs	r3, #1
 8000e80:	4a19      	ldr	r2, [pc, #100]	; (8000ee8 <HAL_GPIO_EXTI_Callback+0x150>)
 8000e82:	6013      	str	r3, [r2, #0]
 8000e84:	e021      	b.n	8000eca <HAL_GPIO_EXTI_Callback+0x132>
		}
		else if(HAL_GPIO_ReadPin(RightEncoderA_GPIO_Port, RightEncoderA_Pin) == 0)
 8000e86:	2140      	movs	r1, #64	; 0x40
 8000e88:	4816      	ldr	r0, [pc, #88]	; (8000ee4 <HAL_GPIO_EXTI_Callback+0x14c>)
 8000e8a:	f000 feb5 	bl	8001bf8 <HAL_GPIO_ReadPin>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d11a      	bne.n	8000eca <HAL_GPIO_EXTI_Callback+0x132>
		{
			if(HAL_GPIO_ReadPin(GPIOB, RightEncoderB_Pin) == 1) rightenc++;
 8000e94:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e98:	480f      	ldr	r0, [pc, #60]	; (8000ed8 <HAL_GPIO_EXTI_Callback+0x140>)
 8000e9a:	f000 fead 	bl	8001bf8 <HAL_GPIO_ReadPin>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b01      	cmp	r3, #1
 8000ea2:	d105      	bne.n	8000eb0 <HAL_GPIO_EXTI_Callback+0x118>
 8000ea4:	4b10      	ldr	r3, [pc, #64]	; (8000ee8 <HAL_GPIO_EXTI_Callback+0x150>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	3301      	adds	r3, #1
 8000eaa:	4a0f      	ldr	r2, [pc, #60]	; (8000ee8 <HAL_GPIO_EXTI_Callback+0x150>)
 8000eac:	6013      	str	r3, [r2, #0]
 8000eae:	e00c      	b.n	8000eca <HAL_GPIO_EXTI_Callback+0x132>
			else if(HAL_GPIO_ReadPin(GPIOB, RightEncoderB_Pin) == 0) rightenc--;
 8000eb0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000eb4:	4808      	ldr	r0, [pc, #32]	; (8000ed8 <HAL_GPIO_EXTI_Callback+0x140>)
 8000eb6:	f000 fe9f 	bl	8001bf8 <HAL_GPIO_ReadPin>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d104      	bne.n	8000eca <HAL_GPIO_EXTI_Callback+0x132>
 8000ec0:	4b09      	ldr	r3, [pc, #36]	; (8000ee8 <HAL_GPIO_EXTI_Callback+0x150>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	3b01      	subs	r3, #1
 8000ec6:	4a08      	ldr	r2, [pc, #32]	; (8000ee8 <HAL_GPIO_EXTI_Callback+0x150>)
 8000ec8:	6013      	str	r3, [r2, #0]
		}
	}
	flag = 1;
 8000eca:	4b08      	ldr	r3, [pc, #32]	; (8000eec <HAL_GPIO_EXTI_Callback+0x154>)
 8000ecc:	2201      	movs	r2, #1
 8000ece:	601a      	str	r2, [r3, #0]
}
 8000ed0:	bf00      	nop
 8000ed2:	3708      	adds	r7, #8
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	40020400 	.word	0x40020400
 8000edc:	40020000 	.word	0x40020000
 8000ee0:	20000104 	.word	0x20000104
 8000ee4:	40020800 	.word	0x40020800
 8000ee8:	20000108 	.word	0x20000108
 8000eec:	20000110 	.word	0x20000110

08000ef0 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]

	rpm = (int)((rightenc - rightenco)*0.6); //(No. of ticks Now - No. of Ticks Old)*60/(50*10^-3) (old calc)
 8000ef8:	4b27      	ldr	r3, [pc, #156]	; (8000f98 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	4b27      	ldr	r3, [pc, #156]	; (8000f9c <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	1ad3      	subs	r3, r2, r3
 8000f02:	4618      	mov	r0, r3
 8000f04:	f7ff fb26 	bl	8000554 <__aeabi_i2d>
 8000f08:	a31f      	add	r3, pc, #124	; (adr r3, 8000f88 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f0e:	f7ff fb8b 	bl	8000628 <__aeabi_dmul>
 8000f12:	4602      	mov	r2, r0
 8000f14:	460b      	mov	r3, r1
 8000f16:	4610      	mov	r0, r2
 8000f18:	4619      	mov	r1, r3
 8000f1a:	f7ff fd97 	bl	8000a4c <__aeabi_d2iz>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	4a1f      	ldr	r2, [pc, #124]	; (8000fa0 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000f22:	6013      	str	r3, [r2, #0]
	rightvel = (int)((rpm * 6.28 * 7.5)/(60));
 8000f24:	4b1e      	ldr	r3, [pc, #120]	; (8000fa0 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f7ff fb13 	bl	8000554 <__aeabi_i2d>
 8000f2e:	a318      	add	r3, pc, #96	; (adr r3, 8000f90 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f34:	f7ff fb78 	bl	8000628 <__aeabi_dmul>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	460b      	mov	r3, r1
 8000f3c:	4610      	mov	r0, r2
 8000f3e:	4619      	mov	r1, r3
 8000f40:	f04f 0200 	mov.w	r2, #0
 8000f44:	4b17      	ldr	r3, [pc, #92]	; (8000fa4 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000f46:	f7ff fb6f 	bl	8000628 <__aeabi_dmul>
 8000f4a:	4602      	mov	r2, r0
 8000f4c:	460b      	mov	r3, r1
 8000f4e:	4610      	mov	r0, r2
 8000f50:	4619      	mov	r1, r3
 8000f52:	f04f 0200 	mov.w	r2, #0
 8000f56:	4b14      	ldr	r3, [pc, #80]	; (8000fa8 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000f58:	f7ff fc90 	bl	800087c <__aeabi_ddiv>
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	460b      	mov	r3, r1
 8000f60:	4610      	mov	r0, r2
 8000f62:	4619      	mov	r1, r3
 8000f64:	f7ff fd72 	bl	8000a4c <__aeabi_d2iz>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	4a10      	ldr	r2, [pc, #64]	; (8000fac <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000f6c:	6013      	str	r3, [r2, #0]
	rightenco = rightenc;
 8000f6e:	4b0a      	ldr	r3, [pc, #40]	; (8000f98 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4a0a      	ldr	r2, [pc, #40]	; (8000f9c <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000f74:	6013      	str	r3, [r2, #0]
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000f76:	2120      	movs	r1, #32
 8000f78:	480d      	ldr	r0, [pc, #52]	; (8000fb0 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000f7a:	f000 fe55 	bl	8001c28 <HAL_GPIO_TogglePin>

}
 8000f7e:	bf00      	nop
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	33333333 	.word	0x33333333
 8000f8c:	3fe33333 	.word	0x3fe33333
 8000f90:	51eb851f 	.word	0x51eb851f
 8000f94:	40191eb8 	.word	0x40191eb8
 8000f98:	20000108 	.word	0x20000108
 8000f9c:	2000010c 	.word	0x2000010c
 8000fa0:	20000118 	.word	0x20000118
 8000fa4:	401e0000 	.word	0x401e0000
 8000fa8:	404e0000 	.word	0x404e0000
 8000fac:	20000114 	.word	0x20000114
 8000fb0:	40020000 	.word	0x40020000

08000fb4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fb4:	b590      	push	{r4, r7, lr}
 8000fb6:	b09d      	sub	sp, #116	; 0x74
 8000fb8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fba:	f000 fb05 	bl	80015c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fbe:	f000 f839 	bl	8001034 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fc2:	f000 f91b 	bl	80011fc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000fc6:	f000 f8ef 	bl	80011a8 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000fca:	f000 f8a1 	bl	8001110 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000fce:	4811      	ldr	r0, [pc, #68]	; (8001014 <main+0x60>)
 8000fd0:	f001 fc94 	bl	80028fc <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(flag == 1)
 8000fd4:	4b10      	ldr	r3, [pc, #64]	; (8001018 <main+0x64>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	2b01      	cmp	r3, #1
 8000fda:	d1fb      	bne.n	8000fd4 <main+0x20>
	  {
		  uart_buf_len = sprintf(uart_buf, "Left Encoder Ticks: %d Right Encoder Ticks: %d "
 8000fdc:	4b0f      	ldr	r3, [pc, #60]	; (800101c <main+0x68>)
 8000fde:	6819      	ldr	r1, [r3, #0]
 8000fe0:	4b0f      	ldr	r3, [pc, #60]	; (8001020 <main+0x6c>)
 8000fe2:	681c      	ldr	r4, [r3, #0]
 8000fe4:	4b0f      	ldr	r3, [pc, #60]	; (8001024 <main+0x70>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a0f      	ldr	r2, [pc, #60]	; (8001028 <main+0x74>)
 8000fea:	6812      	ldr	r2, [r2, #0]
 8000fec:	4638      	mov	r0, r7
 8000fee:	9201      	str	r2, [sp, #4]
 8000ff0:	9300      	str	r3, [sp, #0]
 8000ff2:	4623      	mov	r3, r4
 8000ff4:	460a      	mov	r2, r1
 8000ff6:	490d      	ldr	r1, [pc, #52]	; (800102c <main+0x78>)
 8000ff8:	f002 fc74 	bl	80038e4 <siprintf>
 8000ffc:	6678      	str	r0, [r7, #100]	; 0x64
				  "RPM: %d Right Wheel Velocity: %d\r \n", leftenc, rightenc, rpm, rightvel);
		  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
 8000ffe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001000:	b29a      	uxth	r2, r3
 8001002:	4639      	mov	r1, r7
 8001004:	2364      	movs	r3, #100	; 0x64
 8001006:	480a      	ldr	r0, [pc, #40]	; (8001030 <main+0x7c>)
 8001008:	f002 f8f7 	bl	80031fa <HAL_UART_Transmit>
		  flag = 0;
 800100c:	4b02      	ldr	r3, [pc, #8]	; (8001018 <main+0x64>)
 800100e:	2200      	movs	r2, #0
 8001010:	601a      	str	r2, [r3, #0]
	  if(flag == 1)
 8001012:	e7df      	b.n	8000fd4 <main+0x20>
 8001014:	20000078 	.word	0x20000078
 8001018:	20000110 	.word	0x20000110
 800101c:	20000104 	.word	0x20000104
 8001020:	20000108 	.word	0x20000108
 8001024:	20000118 	.word	0x20000118
 8001028:	20000114 	.word	0x20000114
 800102c:	08004244 	.word	0x08004244
 8001030:	200000c0 	.word	0x200000c0

08001034 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b094      	sub	sp, #80	; 0x50
 8001038:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800103a:	f107 031c 	add.w	r3, r7, #28
 800103e:	2234      	movs	r2, #52	; 0x34
 8001040:	2100      	movs	r1, #0
 8001042:	4618      	mov	r0, r3
 8001044:	f002 fc6e 	bl	8003924 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001048:	f107 0308 	add.w	r3, r7, #8
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
 8001052:	609a      	str	r2, [r3, #8]
 8001054:	60da      	str	r2, [r3, #12]
 8001056:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001058:	2300      	movs	r3, #0
 800105a:	607b      	str	r3, [r7, #4]
 800105c:	4b2a      	ldr	r3, [pc, #168]	; (8001108 <SystemClock_Config+0xd4>)
 800105e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001060:	4a29      	ldr	r2, [pc, #164]	; (8001108 <SystemClock_Config+0xd4>)
 8001062:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001066:	6413      	str	r3, [r2, #64]	; 0x40
 8001068:	4b27      	ldr	r3, [pc, #156]	; (8001108 <SystemClock_Config+0xd4>)
 800106a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001070:	607b      	str	r3, [r7, #4]
 8001072:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001074:	2300      	movs	r3, #0
 8001076:	603b      	str	r3, [r7, #0]
 8001078:	4b24      	ldr	r3, [pc, #144]	; (800110c <SystemClock_Config+0xd8>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001080:	4a22      	ldr	r2, [pc, #136]	; (800110c <SystemClock_Config+0xd8>)
 8001082:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001086:	6013      	str	r3, [r2, #0]
 8001088:	4b20      	ldr	r3, [pc, #128]	; (800110c <SystemClock_Config+0xd8>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001090:	603b      	str	r3, [r7, #0]
 8001092:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001094:	2301      	movs	r3, #1
 8001096:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001098:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800109c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800109e:	2302      	movs	r3, #2
 80010a0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010a6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80010a8:	2304      	movs	r3, #4
 80010aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 90;
 80010ac:	235a      	movs	r3, #90	; 0x5a
 80010ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010b0:	2302      	movs	r3, #2
 80010b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80010b4:	2302      	movs	r3, #2
 80010b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80010b8:	2302      	movs	r3, #2
 80010ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010bc:	f107 031c 	add.w	r3, r7, #28
 80010c0:	4618      	mov	r0, r3
 80010c2:	f001 f92d 	bl	8002320 <HAL_RCC_OscConfig>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80010cc:	f000 f92a 	bl	8001324 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010d0:	230f      	movs	r3, #15
 80010d2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010d4:	2302      	movs	r3, #2
 80010d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010d8:	2300      	movs	r3, #0
 80010da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010e0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010e6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010e8:	f107 0308 	add.w	r3, r7, #8
 80010ec:	2102      	movs	r1, #2
 80010ee:	4618      	mov	r0, r3
 80010f0:	f000 fdcc 	bl	8001c8c <HAL_RCC_ClockConfig>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <SystemClock_Config+0xca>
  {
    Error_Handler();
 80010fa:	f000 f913 	bl	8001324 <Error_Handler>
  }
}
 80010fe:	bf00      	nop
 8001100:	3750      	adds	r7, #80	; 0x50
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	40023800 	.word	0x40023800
 800110c:	40007000 	.word	0x40007000

08001110 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b086      	sub	sp, #24
 8001114:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001116:	f107 0308 	add.w	r3, r7, #8
 800111a:	2200      	movs	r2, #0
 800111c:	601a      	str	r2, [r3, #0]
 800111e:	605a      	str	r2, [r3, #4]
 8001120:	609a      	str	r2, [r3, #8]
 8001122:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001124:	463b      	mov	r3, r7
 8001126:	2200      	movs	r2, #0
 8001128:	601a      	str	r2, [r3, #0]
 800112a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800112c:	4b1d      	ldr	r3, [pc, #116]	; (80011a4 <MX_TIM2_Init+0x94>)
 800112e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001132:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 60000;
 8001134:	4b1b      	ldr	r3, [pc, #108]	; (80011a4 <MX_TIM2_Init+0x94>)
 8001136:	f64e 2260 	movw	r2, #60000	; 0xea60
 800113a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800113c:	4b19      	ldr	r3, [pc, #100]	; (80011a4 <MX_TIM2_Init+0x94>)
 800113e:	2200      	movs	r2, #0
 8001140:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 150;
 8001142:	4b18      	ldr	r3, [pc, #96]	; (80011a4 <MX_TIM2_Init+0x94>)
 8001144:	2296      	movs	r2, #150	; 0x96
 8001146:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001148:	4b16      	ldr	r3, [pc, #88]	; (80011a4 <MX_TIM2_Init+0x94>)
 800114a:	2200      	movs	r2, #0
 800114c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800114e:	4b15      	ldr	r3, [pc, #84]	; (80011a4 <MX_TIM2_Init+0x94>)
 8001150:	2200      	movs	r2, #0
 8001152:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001154:	4813      	ldr	r0, [pc, #76]	; (80011a4 <MX_TIM2_Init+0x94>)
 8001156:	f001 fb81 	bl	800285c <HAL_TIM_Base_Init>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001160:	f000 f8e0 	bl	8001324 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001164:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001168:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800116a:	f107 0308 	add.w	r3, r7, #8
 800116e:	4619      	mov	r1, r3
 8001170:	480c      	ldr	r0, [pc, #48]	; (80011a4 <MX_TIM2_Init+0x94>)
 8001172:	f001 fd3b 	bl	8002bec <HAL_TIM_ConfigClockSource>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800117c:	f000 f8d2 	bl	8001324 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001180:	2300      	movs	r3, #0
 8001182:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001184:	2300      	movs	r3, #0
 8001186:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001188:	463b      	mov	r3, r7
 800118a:	4619      	mov	r1, r3
 800118c:	4805      	ldr	r0, [pc, #20]	; (80011a4 <MX_TIM2_Init+0x94>)
 800118e:	f001 ff57 	bl	8003040 <HAL_TIMEx_MasterConfigSynchronization>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001198:	f000 f8c4 	bl	8001324 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800119c:	bf00      	nop
 800119e:	3718      	adds	r7, #24
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	20000078 	.word	0x20000078

080011a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011ac:	4b11      	ldr	r3, [pc, #68]	; (80011f4 <MX_USART2_UART_Init+0x4c>)
 80011ae:	4a12      	ldr	r2, [pc, #72]	; (80011f8 <MX_USART2_UART_Init+0x50>)
 80011b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011b2:	4b10      	ldr	r3, [pc, #64]	; (80011f4 <MX_USART2_UART_Init+0x4c>)
 80011b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011ba:	4b0e      	ldr	r3, [pc, #56]	; (80011f4 <MX_USART2_UART_Init+0x4c>)
 80011bc:	2200      	movs	r2, #0
 80011be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011c0:	4b0c      	ldr	r3, [pc, #48]	; (80011f4 <MX_USART2_UART_Init+0x4c>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011c6:	4b0b      	ldr	r3, [pc, #44]	; (80011f4 <MX_USART2_UART_Init+0x4c>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011cc:	4b09      	ldr	r3, [pc, #36]	; (80011f4 <MX_USART2_UART_Init+0x4c>)
 80011ce:	220c      	movs	r2, #12
 80011d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011d2:	4b08      	ldr	r3, [pc, #32]	; (80011f4 <MX_USART2_UART_Init+0x4c>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011d8:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <MX_USART2_UART_Init+0x4c>)
 80011da:	2200      	movs	r2, #0
 80011dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011de:	4805      	ldr	r0, [pc, #20]	; (80011f4 <MX_USART2_UART_Init+0x4c>)
 80011e0:	f001 ffbe 	bl	8003160 <HAL_UART_Init>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80011ea:	f000 f89b 	bl	8001324 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011ee:	bf00      	nop
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	200000c0 	.word	0x200000c0
 80011f8:	40004400 	.word	0x40004400

080011fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b08a      	sub	sp, #40	; 0x28
 8001200:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001202:	f107 0314 	add.w	r3, r7, #20
 8001206:	2200      	movs	r2, #0
 8001208:	601a      	str	r2, [r3, #0]
 800120a:	605a      	str	r2, [r3, #4]
 800120c:	609a      	str	r2, [r3, #8]
 800120e:	60da      	str	r2, [r3, #12]
 8001210:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001212:	2300      	movs	r3, #0
 8001214:	613b      	str	r3, [r7, #16]
 8001216:	4b3f      	ldr	r3, [pc, #252]	; (8001314 <MX_GPIO_Init+0x118>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	4a3e      	ldr	r2, [pc, #248]	; (8001314 <MX_GPIO_Init+0x118>)
 800121c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001220:	6313      	str	r3, [r2, #48]	; 0x30
 8001222:	4b3c      	ldr	r3, [pc, #240]	; (8001314 <MX_GPIO_Init+0x118>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800122a:	613b      	str	r3, [r7, #16]
 800122c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800122e:	2300      	movs	r3, #0
 8001230:	60fb      	str	r3, [r7, #12]
 8001232:	4b38      	ldr	r3, [pc, #224]	; (8001314 <MX_GPIO_Init+0x118>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	4a37      	ldr	r2, [pc, #220]	; (8001314 <MX_GPIO_Init+0x118>)
 8001238:	f043 0301 	orr.w	r3, r3, #1
 800123c:	6313      	str	r3, [r2, #48]	; 0x30
 800123e:	4b35      	ldr	r3, [pc, #212]	; (8001314 <MX_GPIO_Init+0x118>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	f003 0301 	and.w	r3, r3, #1
 8001246:	60fb      	str	r3, [r7, #12]
 8001248:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800124a:	2300      	movs	r3, #0
 800124c:	60bb      	str	r3, [r7, #8]
 800124e:	4b31      	ldr	r3, [pc, #196]	; (8001314 <MX_GPIO_Init+0x118>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	4a30      	ldr	r2, [pc, #192]	; (8001314 <MX_GPIO_Init+0x118>)
 8001254:	f043 0302 	orr.w	r3, r3, #2
 8001258:	6313      	str	r3, [r2, #48]	; 0x30
 800125a:	4b2e      	ldr	r3, [pc, #184]	; (8001314 <MX_GPIO_Init+0x118>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	f003 0302 	and.w	r3, r3, #2
 8001262:	60bb      	str	r3, [r7, #8]
 8001264:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001266:	2300      	movs	r3, #0
 8001268:	607b      	str	r3, [r7, #4]
 800126a:	4b2a      	ldr	r3, [pc, #168]	; (8001314 <MX_GPIO_Init+0x118>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	4a29      	ldr	r2, [pc, #164]	; (8001314 <MX_GPIO_Init+0x118>)
 8001270:	f043 0304 	orr.w	r3, r3, #4
 8001274:	6313      	str	r3, [r2, #48]	; 0x30
 8001276:	4b27      	ldr	r3, [pc, #156]	; (8001314 <MX_GPIO_Init+0x118>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	f003 0304 	and.w	r3, r3, #4
 800127e:	607b      	str	r3, [r7, #4]
 8001280:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : LeftEncoderA_Pin */
  GPIO_InitStruct.Pin = LeftEncoderA_Pin;
 8001282:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001286:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001288:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800128c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800128e:	2301      	movs	r3, #1
 8001290:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LeftEncoderA_GPIO_Port, &GPIO_InitStruct);
 8001292:	f107 0314 	add.w	r3, r7, #20
 8001296:	4619      	mov	r1, r3
 8001298:	481f      	ldr	r0, [pc, #124]	; (8001318 <MX_GPIO_Init+0x11c>)
 800129a:	f000 fb19 	bl	80018d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RightEncoderB_Pin */
  GPIO_InitStruct.Pin = RightEncoderB_Pin;
 800129e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012a4:	2300      	movs	r3, #0
 80012a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012a8:	2301      	movs	r3, #1
 80012aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RightEncoderB_GPIO_Port, &GPIO_InitStruct);
 80012ac:	f107 0314 	add.w	r3, r7, #20
 80012b0:	4619      	mov	r1, r3
 80012b2:	4819      	ldr	r0, [pc, #100]	; (8001318 <MX_GPIO_Init+0x11c>)
 80012b4:	f000 fb0c 	bl	80018d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RightEncoderA_Pin */
  GPIO_InitStruct.Pin = RightEncoderA_Pin;
 80012b8:	2340      	movs	r3, #64	; 0x40
 80012ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80012bc:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80012c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012c2:	2301      	movs	r3, #1
 80012c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RightEncoderA_GPIO_Port, &GPIO_InitStruct);
 80012c6:	f107 0314 	add.w	r3, r7, #20
 80012ca:	4619      	mov	r1, r3
 80012cc:	4813      	ldr	r0, [pc, #76]	; (800131c <MX_GPIO_Init+0x120>)
 80012ce:	f000 faff 	bl	80018d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LeftEncoderB_Pin */
  GPIO_InitStruct.Pin = LeftEncoderB_Pin;
 80012d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012d8:	2300      	movs	r3, #0
 80012da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012dc:	2301      	movs	r3, #1
 80012de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LeftEncoderB_GPIO_Port, &GPIO_InitStruct);
 80012e0:	f107 0314 	add.w	r3, r7, #20
 80012e4:	4619      	mov	r1, r3
 80012e6:	480e      	ldr	r0, [pc, #56]	; (8001320 <MX_GPIO_Init+0x124>)
 80012e8:	f000 faf2 	bl	80018d0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80012ec:	2200      	movs	r2, #0
 80012ee:	2100      	movs	r1, #0
 80012f0:	2017      	movs	r0, #23
 80012f2:	f000 fab6 	bl	8001862 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80012f6:	2017      	movs	r0, #23
 80012f8:	f000 facf 	bl	800189a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80012fc:	2200      	movs	r2, #0
 80012fe:	2100      	movs	r1, #0
 8001300:	2028      	movs	r0, #40	; 0x28
 8001302:	f000 faae 	bl	8001862 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001306:	2028      	movs	r0, #40	; 0x28
 8001308:	f000 fac7 	bl	800189a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800130c:	bf00      	nop
 800130e:	3728      	adds	r7, #40	; 0x28
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	40023800 	.word	0x40023800
 8001318:	40020400 	.word	0x40020400
 800131c:	40020800 	.word	0x40020800
 8001320:	40020000 	.word	0x40020000

08001324 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001328:	b672      	cpsid	i
}
 800132a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800132c:	e7fe      	b.n	800132c <Error_Handler+0x8>
	...

08001330 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001336:	2300      	movs	r3, #0
 8001338:	607b      	str	r3, [r7, #4]
 800133a:	4b10      	ldr	r3, [pc, #64]	; (800137c <HAL_MspInit+0x4c>)
 800133c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800133e:	4a0f      	ldr	r2, [pc, #60]	; (800137c <HAL_MspInit+0x4c>)
 8001340:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001344:	6453      	str	r3, [r2, #68]	; 0x44
 8001346:	4b0d      	ldr	r3, [pc, #52]	; (800137c <HAL_MspInit+0x4c>)
 8001348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800134a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800134e:	607b      	str	r3, [r7, #4]
 8001350:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001352:	2300      	movs	r3, #0
 8001354:	603b      	str	r3, [r7, #0]
 8001356:	4b09      	ldr	r3, [pc, #36]	; (800137c <HAL_MspInit+0x4c>)
 8001358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135a:	4a08      	ldr	r2, [pc, #32]	; (800137c <HAL_MspInit+0x4c>)
 800135c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001360:	6413      	str	r3, [r2, #64]	; 0x40
 8001362:	4b06      	ldr	r3, [pc, #24]	; (800137c <HAL_MspInit+0x4c>)
 8001364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800136a:	603b      	str	r3, [r7, #0]
 800136c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800136e:	2007      	movs	r0, #7
 8001370:	f000 fa6c 	bl	800184c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001374:	bf00      	nop
 8001376:	3708      	adds	r7, #8
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	40023800 	.word	0x40023800

08001380 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001390:	d115      	bne.n	80013be <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001392:	2300      	movs	r3, #0
 8001394:	60fb      	str	r3, [r7, #12]
 8001396:	4b0c      	ldr	r3, [pc, #48]	; (80013c8 <HAL_TIM_Base_MspInit+0x48>)
 8001398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139a:	4a0b      	ldr	r2, [pc, #44]	; (80013c8 <HAL_TIM_Base_MspInit+0x48>)
 800139c:	f043 0301 	orr.w	r3, r3, #1
 80013a0:	6413      	str	r3, [r2, #64]	; 0x40
 80013a2:	4b09      	ldr	r3, [pc, #36]	; (80013c8 <HAL_TIM_Base_MspInit+0x48>)
 80013a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a6:	f003 0301 	and.w	r3, r3, #1
 80013aa:	60fb      	str	r3, [r7, #12]
 80013ac:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80013ae:	2200      	movs	r2, #0
 80013b0:	2100      	movs	r1, #0
 80013b2:	201c      	movs	r0, #28
 80013b4:	f000 fa55 	bl	8001862 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80013b8:	201c      	movs	r0, #28
 80013ba:	f000 fa6e 	bl	800189a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80013be:	bf00      	nop
 80013c0:	3710      	adds	r7, #16
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	40023800 	.word	0x40023800

080013cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b08a      	sub	sp, #40	; 0x28
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d4:	f107 0314 	add.w	r3, r7, #20
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	605a      	str	r2, [r3, #4]
 80013de:	609a      	str	r2, [r3, #8]
 80013e0:	60da      	str	r2, [r3, #12]
 80013e2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a19      	ldr	r2, [pc, #100]	; (8001450 <HAL_UART_MspInit+0x84>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d12b      	bne.n	8001446 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013ee:	2300      	movs	r3, #0
 80013f0:	613b      	str	r3, [r7, #16]
 80013f2:	4b18      	ldr	r3, [pc, #96]	; (8001454 <HAL_UART_MspInit+0x88>)
 80013f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f6:	4a17      	ldr	r2, [pc, #92]	; (8001454 <HAL_UART_MspInit+0x88>)
 80013f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013fc:	6413      	str	r3, [r2, #64]	; 0x40
 80013fe:	4b15      	ldr	r3, [pc, #84]	; (8001454 <HAL_UART_MspInit+0x88>)
 8001400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001406:	613b      	str	r3, [r7, #16]
 8001408:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800140a:	2300      	movs	r3, #0
 800140c:	60fb      	str	r3, [r7, #12]
 800140e:	4b11      	ldr	r3, [pc, #68]	; (8001454 <HAL_UART_MspInit+0x88>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001412:	4a10      	ldr	r2, [pc, #64]	; (8001454 <HAL_UART_MspInit+0x88>)
 8001414:	f043 0301 	orr.w	r3, r3, #1
 8001418:	6313      	str	r3, [r2, #48]	; 0x30
 800141a:	4b0e      	ldr	r3, [pc, #56]	; (8001454 <HAL_UART_MspInit+0x88>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141e:	f003 0301 	and.w	r3, r3, #1
 8001422:	60fb      	str	r3, [r7, #12]
 8001424:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001426:	230c      	movs	r3, #12
 8001428:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142a:	2302      	movs	r3, #2
 800142c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142e:	2300      	movs	r3, #0
 8001430:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001432:	2303      	movs	r3, #3
 8001434:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001436:	2307      	movs	r3, #7
 8001438:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800143a:	f107 0314 	add.w	r3, r7, #20
 800143e:	4619      	mov	r1, r3
 8001440:	4805      	ldr	r0, [pc, #20]	; (8001458 <HAL_UART_MspInit+0x8c>)
 8001442:	f000 fa45 	bl	80018d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001446:	bf00      	nop
 8001448:	3728      	adds	r7, #40	; 0x28
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	40004400 	.word	0x40004400
 8001454:	40023800 	.word	0x40023800
 8001458:	40020000 	.word	0x40020000

0800145c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001460:	e7fe      	b.n	8001460 <NMI_Handler+0x4>

08001462 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001462:	b480      	push	{r7}
 8001464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001466:	e7fe      	b.n	8001466 <HardFault_Handler+0x4>

08001468 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800146c:	e7fe      	b.n	800146c <MemManage_Handler+0x4>

0800146e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800146e:	b480      	push	{r7}
 8001470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001472:	e7fe      	b.n	8001472 <BusFault_Handler+0x4>

08001474 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001478:	e7fe      	b.n	8001478 <UsageFault_Handler+0x4>

0800147a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800147a:	b480      	push	{r7}
 800147c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800147e:	bf00      	nop
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr

08001488 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800148c:	bf00      	nop
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr

08001496 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001496:	b480      	push	{r7}
 8001498:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800149a:	bf00      	nop
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr

080014a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014a8:	f000 f8e0 	bl	800166c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014ac:	bf00      	nop
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RightEncoderA_Pin);
 80014b4:	2040      	movs	r0, #64	; 0x40
 80014b6:	f000 fbd1 	bl	8001c5c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80014ba:	bf00      	nop
 80014bc:	bd80      	pop	{r7, pc}
	...

080014c0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80014c4:	4802      	ldr	r0, [pc, #8]	; (80014d0 <TIM2_IRQHandler+0x10>)
 80014c6:	f001 fa89 	bl	80029dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80014ca:	bf00      	nop
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	20000078 	.word	0x20000078

080014d4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LeftEncoderA_Pin);
 80014d8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80014dc:	f000 fbbe 	bl	8001c5c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80014e0:	bf00      	nop
 80014e2:	bd80      	pop	{r7, pc}

080014e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b086      	sub	sp, #24
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014ec:	4a14      	ldr	r2, [pc, #80]	; (8001540 <_sbrk+0x5c>)
 80014ee:	4b15      	ldr	r3, [pc, #84]	; (8001544 <_sbrk+0x60>)
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014f8:	4b13      	ldr	r3, [pc, #76]	; (8001548 <_sbrk+0x64>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d102      	bne.n	8001506 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001500:	4b11      	ldr	r3, [pc, #68]	; (8001548 <_sbrk+0x64>)
 8001502:	4a12      	ldr	r2, [pc, #72]	; (800154c <_sbrk+0x68>)
 8001504:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001506:	4b10      	ldr	r3, [pc, #64]	; (8001548 <_sbrk+0x64>)
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4413      	add	r3, r2
 800150e:	693a      	ldr	r2, [r7, #16]
 8001510:	429a      	cmp	r2, r3
 8001512:	d207      	bcs.n	8001524 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001514:	f002 fa0e 	bl	8003934 <__errno>
 8001518:	4603      	mov	r3, r0
 800151a:	220c      	movs	r2, #12
 800151c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800151e:	f04f 33ff 	mov.w	r3, #4294967295
 8001522:	e009      	b.n	8001538 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001524:	4b08      	ldr	r3, [pc, #32]	; (8001548 <_sbrk+0x64>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800152a:	4b07      	ldr	r3, [pc, #28]	; (8001548 <_sbrk+0x64>)
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4413      	add	r3, r2
 8001532:	4a05      	ldr	r2, [pc, #20]	; (8001548 <_sbrk+0x64>)
 8001534:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001536:	68fb      	ldr	r3, [r7, #12]
}
 8001538:	4618      	mov	r0, r3
 800153a:	3718      	adds	r7, #24
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	20020000 	.word	0x20020000
 8001544:	00000400 	.word	0x00000400
 8001548:	2000011c 	.word	0x2000011c
 800154c:	20000270 	.word	0x20000270

08001550 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001554:	4b06      	ldr	r3, [pc, #24]	; (8001570 <SystemInit+0x20>)
 8001556:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800155a:	4a05      	ldr	r2, [pc, #20]	; (8001570 <SystemInit+0x20>)
 800155c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001560:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001564:	bf00      	nop
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	e000ed00 	.word	0xe000ed00

08001574 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001574:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015ac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001578:	480d      	ldr	r0, [pc, #52]	; (80015b0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800157a:	490e      	ldr	r1, [pc, #56]	; (80015b4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800157c:	4a0e      	ldr	r2, [pc, #56]	; (80015b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800157e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001580:	e002      	b.n	8001588 <LoopCopyDataInit>

08001582 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001582:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001584:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001586:	3304      	adds	r3, #4

08001588 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001588:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800158a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800158c:	d3f9      	bcc.n	8001582 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800158e:	4a0b      	ldr	r2, [pc, #44]	; (80015bc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001590:	4c0b      	ldr	r4, [pc, #44]	; (80015c0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001592:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001594:	e001      	b.n	800159a <LoopFillZerobss>

08001596 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001596:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001598:	3204      	adds	r2, #4

0800159a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800159a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800159c:	d3fb      	bcc.n	8001596 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800159e:	f7ff ffd7 	bl	8001550 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015a2:	f002 f9cd 	bl	8003940 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015a6:	f7ff fd05 	bl	8000fb4 <main>
  bx  lr    
 80015aa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80015ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80015b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015b4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80015b8:	080042f4 	.word	0x080042f4
  ldr r2, =_sbss
 80015bc:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80015c0:	2000026c 	.word	0x2000026c

080015c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015c4:	e7fe      	b.n	80015c4 <ADC_IRQHandler>
	...

080015c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015cc:	4b0e      	ldr	r3, [pc, #56]	; (8001608 <HAL_Init+0x40>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a0d      	ldr	r2, [pc, #52]	; (8001608 <HAL_Init+0x40>)
 80015d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015d8:	4b0b      	ldr	r3, [pc, #44]	; (8001608 <HAL_Init+0x40>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a0a      	ldr	r2, [pc, #40]	; (8001608 <HAL_Init+0x40>)
 80015de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015e4:	4b08      	ldr	r3, [pc, #32]	; (8001608 <HAL_Init+0x40>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a07      	ldr	r2, [pc, #28]	; (8001608 <HAL_Init+0x40>)
 80015ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015f0:	2003      	movs	r0, #3
 80015f2:	f000 f92b 	bl	800184c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015f6:	2000      	movs	r0, #0
 80015f8:	f000 f808 	bl	800160c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015fc:	f7ff fe98 	bl	8001330 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001600:	2300      	movs	r3, #0
}
 8001602:	4618      	mov	r0, r3
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	40023c00 	.word	0x40023c00

0800160c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001614:	4b12      	ldr	r3, [pc, #72]	; (8001660 <HAL_InitTick+0x54>)
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	4b12      	ldr	r3, [pc, #72]	; (8001664 <HAL_InitTick+0x58>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	4619      	mov	r1, r3
 800161e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001622:	fbb3 f3f1 	udiv	r3, r3, r1
 8001626:	fbb2 f3f3 	udiv	r3, r2, r3
 800162a:	4618      	mov	r0, r3
 800162c:	f000 f943 	bl	80018b6 <HAL_SYSTICK_Config>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	e00e      	b.n	8001658 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2b0f      	cmp	r3, #15
 800163e:	d80a      	bhi.n	8001656 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001640:	2200      	movs	r2, #0
 8001642:	6879      	ldr	r1, [r7, #4]
 8001644:	f04f 30ff 	mov.w	r0, #4294967295
 8001648:	f000 f90b 	bl	8001862 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800164c:	4a06      	ldr	r2, [pc, #24]	; (8001668 <HAL_InitTick+0x5c>)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001652:	2300      	movs	r3, #0
 8001654:	e000      	b.n	8001658 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
}
 8001658:	4618      	mov	r0, r3
 800165a:	3708      	adds	r7, #8
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	20000000 	.word	0x20000000
 8001664:	20000008 	.word	0x20000008
 8001668:	20000004 	.word	0x20000004

0800166c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001670:	4b06      	ldr	r3, [pc, #24]	; (800168c <HAL_IncTick+0x20>)
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	461a      	mov	r2, r3
 8001676:	4b06      	ldr	r3, [pc, #24]	; (8001690 <HAL_IncTick+0x24>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4413      	add	r3, r2
 800167c:	4a04      	ldr	r2, [pc, #16]	; (8001690 <HAL_IncTick+0x24>)
 800167e:	6013      	str	r3, [r2, #0]
}
 8001680:	bf00      	nop
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	20000008 	.word	0x20000008
 8001690:	20000120 	.word	0x20000120

08001694 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  return uwTick;
 8001698:	4b03      	ldr	r3, [pc, #12]	; (80016a8 <HAL_GetTick+0x14>)
 800169a:	681b      	ldr	r3, [r3, #0]
}
 800169c:	4618      	mov	r0, r3
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	20000120 	.word	0x20000120

080016ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b085      	sub	sp, #20
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	f003 0307 	and.w	r3, r3, #7
 80016ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016bc:	4b0c      	ldr	r3, [pc, #48]	; (80016f0 <__NVIC_SetPriorityGrouping+0x44>)
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016c2:	68ba      	ldr	r2, [r7, #8]
 80016c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016c8:	4013      	ands	r3, r2
 80016ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016de:	4a04      	ldr	r2, [pc, #16]	; (80016f0 <__NVIC_SetPriorityGrouping+0x44>)
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	60d3      	str	r3, [r2, #12]
}
 80016e4:	bf00      	nop
 80016e6:	3714      	adds	r7, #20
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr
 80016f0:	e000ed00 	.word	0xe000ed00

080016f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016f8:	4b04      	ldr	r3, [pc, #16]	; (800170c <__NVIC_GetPriorityGrouping+0x18>)
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	0a1b      	lsrs	r3, r3, #8
 80016fe:	f003 0307 	and.w	r3, r3, #7
}
 8001702:	4618      	mov	r0, r3
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr
 800170c:	e000ed00 	.word	0xe000ed00

08001710 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	4603      	mov	r3, r0
 8001718:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800171a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800171e:	2b00      	cmp	r3, #0
 8001720:	db0b      	blt.n	800173a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001722:	79fb      	ldrb	r3, [r7, #7]
 8001724:	f003 021f 	and.w	r2, r3, #31
 8001728:	4907      	ldr	r1, [pc, #28]	; (8001748 <__NVIC_EnableIRQ+0x38>)
 800172a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800172e:	095b      	lsrs	r3, r3, #5
 8001730:	2001      	movs	r0, #1
 8001732:	fa00 f202 	lsl.w	r2, r0, r2
 8001736:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800173a:	bf00      	nop
 800173c:	370c      	adds	r7, #12
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	e000e100 	.word	0xe000e100

0800174c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	4603      	mov	r3, r0
 8001754:	6039      	str	r1, [r7, #0]
 8001756:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001758:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175c:	2b00      	cmp	r3, #0
 800175e:	db0a      	blt.n	8001776 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	b2da      	uxtb	r2, r3
 8001764:	490c      	ldr	r1, [pc, #48]	; (8001798 <__NVIC_SetPriority+0x4c>)
 8001766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800176a:	0112      	lsls	r2, r2, #4
 800176c:	b2d2      	uxtb	r2, r2
 800176e:	440b      	add	r3, r1
 8001770:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001774:	e00a      	b.n	800178c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	b2da      	uxtb	r2, r3
 800177a:	4908      	ldr	r1, [pc, #32]	; (800179c <__NVIC_SetPriority+0x50>)
 800177c:	79fb      	ldrb	r3, [r7, #7]
 800177e:	f003 030f 	and.w	r3, r3, #15
 8001782:	3b04      	subs	r3, #4
 8001784:	0112      	lsls	r2, r2, #4
 8001786:	b2d2      	uxtb	r2, r2
 8001788:	440b      	add	r3, r1
 800178a:	761a      	strb	r2, [r3, #24]
}
 800178c:	bf00      	nop
 800178e:	370c      	adds	r7, #12
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr
 8001798:	e000e100 	.word	0xe000e100
 800179c:	e000ed00 	.word	0xe000ed00

080017a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b089      	sub	sp, #36	; 0x24
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	60f8      	str	r0, [r7, #12]
 80017a8:	60b9      	str	r1, [r7, #8]
 80017aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	f003 0307 	and.w	r3, r3, #7
 80017b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	f1c3 0307 	rsb	r3, r3, #7
 80017ba:	2b04      	cmp	r3, #4
 80017bc:	bf28      	it	cs
 80017be:	2304      	movcs	r3, #4
 80017c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	3304      	adds	r3, #4
 80017c6:	2b06      	cmp	r3, #6
 80017c8:	d902      	bls.n	80017d0 <NVIC_EncodePriority+0x30>
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	3b03      	subs	r3, #3
 80017ce:	e000      	b.n	80017d2 <NVIC_EncodePriority+0x32>
 80017d0:	2300      	movs	r3, #0
 80017d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017d4:	f04f 32ff 	mov.w	r2, #4294967295
 80017d8:	69bb      	ldr	r3, [r7, #24]
 80017da:	fa02 f303 	lsl.w	r3, r2, r3
 80017de:	43da      	mvns	r2, r3
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	401a      	ands	r2, r3
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017e8:	f04f 31ff 	mov.w	r1, #4294967295
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	fa01 f303 	lsl.w	r3, r1, r3
 80017f2:	43d9      	mvns	r1, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017f8:	4313      	orrs	r3, r2
         );
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3724      	adds	r7, #36	; 0x24
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
	...

08001808 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	3b01      	subs	r3, #1
 8001814:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001818:	d301      	bcc.n	800181e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800181a:	2301      	movs	r3, #1
 800181c:	e00f      	b.n	800183e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800181e:	4a0a      	ldr	r2, [pc, #40]	; (8001848 <SysTick_Config+0x40>)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	3b01      	subs	r3, #1
 8001824:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001826:	210f      	movs	r1, #15
 8001828:	f04f 30ff 	mov.w	r0, #4294967295
 800182c:	f7ff ff8e 	bl	800174c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001830:	4b05      	ldr	r3, [pc, #20]	; (8001848 <SysTick_Config+0x40>)
 8001832:	2200      	movs	r2, #0
 8001834:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001836:	4b04      	ldr	r3, [pc, #16]	; (8001848 <SysTick_Config+0x40>)
 8001838:	2207      	movs	r2, #7
 800183a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800183c:	2300      	movs	r3, #0
}
 800183e:	4618      	mov	r0, r3
 8001840:	3708      	adds	r7, #8
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	e000e010 	.word	0xe000e010

0800184c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	f7ff ff29 	bl	80016ac <__NVIC_SetPriorityGrouping>
}
 800185a:	bf00      	nop
 800185c:	3708      	adds	r7, #8
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}

08001862 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001862:	b580      	push	{r7, lr}
 8001864:	b086      	sub	sp, #24
 8001866:	af00      	add	r7, sp, #0
 8001868:	4603      	mov	r3, r0
 800186a:	60b9      	str	r1, [r7, #8]
 800186c:	607a      	str	r2, [r7, #4]
 800186e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001870:	2300      	movs	r3, #0
 8001872:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001874:	f7ff ff3e 	bl	80016f4 <__NVIC_GetPriorityGrouping>
 8001878:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800187a:	687a      	ldr	r2, [r7, #4]
 800187c:	68b9      	ldr	r1, [r7, #8]
 800187e:	6978      	ldr	r0, [r7, #20]
 8001880:	f7ff ff8e 	bl	80017a0 <NVIC_EncodePriority>
 8001884:	4602      	mov	r2, r0
 8001886:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800188a:	4611      	mov	r1, r2
 800188c:	4618      	mov	r0, r3
 800188e:	f7ff ff5d 	bl	800174c <__NVIC_SetPriority>
}
 8001892:	bf00      	nop
 8001894:	3718      	adds	r7, #24
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}

0800189a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800189a:	b580      	push	{r7, lr}
 800189c:	b082      	sub	sp, #8
 800189e:	af00      	add	r7, sp, #0
 80018a0:	4603      	mov	r3, r0
 80018a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7ff ff31 	bl	8001710 <__NVIC_EnableIRQ>
}
 80018ae:	bf00      	nop
 80018b0:	3708      	adds	r7, #8
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}

080018b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018b6:	b580      	push	{r7, lr}
 80018b8:	b082      	sub	sp, #8
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	f7ff ffa2 	bl	8001808 <SysTick_Config>
 80018c4:	4603      	mov	r3, r0
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3708      	adds	r7, #8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
	...

080018d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b089      	sub	sp, #36	; 0x24
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018da:	2300      	movs	r3, #0
 80018dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018de:	2300      	movs	r3, #0
 80018e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018e2:	2300      	movs	r3, #0
 80018e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018e6:	2300      	movs	r3, #0
 80018e8:	61fb      	str	r3, [r7, #28]
 80018ea:	e165      	b.n	8001bb8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018ec:	2201      	movs	r2, #1
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	fa02 f303 	lsl.w	r3, r2, r3
 80018f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	697a      	ldr	r2, [r7, #20]
 80018fc:	4013      	ands	r3, r2
 80018fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001900:	693a      	ldr	r2, [r7, #16]
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	429a      	cmp	r2, r3
 8001906:	f040 8154 	bne.w	8001bb2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	f003 0303 	and.w	r3, r3, #3
 8001912:	2b01      	cmp	r3, #1
 8001914:	d005      	beq.n	8001922 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800191e:	2b02      	cmp	r3, #2
 8001920:	d130      	bne.n	8001984 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001928:	69fb      	ldr	r3, [r7, #28]
 800192a:	005b      	lsls	r3, r3, #1
 800192c:	2203      	movs	r2, #3
 800192e:	fa02 f303 	lsl.w	r3, r2, r3
 8001932:	43db      	mvns	r3, r3
 8001934:	69ba      	ldr	r2, [r7, #24]
 8001936:	4013      	ands	r3, r2
 8001938:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	68da      	ldr	r2, [r3, #12]
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	005b      	lsls	r3, r3, #1
 8001942:	fa02 f303 	lsl.w	r3, r2, r3
 8001946:	69ba      	ldr	r2, [r7, #24]
 8001948:	4313      	orrs	r3, r2
 800194a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	69ba      	ldr	r2, [r7, #24]
 8001950:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001958:	2201      	movs	r2, #1
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	fa02 f303 	lsl.w	r3, r2, r3
 8001960:	43db      	mvns	r3, r3
 8001962:	69ba      	ldr	r2, [r7, #24]
 8001964:	4013      	ands	r3, r2
 8001966:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	091b      	lsrs	r3, r3, #4
 800196e:	f003 0201 	and.w	r2, r3, #1
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	fa02 f303 	lsl.w	r3, r2, r3
 8001978:	69ba      	ldr	r2, [r7, #24]
 800197a:	4313      	orrs	r3, r2
 800197c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	69ba      	ldr	r2, [r7, #24]
 8001982:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f003 0303 	and.w	r3, r3, #3
 800198c:	2b03      	cmp	r3, #3
 800198e:	d017      	beq.n	80019c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	005b      	lsls	r3, r3, #1
 800199a:	2203      	movs	r2, #3
 800199c:	fa02 f303 	lsl.w	r3, r2, r3
 80019a0:	43db      	mvns	r3, r3
 80019a2:	69ba      	ldr	r2, [r7, #24]
 80019a4:	4013      	ands	r3, r2
 80019a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	689a      	ldr	r2, [r3, #8]
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	005b      	lsls	r3, r3, #1
 80019b0:	fa02 f303 	lsl.w	r3, r2, r3
 80019b4:	69ba      	ldr	r2, [r7, #24]
 80019b6:	4313      	orrs	r3, r2
 80019b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	69ba      	ldr	r2, [r7, #24]
 80019be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f003 0303 	and.w	r3, r3, #3
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d123      	bne.n	8001a14 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	08da      	lsrs	r2, r3, #3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	3208      	adds	r2, #8
 80019d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	f003 0307 	and.w	r3, r3, #7
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	220f      	movs	r2, #15
 80019e4:	fa02 f303 	lsl.w	r3, r2, r3
 80019e8:	43db      	mvns	r3, r3
 80019ea:	69ba      	ldr	r2, [r7, #24]
 80019ec:	4013      	ands	r3, r2
 80019ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	691a      	ldr	r2, [r3, #16]
 80019f4:	69fb      	ldr	r3, [r7, #28]
 80019f6:	f003 0307 	and.w	r3, r3, #7
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	4313      	orrs	r3, r2
 8001a04:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	08da      	lsrs	r2, r3, #3
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	3208      	adds	r2, #8
 8001a0e:	69b9      	ldr	r1, [r7, #24]
 8001a10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	005b      	lsls	r3, r3, #1
 8001a1e:	2203      	movs	r2, #3
 8001a20:	fa02 f303 	lsl.w	r3, r2, r3
 8001a24:	43db      	mvns	r3, r3
 8001a26:	69ba      	ldr	r2, [r7, #24]
 8001a28:	4013      	ands	r3, r2
 8001a2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f003 0203 	and.w	r2, r3, #3
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	005b      	lsls	r3, r3, #1
 8001a38:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3c:	69ba      	ldr	r2, [r7, #24]
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	69ba      	ldr	r2, [r7, #24]
 8001a46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	f000 80ae 	beq.w	8001bb2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a56:	2300      	movs	r3, #0
 8001a58:	60fb      	str	r3, [r7, #12]
 8001a5a:	4b5d      	ldr	r3, [pc, #372]	; (8001bd0 <HAL_GPIO_Init+0x300>)
 8001a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a5e:	4a5c      	ldr	r2, [pc, #368]	; (8001bd0 <HAL_GPIO_Init+0x300>)
 8001a60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a64:	6453      	str	r3, [r2, #68]	; 0x44
 8001a66:	4b5a      	ldr	r3, [pc, #360]	; (8001bd0 <HAL_GPIO_Init+0x300>)
 8001a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a6e:	60fb      	str	r3, [r7, #12]
 8001a70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a72:	4a58      	ldr	r2, [pc, #352]	; (8001bd4 <HAL_GPIO_Init+0x304>)
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	089b      	lsrs	r3, r3, #2
 8001a78:	3302      	adds	r3, #2
 8001a7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	f003 0303 	and.w	r3, r3, #3
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	220f      	movs	r2, #15
 8001a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8e:	43db      	mvns	r3, r3
 8001a90:	69ba      	ldr	r2, [r7, #24]
 8001a92:	4013      	ands	r3, r2
 8001a94:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4a4f      	ldr	r2, [pc, #316]	; (8001bd8 <HAL_GPIO_Init+0x308>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d025      	beq.n	8001aea <HAL_GPIO_Init+0x21a>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4a4e      	ldr	r2, [pc, #312]	; (8001bdc <HAL_GPIO_Init+0x30c>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d01f      	beq.n	8001ae6 <HAL_GPIO_Init+0x216>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4a4d      	ldr	r2, [pc, #308]	; (8001be0 <HAL_GPIO_Init+0x310>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d019      	beq.n	8001ae2 <HAL_GPIO_Init+0x212>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4a4c      	ldr	r2, [pc, #304]	; (8001be4 <HAL_GPIO_Init+0x314>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d013      	beq.n	8001ade <HAL_GPIO_Init+0x20e>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4a4b      	ldr	r2, [pc, #300]	; (8001be8 <HAL_GPIO_Init+0x318>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d00d      	beq.n	8001ada <HAL_GPIO_Init+0x20a>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4a4a      	ldr	r2, [pc, #296]	; (8001bec <HAL_GPIO_Init+0x31c>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d007      	beq.n	8001ad6 <HAL_GPIO_Init+0x206>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	4a49      	ldr	r2, [pc, #292]	; (8001bf0 <HAL_GPIO_Init+0x320>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d101      	bne.n	8001ad2 <HAL_GPIO_Init+0x202>
 8001ace:	2306      	movs	r3, #6
 8001ad0:	e00c      	b.n	8001aec <HAL_GPIO_Init+0x21c>
 8001ad2:	2307      	movs	r3, #7
 8001ad4:	e00a      	b.n	8001aec <HAL_GPIO_Init+0x21c>
 8001ad6:	2305      	movs	r3, #5
 8001ad8:	e008      	b.n	8001aec <HAL_GPIO_Init+0x21c>
 8001ada:	2304      	movs	r3, #4
 8001adc:	e006      	b.n	8001aec <HAL_GPIO_Init+0x21c>
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e004      	b.n	8001aec <HAL_GPIO_Init+0x21c>
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	e002      	b.n	8001aec <HAL_GPIO_Init+0x21c>
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e000      	b.n	8001aec <HAL_GPIO_Init+0x21c>
 8001aea:	2300      	movs	r3, #0
 8001aec:	69fa      	ldr	r2, [r7, #28]
 8001aee:	f002 0203 	and.w	r2, r2, #3
 8001af2:	0092      	lsls	r2, r2, #2
 8001af4:	4093      	lsls	r3, r2
 8001af6:	69ba      	ldr	r2, [r7, #24]
 8001af8:	4313      	orrs	r3, r2
 8001afa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001afc:	4935      	ldr	r1, [pc, #212]	; (8001bd4 <HAL_GPIO_Init+0x304>)
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	089b      	lsrs	r3, r3, #2
 8001b02:	3302      	adds	r3, #2
 8001b04:	69ba      	ldr	r2, [r7, #24]
 8001b06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b0a:	4b3a      	ldr	r3, [pc, #232]	; (8001bf4 <HAL_GPIO_Init+0x324>)
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	43db      	mvns	r3, r3
 8001b14:	69ba      	ldr	r2, [r7, #24]
 8001b16:	4013      	ands	r3, r2
 8001b18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d003      	beq.n	8001b2e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001b26:	69ba      	ldr	r2, [r7, #24]
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b2e:	4a31      	ldr	r2, [pc, #196]	; (8001bf4 <HAL_GPIO_Init+0x324>)
 8001b30:	69bb      	ldr	r3, [r7, #24]
 8001b32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b34:	4b2f      	ldr	r3, [pc, #188]	; (8001bf4 <HAL_GPIO_Init+0x324>)
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	43db      	mvns	r3, r3
 8001b3e:	69ba      	ldr	r2, [r7, #24]
 8001b40:	4013      	ands	r3, r2
 8001b42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d003      	beq.n	8001b58 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001b50:	69ba      	ldr	r2, [r7, #24]
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b58:	4a26      	ldr	r2, [pc, #152]	; (8001bf4 <HAL_GPIO_Init+0x324>)
 8001b5a:	69bb      	ldr	r3, [r7, #24]
 8001b5c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b5e:	4b25      	ldr	r3, [pc, #148]	; (8001bf4 <HAL_GPIO_Init+0x324>)
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	43db      	mvns	r3, r3
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d003      	beq.n	8001b82 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001b7a:	69ba      	ldr	r2, [r7, #24]
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b82:	4a1c      	ldr	r2, [pc, #112]	; (8001bf4 <HAL_GPIO_Init+0x324>)
 8001b84:	69bb      	ldr	r3, [r7, #24]
 8001b86:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b88:	4b1a      	ldr	r3, [pc, #104]	; (8001bf4 <HAL_GPIO_Init+0x324>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	43db      	mvns	r3, r3
 8001b92:	69ba      	ldr	r2, [r7, #24]
 8001b94:	4013      	ands	r3, r2
 8001b96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d003      	beq.n	8001bac <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001ba4:	69ba      	ldr	r2, [r7, #24]
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001bac:	4a11      	ldr	r2, [pc, #68]	; (8001bf4 <HAL_GPIO_Init+0x324>)
 8001bae:	69bb      	ldr	r3, [r7, #24]
 8001bb0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	61fb      	str	r3, [r7, #28]
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	2b0f      	cmp	r3, #15
 8001bbc:	f67f ae96 	bls.w	80018ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001bc0:	bf00      	nop
 8001bc2:	bf00      	nop
 8001bc4:	3724      	adds	r7, #36	; 0x24
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	40023800 	.word	0x40023800
 8001bd4:	40013800 	.word	0x40013800
 8001bd8:	40020000 	.word	0x40020000
 8001bdc:	40020400 	.word	0x40020400
 8001be0:	40020800 	.word	0x40020800
 8001be4:	40020c00 	.word	0x40020c00
 8001be8:	40021000 	.word	0x40021000
 8001bec:	40021400 	.word	0x40021400
 8001bf0:	40021800 	.word	0x40021800
 8001bf4:	40013c00 	.word	0x40013c00

08001bf8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b085      	sub	sp, #20
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	460b      	mov	r3, r1
 8001c02:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	691a      	ldr	r2, [r3, #16]
 8001c08:	887b      	ldrh	r3, [r7, #2]
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d002      	beq.n	8001c16 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c10:	2301      	movs	r3, #1
 8001c12:	73fb      	strb	r3, [r7, #15]
 8001c14:	e001      	b.n	8001c1a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c16:	2300      	movs	r3, #0
 8001c18:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3714      	adds	r7, #20
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b085      	sub	sp, #20
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	460b      	mov	r3, r1
 8001c32:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	695b      	ldr	r3, [r3, #20]
 8001c38:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c3a:	887a      	ldrh	r2, [r7, #2]
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	4013      	ands	r3, r2
 8001c40:	041a      	lsls	r2, r3, #16
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	43d9      	mvns	r1, r3
 8001c46:	887b      	ldrh	r3, [r7, #2]
 8001c48:	400b      	ands	r3, r1
 8001c4a:	431a      	orrs	r2, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	619a      	str	r2, [r3, #24]
}
 8001c50:	bf00      	nop
 8001c52:	3714      	adds	r7, #20
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr

08001c5c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	4603      	mov	r3, r0
 8001c64:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001c66:	4b08      	ldr	r3, [pc, #32]	; (8001c88 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c68:	695a      	ldr	r2, [r3, #20]
 8001c6a:	88fb      	ldrh	r3, [r7, #6]
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d006      	beq.n	8001c80 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001c72:	4a05      	ldr	r2, [pc, #20]	; (8001c88 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c74:	88fb      	ldrh	r3, [r7, #6]
 8001c76:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001c78:	88fb      	ldrh	r3, [r7, #6]
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7ff f88c 	bl	8000d98 <HAL_GPIO_EXTI_Callback>
  }
}
 8001c80:	bf00      	nop
 8001c82:	3708      	adds	r7, #8
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	40013c00 	.word	0x40013c00

08001c8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d101      	bne.n	8001ca0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e0cc      	b.n	8001e3a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ca0:	4b68      	ldr	r3, [pc, #416]	; (8001e44 <HAL_RCC_ClockConfig+0x1b8>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 030f 	and.w	r3, r3, #15
 8001ca8:	683a      	ldr	r2, [r7, #0]
 8001caa:	429a      	cmp	r2, r3
 8001cac:	d90c      	bls.n	8001cc8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cae:	4b65      	ldr	r3, [pc, #404]	; (8001e44 <HAL_RCC_ClockConfig+0x1b8>)
 8001cb0:	683a      	ldr	r2, [r7, #0]
 8001cb2:	b2d2      	uxtb	r2, r2
 8001cb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cb6:	4b63      	ldr	r3, [pc, #396]	; (8001e44 <HAL_RCC_ClockConfig+0x1b8>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 030f 	and.w	r3, r3, #15
 8001cbe:	683a      	ldr	r2, [r7, #0]
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d001      	beq.n	8001cc8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e0b8      	b.n	8001e3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 0302 	and.w	r3, r3, #2
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d020      	beq.n	8001d16 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 0304 	and.w	r3, r3, #4
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d005      	beq.n	8001cec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ce0:	4b59      	ldr	r3, [pc, #356]	; (8001e48 <HAL_RCC_ClockConfig+0x1bc>)
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	4a58      	ldr	r2, [pc, #352]	; (8001e48 <HAL_RCC_ClockConfig+0x1bc>)
 8001ce6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001cea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 0308 	and.w	r3, r3, #8
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d005      	beq.n	8001d04 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001cf8:	4b53      	ldr	r3, [pc, #332]	; (8001e48 <HAL_RCC_ClockConfig+0x1bc>)
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	4a52      	ldr	r2, [pc, #328]	; (8001e48 <HAL_RCC_ClockConfig+0x1bc>)
 8001cfe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001d02:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d04:	4b50      	ldr	r3, [pc, #320]	; (8001e48 <HAL_RCC_ClockConfig+0x1bc>)
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	494d      	ldr	r1, [pc, #308]	; (8001e48 <HAL_RCC_ClockConfig+0x1bc>)
 8001d12:	4313      	orrs	r3, r2
 8001d14:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0301 	and.w	r3, r3, #1
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d044      	beq.n	8001dac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d107      	bne.n	8001d3a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d2a:	4b47      	ldr	r3, [pc, #284]	; (8001e48 <HAL_RCC_ClockConfig+0x1bc>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d119      	bne.n	8001d6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e07f      	b.n	8001e3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	d003      	beq.n	8001d4a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d46:	2b03      	cmp	r3, #3
 8001d48:	d107      	bne.n	8001d5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d4a:	4b3f      	ldr	r3, [pc, #252]	; (8001e48 <HAL_RCC_ClockConfig+0x1bc>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d109      	bne.n	8001d6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e06f      	b.n	8001e3a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d5a:	4b3b      	ldr	r3, [pc, #236]	; (8001e48 <HAL_RCC_ClockConfig+0x1bc>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 0302 	and.w	r3, r3, #2
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d101      	bne.n	8001d6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e067      	b.n	8001e3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d6a:	4b37      	ldr	r3, [pc, #220]	; (8001e48 <HAL_RCC_ClockConfig+0x1bc>)
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	f023 0203 	bic.w	r2, r3, #3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	4934      	ldr	r1, [pc, #208]	; (8001e48 <HAL_RCC_ClockConfig+0x1bc>)
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d7c:	f7ff fc8a 	bl	8001694 <HAL_GetTick>
 8001d80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d82:	e00a      	b.n	8001d9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d84:	f7ff fc86 	bl	8001694 <HAL_GetTick>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d901      	bls.n	8001d9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d96:	2303      	movs	r3, #3
 8001d98:	e04f      	b.n	8001e3a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d9a:	4b2b      	ldr	r3, [pc, #172]	; (8001e48 <HAL_RCC_ClockConfig+0x1bc>)
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	f003 020c 	and.w	r2, r3, #12
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d1eb      	bne.n	8001d84 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001dac:	4b25      	ldr	r3, [pc, #148]	; (8001e44 <HAL_RCC_ClockConfig+0x1b8>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 030f 	and.w	r3, r3, #15
 8001db4:	683a      	ldr	r2, [r7, #0]
 8001db6:	429a      	cmp	r2, r3
 8001db8:	d20c      	bcs.n	8001dd4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dba:	4b22      	ldr	r3, [pc, #136]	; (8001e44 <HAL_RCC_ClockConfig+0x1b8>)
 8001dbc:	683a      	ldr	r2, [r7, #0]
 8001dbe:	b2d2      	uxtb	r2, r2
 8001dc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dc2:	4b20      	ldr	r3, [pc, #128]	; (8001e44 <HAL_RCC_ClockConfig+0x1b8>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 030f 	and.w	r3, r3, #15
 8001dca:	683a      	ldr	r2, [r7, #0]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d001      	beq.n	8001dd4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e032      	b.n	8001e3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 0304 	and.w	r3, r3, #4
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d008      	beq.n	8001df2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001de0:	4b19      	ldr	r3, [pc, #100]	; (8001e48 <HAL_RCC_ClockConfig+0x1bc>)
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	4916      	ldr	r1, [pc, #88]	; (8001e48 <HAL_RCC_ClockConfig+0x1bc>)
 8001dee:	4313      	orrs	r3, r2
 8001df0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 0308 	and.w	r3, r3, #8
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d009      	beq.n	8001e12 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001dfe:	4b12      	ldr	r3, [pc, #72]	; (8001e48 <HAL_RCC_ClockConfig+0x1bc>)
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	691b      	ldr	r3, [r3, #16]
 8001e0a:	00db      	lsls	r3, r3, #3
 8001e0c:	490e      	ldr	r1, [pc, #56]	; (8001e48 <HAL_RCC_ClockConfig+0x1bc>)
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e12:	f000 f855 	bl	8001ec0 <HAL_RCC_GetSysClockFreq>
 8001e16:	4602      	mov	r2, r0
 8001e18:	4b0b      	ldr	r3, [pc, #44]	; (8001e48 <HAL_RCC_ClockConfig+0x1bc>)
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	091b      	lsrs	r3, r3, #4
 8001e1e:	f003 030f 	and.w	r3, r3, #15
 8001e22:	490a      	ldr	r1, [pc, #40]	; (8001e4c <HAL_RCC_ClockConfig+0x1c0>)
 8001e24:	5ccb      	ldrb	r3, [r1, r3]
 8001e26:	fa22 f303 	lsr.w	r3, r2, r3
 8001e2a:	4a09      	ldr	r2, [pc, #36]	; (8001e50 <HAL_RCC_ClockConfig+0x1c4>)
 8001e2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001e2e:	4b09      	ldr	r3, [pc, #36]	; (8001e54 <HAL_RCC_ClockConfig+0x1c8>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4618      	mov	r0, r3
 8001e34:	f7ff fbea 	bl	800160c <HAL_InitTick>

  return HAL_OK;
 8001e38:	2300      	movs	r3, #0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3710      	adds	r7, #16
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	40023c00 	.word	0x40023c00
 8001e48:	40023800 	.word	0x40023800
 8001e4c:	08004298 	.word	0x08004298
 8001e50:	20000000 	.word	0x20000000
 8001e54:	20000004 	.word	0x20000004

08001e58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e5c:	4b03      	ldr	r3, [pc, #12]	; (8001e6c <HAL_RCC_GetHCLKFreq+0x14>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	20000000 	.word	0x20000000

08001e70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001e74:	f7ff fff0 	bl	8001e58 <HAL_RCC_GetHCLKFreq>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	4b05      	ldr	r3, [pc, #20]	; (8001e90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	0a9b      	lsrs	r3, r3, #10
 8001e80:	f003 0307 	and.w	r3, r3, #7
 8001e84:	4903      	ldr	r1, [pc, #12]	; (8001e94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e86:	5ccb      	ldrb	r3, [r1, r3]
 8001e88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	40023800 	.word	0x40023800
 8001e94:	080042a8 	.word	0x080042a8

08001e98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001e9c:	f7ff ffdc 	bl	8001e58 <HAL_RCC_GetHCLKFreq>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	4b05      	ldr	r3, [pc, #20]	; (8001eb8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	0b5b      	lsrs	r3, r3, #13
 8001ea8:	f003 0307 	and.w	r3, r3, #7
 8001eac:	4903      	ldr	r1, [pc, #12]	; (8001ebc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001eae:	5ccb      	ldrb	r3, [r1, r3]
 8001eb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	40023800 	.word	0x40023800
 8001ebc:	080042a8 	.word	0x080042a8

08001ec0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ec0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ec4:	b0ae      	sub	sp, #184	; 0xb8
 8001ec6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8001eda:	2300      	movs	r3, #0
 8001edc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ee6:	4bcb      	ldr	r3, [pc, #812]	; (8002214 <HAL_RCC_GetSysClockFreq+0x354>)
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	f003 030c 	and.w	r3, r3, #12
 8001eee:	2b0c      	cmp	r3, #12
 8001ef0:	f200 8206 	bhi.w	8002300 <HAL_RCC_GetSysClockFreq+0x440>
 8001ef4:	a201      	add	r2, pc, #4	; (adr r2, 8001efc <HAL_RCC_GetSysClockFreq+0x3c>)
 8001ef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001efa:	bf00      	nop
 8001efc:	08001f31 	.word	0x08001f31
 8001f00:	08002301 	.word	0x08002301
 8001f04:	08002301 	.word	0x08002301
 8001f08:	08002301 	.word	0x08002301
 8001f0c:	08001f39 	.word	0x08001f39
 8001f10:	08002301 	.word	0x08002301
 8001f14:	08002301 	.word	0x08002301
 8001f18:	08002301 	.word	0x08002301
 8001f1c:	08001f41 	.word	0x08001f41
 8001f20:	08002301 	.word	0x08002301
 8001f24:	08002301 	.word	0x08002301
 8001f28:	08002301 	.word	0x08002301
 8001f2c:	08002131 	.word	0x08002131
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f30:	4bb9      	ldr	r3, [pc, #740]	; (8002218 <HAL_RCC_GetSysClockFreq+0x358>)
 8001f32:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8001f36:	e1e7      	b.n	8002308 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f38:	4bb8      	ldr	r3, [pc, #736]	; (800221c <HAL_RCC_GetSysClockFreq+0x35c>)
 8001f3a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001f3e:	e1e3      	b.n	8002308 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f40:	4bb4      	ldr	r3, [pc, #720]	; (8002214 <HAL_RCC_GetSysClockFreq+0x354>)
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f48:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f4c:	4bb1      	ldr	r3, [pc, #708]	; (8002214 <HAL_RCC_GetSysClockFreq+0x354>)
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d071      	beq.n	800203c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f58:	4bae      	ldr	r3, [pc, #696]	; (8002214 <HAL_RCC_GetSysClockFreq+0x354>)
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	099b      	lsrs	r3, r3, #6
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001f64:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001f68:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001f6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f70:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001f74:	2300      	movs	r3, #0
 8001f76:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001f7a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001f7e:	4622      	mov	r2, r4
 8001f80:	462b      	mov	r3, r5
 8001f82:	f04f 0000 	mov.w	r0, #0
 8001f86:	f04f 0100 	mov.w	r1, #0
 8001f8a:	0159      	lsls	r1, r3, #5
 8001f8c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f90:	0150      	lsls	r0, r2, #5
 8001f92:	4602      	mov	r2, r0
 8001f94:	460b      	mov	r3, r1
 8001f96:	4621      	mov	r1, r4
 8001f98:	1a51      	subs	r1, r2, r1
 8001f9a:	6439      	str	r1, [r7, #64]	; 0x40
 8001f9c:	4629      	mov	r1, r5
 8001f9e:	eb63 0301 	sbc.w	r3, r3, r1
 8001fa2:	647b      	str	r3, [r7, #68]	; 0x44
 8001fa4:	f04f 0200 	mov.w	r2, #0
 8001fa8:	f04f 0300 	mov.w	r3, #0
 8001fac:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001fb0:	4649      	mov	r1, r9
 8001fb2:	018b      	lsls	r3, r1, #6
 8001fb4:	4641      	mov	r1, r8
 8001fb6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001fba:	4641      	mov	r1, r8
 8001fbc:	018a      	lsls	r2, r1, #6
 8001fbe:	4641      	mov	r1, r8
 8001fc0:	1a51      	subs	r1, r2, r1
 8001fc2:	63b9      	str	r1, [r7, #56]	; 0x38
 8001fc4:	4649      	mov	r1, r9
 8001fc6:	eb63 0301 	sbc.w	r3, r3, r1
 8001fca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001fcc:	f04f 0200 	mov.w	r2, #0
 8001fd0:	f04f 0300 	mov.w	r3, #0
 8001fd4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001fd8:	4649      	mov	r1, r9
 8001fda:	00cb      	lsls	r3, r1, #3
 8001fdc:	4641      	mov	r1, r8
 8001fde:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001fe2:	4641      	mov	r1, r8
 8001fe4:	00ca      	lsls	r2, r1, #3
 8001fe6:	4610      	mov	r0, r2
 8001fe8:	4619      	mov	r1, r3
 8001fea:	4603      	mov	r3, r0
 8001fec:	4622      	mov	r2, r4
 8001fee:	189b      	adds	r3, r3, r2
 8001ff0:	633b      	str	r3, [r7, #48]	; 0x30
 8001ff2:	462b      	mov	r3, r5
 8001ff4:	460a      	mov	r2, r1
 8001ff6:	eb42 0303 	adc.w	r3, r2, r3
 8001ffa:	637b      	str	r3, [r7, #52]	; 0x34
 8001ffc:	f04f 0200 	mov.w	r2, #0
 8002000:	f04f 0300 	mov.w	r3, #0
 8002004:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002008:	4629      	mov	r1, r5
 800200a:	024b      	lsls	r3, r1, #9
 800200c:	4621      	mov	r1, r4
 800200e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002012:	4621      	mov	r1, r4
 8002014:	024a      	lsls	r2, r1, #9
 8002016:	4610      	mov	r0, r2
 8002018:	4619      	mov	r1, r3
 800201a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800201e:	2200      	movs	r2, #0
 8002020:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002024:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002028:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800202c:	f7fe fd36 	bl	8000a9c <__aeabi_uldivmod>
 8002030:	4602      	mov	r2, r0
 8002032:	460b      	mov	r3, r1
 8002034:	4613      	mov	r3, r2
 8002036:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800203a:	e067      	b.n	800210c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800203c:	4b75      	ldr	r3, [pc, #468]	; (8002214 <HAL_RCC_GetSysClockFreq+0x354>)
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	099b      	lsrs	r3, r3, #6
 8002042:	2200      	movs	r2, #0
 8002044:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002048:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800204c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002050:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002054:	67bb      	str	r3, [r7, #120]	; 0x78
 8002056:	2300      	movs	r3, #0
 8002058:	67fb      	str	r3, [r7, #124]	; 0x7c
 800205a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800205e:	4622      	mov	r2, r4
 8002060:	462b      	mov	r3, r5
 8002062:	f04f 0000 	mov.w	r0, #0
 8002066:	f04f 0100 	mov.w	r1, #0
 800206a:	0159      	lsls	r1, r3, #5
 800206c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002070:	0150      	lsls	r0, r2, #5
 8002072:	4602      	mov	r2, r0
 8002074:	460b      	mov	r3, r1
 8002076:	4621      	mov	r1, r4
 8002078:	1a51      	subs	r1, r2, r1
 800207a:	62b9      	str	r1, [r7, #40]	; 0x28
 800207c:	4629      	mov	r1, r5
 800207e:	eb63 0301 	sbc.w	r3, r3, r1
 8002082:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002084:	f04f 0200 	mov.w	r2, #0
 8002088:	f04f 0300 	mov.w	r3, #0
 800208c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002090:	4649      	mov	r1, r9
 8002092:	018b      	lsls	r3, r1, #6
 8002094:	4641      	mov	r1, r8
 8002096:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800209a:	4641      	mov	r1, r8
 800209c:	018a      	lsls	r2, r1, #6
 800209e:	4641      	mov	r1, r8
 80020a0:	ebb2 0a01 	subs.w	sl, r2, r1
 80020a4:	4649      	mov	r1, r9
 80020a6:	eb63 0b01 	sbc.w	fp, r3, r1
 80020aa:	f04f 0200 	mov.w	r2, #0
 80020ae:	f04f 0300 	mov.w	r3, #0
 80020b2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80020b6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80020ba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80020be:	4692      	mov	sl, r2
 80020c0:	469b      	mov	fp, r3
 80020c2:	4623      	mov	r3, r4
 80020c4:	eb1a 0303 	adds.w	r3, sl, r3
 80020c8:	623b      	str	r3, [r7, #32]
 80020ca:	462b      	mov	r3, r5
 80020cc:	eb4b 0303 	adc.w	r3, fp, r3
 80020d0:	627b      	str	r3, [r7, #36]	; 0x24
 80020d2:	f04f 0200 	mov.w	r2, #0
 80020d6:	f04f 0300 	mov.w	r3, #0
 80020da:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80020de:	4629      	mov	r1, r5
 80020e0:	028b      	lsls	r3, r1, #10
 80020e2:	4621      	mov	r1, r4
 80020e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80020e8:	4621      	mov	r1, r4
 80020ea:	028a      	lsls	r2, r1, #10
 80020ec:	4610      	mov	r0, r2
 80020ee:	4619      	mov	r1, r3
 80020f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80020f4:	2200      	movs	r2, #0
 80020f6:	673b      	str	r3, [r7, #112]	; 0x70
 80020f8:	677a      	str	r2, [r7, #116]	; 0x74
 80020fa:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80020fe:	f7fe fccd 	bl	8000a9c <__aeabi_uldivmod>
 8002102:	4602      	mov	r2, r0
 8002104:	460b      	mov	r3, r1
 8002106:	4613      	mov	r3, r2
 8002108:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800210c:	4b41      	ldr	r3, [pc, #260]	; (8002214 <HAL_RCC_GetSysClockFreq+0x354>)
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	0c1b      	lsrs	r3, r3, #16
 8002112:	f003 0303 	and.w	r3, r3, #3
 8002116:	3301      	adds	r3, #1
 8002118:	005b      	lsls	r3, r3, #1
 800211a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800211e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002122:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002126:	fbb2 f3f3 	udiv	r3, r2, r3
 800212a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800212e:	e0eb      	b.n	8002308 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002130:	4b38      	ldr	r3, [pc, #224]	; (8002214 <HAL_RCC_GetSysClockFreq+0x354>)
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002138:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800213c:	4b35      	ldr	r3, [pc, #212]	; (8002214 <HAL_RCC_GetSysClockFreq+0x354>)
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002144:	2b00      	cmp	r3, #0
 8002146:	d06b      	beq.n	8002220 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002148:	4b32      	ldr	r3, [pc, #200]	; (8002214 <HAL_RCC_GetSysClockFreq+0x354>)
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	099b      	lsrs	r3, r3, #6
 800214e:	2200      	movs	r2, #0
 8002150:	66bb      	str	r3, [r7, #104]	; 0x68
 8002152:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002154:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002156:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800215a:	663b      	str	r3, [r7, #96]	; 0x60
 800215c:	2300      	movs	r3, #0
 800215e:	667b      	str	r3, [r7, #100]	; 0x64
 8002160:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002164:	4622      	mov	r2, r4
 8002166:	462b      	mov	r3, r5
 8002168:	f04f 0000 	mov.w	r0, #0
 800216c:	f04f 0100 	mov.w	r1, #0
 8002170:	0159      	lsls	r1, r3, #5
 8002172:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002176:	0150      	lsls	r0, r2, #5
 8002178:	4602      	mov	r2, r0
 800217a:	460b      	mov	r3, r1
 800217c:	4621      	mov	r1, r4
 800217e:	1a51      	subs	r1, r2, r1
 8002180:	61b9      	str	r1, [r7, #24]
 8002182:	4629      	mov	r1, r5
 8002184:	eb63 0301 	sbc.w	r3, r3, r1
 8002188:	61fb      	str	r3, [r7, #28]
 800218a:	f04f 0200 	mov.w	r2, #0
 800218e:	f04f 0300 	mov.w	r3, #0
 8002192:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002196:	4659      	mov	r1, fp
 8002198:	018b      	lsls	r3, r1, #6
 800219a:	4651      	mov	r1, sl
 800219c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80021a0:	4651      	mov	r1, sl
 80021a2:	018a      	lsls	r2, r1, #6
 80021a4:	4651      	mov	r1, sl
 80021a6:	ebb2 0801 	subs.w	r8, r2, r1
 80021aa:	4659      	mov	r1, fp
 80021ac:	eb63 0901 	sbc.w	r9, r3, r1
 80021b0:	f04f 0200 	mov.w	r2, #0
 80021b4:	f04f 0300 	mov.w	r3, #0
 80021b8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80021bc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80021c0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80021c4:	4690      	mov	r8, r2
 80021c6:	4699      	mov	r9, r3
 80021c8:	4623      	mov	r3, r4
 80021ca:	eb18 0303 	adds.w	r3, r8, r3
 80021ce:	613b      	str	r3, [r7, #16]
 80021d0:	462b      	mov	r3, r5
 80021d2:	eb49 0303 	adc.w	r3, r9, r3
 80021d6:	617b      	str	r3, [r7, #20]
 80021d8:	f04f 0200 	mov.w	r2, #0
 80021dc:	f04f 0300 	mov.w	r3, #0
 80021e0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80021e4:	4629      	mov	r1, r5
 80021e6:	024b      	lsls	r3, r1, #9
 80021e8:	4621      	mov	r1, r4
 80021ea:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80021ee:	4621      	mov	r1, r4
 80021f0:	024a      	lsls	r2, r1, #9
 80021f2:	4610      	mov	r0, r2
 80021f4:	4619      	mov	r1, r3
 80021f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80021fa:	2200      	movs	r2, #0
 80021fc:	65bb      	str	r3, [r7, #88]	; 0x58
 80021fe:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002200:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002204:	f7fe fc4a 	bl	8000a9c <__aeabi_uldivmod>
 8002208:	4602      	mov	r2, r0
 800220a:	460b      	mov	r3, r1
 800220c:	4613      	mov	r3, r2
 800220e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002212:	e065      	b.n	80022e0 <HAL_RCC_GetSysClockFreq+0x420>
 8002214:	40023800 	.word	0x40023800
 8002218:	00f42400 	.word	0x00f42400
 800221c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002220:	4b3d      	ldr	r3, [pc, #244]	; (8002318 <HAL_RCC_GetSysClockFreq+0x458>)
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	099b      	lsrs	r3, r3, #6
 8002226:	2200      	movs	r2, #0
 8002228:	4618      	mov	r0, r3
 800222a:	4611      	mov	r1, r2
 800222c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002230:	653b      	str	r3, [r7, #80]	; 0x50
 8002232:	2300      	movs	r3, #0
 8002234:	657b      	str	r3, [r7, #84]	; 0x54
 8002236:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800223a:	4642      	mov	r2, r8
 800223c:	464b      	mov	r3, r9
 800223e:	f04f 0000 	mov.w	r0, #0
 8002242:	f04f 0100 	mov.w	r1, #0
 8002246:	0159      	lsls	r1, r3, #5
 8002248:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800224c:	0150      	lsls	r0, r2, #5
 800224e:	4602      	mov	r2, r0
 8002250:	460b      	mov	r3, r1
 8002252:	4641      	mov	r1, r8
 8002254:	1a51      	subs	r1, r2, r1
 8002256:	60b9      	str	r1, [r7, #8]
 8002258:	4649      	mov	r1, r9
 800225a:	eb63 0301 	sbc.w	r3, r3, r1
 800225e:	60fb      	str	r3, [r7, #12]
 8002260:	f04f 0200 	mov.w	r2, #0
 8002264:	f04f 0300 	mov.w	r3, #0
 8002268:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800226c:	4659      	mov	r1, fp
 800226e:	018b      	lsls	r3, r1, #6
 8002270:	4651      	mov	r1, sl
 8002272:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002276:	4651      	mov	r1, sl
 8002278:	018a      	lsls	r2, r1, #6
 800227a:	4651      	mov	r1, sl
 800227c:	1a54      	subs	r4, r2, r1
 800227e:	4659      	mov	r1, fp
 8002280:	eb63 0501 	sbc.w	r5, r3, r1
 8002284:	f04f 0200 	mov.w	r2, #0
 8002288:	f04f 0300 	mov.w	r3, #0
 800228c:	00eb      	lsls	r3, r5, #3
 800228e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002292:	00e2      	lsls	r2, r4, #3
 8002294:	4614      	mov	r4, r2
 8002296:	461d      	mov	r5, r3
 8002298:	4643      	mov	r3, r8
 800229a:	18e3      	adds	r3, r4, r3
 800229c:	603b      	str	r3, [r7, #0]
 800229e:	464b      	mov	r3, r9
 80022a0:	eb45 0303 	adc.w	r3, r5, r3
 80022a4:	607b      	str	r3, [r7, #4]
 80022a6:	f04f 0200 	mov.w	r2, #0
 80022aa:	f04f 0300 	mov.w	r3, #0
 80022ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80022b2:	4629      	mov	r1, r5
 80022b4:	028b      	lsls	r3, r1, #10
 80022b6:	4621      	mov	r1, r4
 80022b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80022bc:	4621      	mov	r1, r4
 80022be:	028a      	lsls	r2, r1, #10
 80022c0:	4610      	mov	r0, r2
 80022c2:	4619      	mov	r1, r3
 80022c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80022c8:	2200      	movs	r2, #0
 80022ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80022cc:	64fa      	str	r2, [r7, #76]	; 0x4c
 80022ce:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80022d2:	f7fe fbe3 	bl	8000a9c <__aeabi_uldivmod>
 80022d6:	4602      	mov	r2, r0
 80022d8:	460b      	mov	r3, r1
 80022da:	4613      	mov	r3, r2
 80022dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80022e0:	4b0d      	ldr	r3, [pc, #52]	; (8002318 <HAL_RCC_GetSysClockFreq+0x458>)
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	0f1b      	lsrs	r3, r3, #28
 80022e6:	f003 0307 	and.w	r3, r3, #7
 80022ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80022ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80022f2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80022f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80022fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80022fe:	e003      	b.n	8002308 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002300:	4b06      	ldr	r3, [pc, #24]	; (800231c <HAL_RCC_GetSysClockFreq+0x45c>)
 8002302:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002306:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002308:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800230c:	4618      	mov	r0, r3
 800230e:	37b8      	adds	r7, #184	; 0xb8
 8002310:	46bd      	mov	sp, r7
 8002312:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002316:	bf00      	nop
 8002318:	40023800 	.word	0x40023800
 800231c:	00f42400 	.word	0x00f42400

08002320 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b086      	sub	sp, #24
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d101      	bne.n	8002332 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e28d      	b.n	800284e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0301 	and.w	r3, r3, #1
 800233a:	2b00      	cmp	r3, #0
 800233c:	f000 8083 	beq.w	8002446 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002340:	4b94      	ldr	r3, [pc, #592]	; (8002594 <HAL_RCC_OscConfig+0x274>)
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	f003 030c 	and.w	r3, r3, #12
 8002348:	2b04      	cmp	r3, #4
 800234a:	d019      	beq.n	8002380 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800234c:	4b91      	ldr	r3, [pc, #580]	; (8002594 <HAL_RCC_OscConfig+0x274>)
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002354:	2b08      	cmp	r3, #8
 8002356:	d106      	bne.n	8002366 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002358:	4b8e      	ldr	r3, [pc, #568]	; (8002594 <HAL_RCC_OscConfig+0x274>)
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002360:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002364:	d00c      	beq.n	8002380 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002366:	4b8b      	ldr	r3, [pc, #556]	; (8002594 <HAL_RCC_OscConfig+0x274>)
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800236e:	2b0c      	cmp	r3, #12
 8002370:	d112      	bne.n	8002398 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002372:	4b88      	ldr	r3, [pc, #544]	; (8002594 <HAL_RCC_OscConfig+0x274>)
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800237a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800237e:	d10b      	bne.n	8002398 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002380:	4b84      	ldr	r3, [pc, #528]	; (8002594 <HAL_RCC_OscConfig+0x274>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d05b      	beq.n	8002444 <HAL_RCC_OscConfig+0x124>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d157      	bne.n	8002444 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	e25a      	b.n	800284e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023a0:	d106      	bne.n	80023b0 <HAL_RCC_OscConfig+0x90>
 80023a2:	4b7c      	ldr	r3, [pc, #496]	; (8002594 <HAL_RCC_OscConfig+0x274>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a7b      	ldr	r2, [pc, #492]	; (8002594 <HAL_RCC_OscConfig+0x274>)
 80023a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023ac:	6013      	str	r3, [r2, #0]
 80023ae:	e01d      	b.n	80023ec <HAL_RCC_OscConfig+0xcc>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023b8:	d10c      	bne.n	80023d4 <HAL_RCC_OscConfig+0xb4>
 80023ba:	4b76      	ldr	r3, [pc, #472]	; (8002594 <HAL_RCC_OscConfig+0x274>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a75      	ldr	r2, [pc, #468]	; (8002594 <HAL_RCC_OscConfig+0x274>)
 80023c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023c4:	6013      	str	r3, [r2, #0]
 80023c6:	4b73      	ldr	r3, [pc, #460]	; (8002594 <HAL_RCC_OscConfig+0x274>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a72      	ldr	r2, [pc, #456]	; (8002594 <HAL_RCC_OscConfig+0x274>)
 80023cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023d0:	6013      	str	r3, [r2, #0]
 80023d2:	e00b      	b.n	80023ec <HAL_RCC_OscConfig+0xcc>
 80023d4:	4b6f      	ldr	r3, [pc, #444]	; (8002594 <HAL_RCC_OscConfig+0x274>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a6e      	ldr	r2, [pc, #440]	; (8002594 <HAL_RCC_OscConfig+0x274>)
 80023da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023de:	6013      	str	r3, [r2, #0]
 80023e0:	4b6c      	ldr	r3, [pc, #432]	; (8002594 <HAL_RCC_OscConfig+0x274>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a6b      	ldr	r2, [pc, #428]	; (8002594 <HAL_RCC_OscConfig+0x274>)
 80023e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d013      	beq.n	800241c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023f4:	f7ff f94e 	bl	8001694 <HAL_GetTick>
 80023f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023fa:	e008      	b.n	800240e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023fc:	f7ff f94a 	bl	8001694 <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	2b64      	cmp	r3, #100	; 0x64
 8002408:	d901      	bls.n	800240e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e21f      	b.n	800284e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800240e:	4b61      	ldr	r3, [pc, #388]	; (8002594 <HAL_RCC_OscConfig+0x274>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d0f0      	beq.n	80023fc <HAL_RCC_OscConfig+0xdc>
 800241a:	e014      	b.n	8002446 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800241c:	f7ff f93a 	bl	8001694 <HAL_GetTick>
 8002420:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002422:	e008      	b.n	8002436 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002424:	f7ff f936 	bl	8001694 <HAL_GetTick>
 8002428:	4602      	mov	r2, r0
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	2b64      	cmp	r3, #100	; 0x64
 8002430:	d901      	bls.n	8002436 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002432:	2303      	movs	r3, #3
 8002434:	e20b      	b.n	800284e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002436:	4b57      	ldr	r3, [pc, #348]	; (8002594 <HAL_RCC_OscConfig+0x274>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d1f0      	bne.n	8002424 <HAL_RCC_OscConfig+0x104>
 8002442:	e000      	b.n	8002446 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002444:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0302 	and.w	r3, r3, #2
 800244e:	2b00      	cmp	r3, #0
 8002450:	d06f      	beq.n	8002532 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002452:	4b50      	ldr	r3, [pc, #320]	; (8002594 <HAL_RCC_OscConfig+0x274>)
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	f003 030c 	and.w	r3, r3, #12
 800245a:	2b00      	cmp	r3, #0
 800245c:	d017      	beq.n	800248e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800245e:	4b4d      	ldr	r3, [pc, #308]	; (8002594 <HAL_RCC_OscConfig+0x274>)
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002466:	2b08      	cmp	r3, #8
 8002468:	d105      	bne.n	8002476 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800246a:	4b4a      	ldr	r3, [pc, #296]	; (8002594 <HAL_RCC_OscConfig+0x274>)
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d00b      	beq.n	800248e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002476:	4b47      	ldr	r3, [pc, #284]	; (8002594 <HAL_RCC_OscConfig+0x274>)
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800247e:	2b0c      	cmp	r3, #12
 8002480:	d11c      	bne.n	80024bc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002482:	4b44      	ldr	r3, [pc, #272]	; (8002594 <HAL_RCC_OscConfig+0x274>)
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d116      	bne.n	80024bc <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800248e:	4b41      	ldr	r3, [pc, #260]	; (8002594 <HAL_RCC_OscConfig+0x274>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0302 	and.w	r3, r3, #2
 8002496:	2b00      	cmp	r3, #0
 8002498:	d005      	beq.n	80024a6 <HAL_RCC_OscConfig+0x186>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d001      	beq.n	80024a6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e1d3      	b.n	800284e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024a6:	4b3b      	ldr	r3, [pc, #236]	; (8002594 <HAL_RCC_OscConfig+0x274>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	691b      	ldr	r3, [r3, #16]
 80024b2:	00db      	lsls	r3, r3, #3
 80024b4:	4937      	ldr	r1, [pc, #220]	; (8002594 <HAL_RCC_OscConfig+0x274>)
 80024b6:	4313      	orrs	r3, r2
 80024b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024ba:	e03a      	b.n	8002532 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d020      	beq.n	8002506 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024c4:	4b34      	ldr	r3, [pc, #208]	; (8002598 <HAL_RCC_OscConfig+0x278>)
 80024c6:	2201      	movs	r2, #1
 80024c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ca:	f7ff f8e3 	bl	8001694 <HAL_GetTick>
 80024ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024d0:	e008      	b.n	80024e4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024d2:	f7ff f8df 	bl	8001694 <HAL_GetTick>
 80024d6:	4602      	mov	r2, r0
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	2b02      	cmp	r3, #2
 80024de:	d901      	bls.n	80024e4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80024e0:	2303      	movs	r3, #3
 80024e2:	e1b4      	b.n	800284e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024e4:	4b2b      	ldr	r3, [pc, #172]	; (8002594 <HAL_RCC_OscConfig+0x274>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0302 	and.w	r3, r3, #2
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d0f0      	beq.n	80024d2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024f0:	4b28      	ldr	r3, [pc, #160]	; (8002594 <HAL_RCC_OscConfig+0x274>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	691b      	ldr	r3, [r3, #16]
 80024fc:	00db      	lsls	r3, r3, #3
 80024fe:	4925      	ldr	r1, [pc, #148]	; (8002594 <HAL_RCC_OscConfig+0x274>)
 8002500:	4313      	orrs	r3, r2
 8002502:	600b      	str	r3, [r1, #0]
 8002504:	e015      	b.n	8002532 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002506:	4b24      	ldr	r3, [pc, #144]	; (8002598 <HAL_RCC_OscConfig+0x278>)
 8002508:	2200      	movs	r2, #0
 800250a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800250c:	f7ff f8c2 	bl	8001694 <HAL_GetTick>
 8002510:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002512:	e008      	b.n	8002526 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002514:	f7ff f8be 	bl	8001694 <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	2b02      	cmp	r3, #2
 8002520:	d901      	bls.n	8002526 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002522:	2303      	movs	r3, #3
 8002524:	e193      	b.n	800284e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002526:	4b1b      	ldr	r3, [pc, #108]	; (8002594 <HAL_RCC_OscConfig+0x274>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0302 	and.w	r3, r3, #2
 800252e:	2b00      	cmp	r3, #0
 8002530:	d1f0      	bne.n	8002514 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0308 	and.w	r3, r3, #8
 800253a:	2b00      	cmp	r3, #0
 800253c:	d036      	beq.n	80025ac <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	695b      	ldr	r3, [r3, #20]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d016      	beq.n	8002574 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002546:	4b15      	ldr	r3, [pc, #84]	; (800259c <HAL_RCC_OscConfig+0x27c>)
 8002548:	2201      	movs	r2, #1
 800254a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800254c:	f7ff f8a2 	bl	8001694 <HAL_GetTick>
 8002550:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002552:	e008      	b.n	8002566 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002554:	f7ff f89e 	bl	8001694 <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	2b02      	cmp	r3, #2
 8002560:	d901      	bls.n	8002566 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	e173      	b.n	800284e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002566:	4b0b      	ldr	r3, [pc, #44]	; (8002594 <HAL_RCC_OscConfig+0x274>)
 8002568:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800256a:	f003 0302 	and.w	r3, r3, #2
 800256e:	2b00      	cmp	r3, #0
 8002570:	d0f0      	beq.n	8002554 <HAL_RCC_OscConfig+0x234>
 8002572:	e01b      	b.n	80025ac <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002574:	4b09      	ldr	r3, [pc, #36]	; (800259c <HAL_RCC_OscConfig+0x27c>)
 8002576:	2200      	movs	r2, #0
 8002578:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800257a:	f7ff f88b 	bl	8001694 <HAL_GetTick>
 800257e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002580:	e00e      	b.n	80025a0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002582:	f7ff f887 	bl	8001694 <HAL_GetTick>
 8002586:	4602      	mov	r2, r0
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	1ad3      	subs	r3, r2, r3
 800258c:	2b02      	cmp	r3, #2
 800258e:	d907      	bls.n	80025a0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002590:	2303      	movs	r3, #3
 8002592:	e15c      	b.n	800284e <HAL_RCC_OscConfig+0x52e>
 8002594:	40023800 	.word	0x40023800
 8002598:	42470000 	.word	0x42470000
 800259c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025a0:	4b8a      	ldr	r3, [pc, #552]	; (80027cc <HAL_RCC_OscConfig+0x4ac>)
 80025a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025a4:	f003 0302 	and.w	r3, r3, #2
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d1ea      	bne.n	8002582 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0304 	and.w	r3, r3, #4
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	f000 8097 	beq.w	80026e8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025ba:	2300      	movs	r3, #0
 80025bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025be:	4b83      	ldr	r3, [pc, #524]	; (80027cc <HAL_RCC_OscConfig+0x4ac>)
 80025c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d10f      	bne.n	80025ea <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025ca:	2300      	movs	r3, #0
 80025cc:	60bb      	str	r3, [r7, #8]
 80025ce:	4b7f      	ldr	r3, [pc, #508]	; (80027cc <HAL_RCC_OscConfig+0x4ac>)
 80025d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d2:	4a7e      	ldr	r2, [pc, #504]	; (80027cc <HAL_RCC_OscConfig+0x4ac>)
 80025d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025d8:	6413      	str	r3, [r2, #64]	; 0x40
 80025da:	4b7c      	ldr	r3, [pc, #496]	; (80027cc <HAL_RCC_OscConfig+0x4ac>)
 80025dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025e2:	60bb      	str	r3, [r7, #8]
 80025e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025e6:	2301      	movs	r3, #1
 80025e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025ea:	4b79      	ldr	r3, [pc, #484]	; (80027d0 <HAL_RCC_OscConfig+0x4b0>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d118      	bne.n	8002628 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025f6:	4b76      	ldr	r3, [pc, #472]	; (80027d0 <HAL_RCC_OscConfig+0x4b0>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a75      	ldr	r2, [pc, #468]	; (80027d0 <HAL_RCC_OscConfig+0x4b0>)
 80025fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002600:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002602:	f7ff f847 	bl	8001694 <HAL_GetTick>
 8002606:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002608:	e008      	b.n	800261c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800260a:	f7ff f843 	bl	8001694 <HAL_GetTick>
 800260e:	4602      	mov	r2, r0
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	2b02      	cmp	r3, #2
 8002616:	d901      	bls.n	800261c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002618:	2303      	movs	r3, #3
 800261a:	e118      	b.n	800284e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800261c:	4b6c      	ldr	r3, [pc, #432]	; (80027d0 <HAL_RCC_OscConfig+0x4b0>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002624:	2b00      	cmp	r3, #0
 8002626:	d0f0      	beq.n	800260a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	2b01      	cmp	r3, #1
 800262e:	d106      	bne.n	800263e <HAL_RCC_OscConfig+0x31e>
 8002630:	4b66      	ldr	r3, [pc, #408]	; (80027cc <HAL_RCC_OscConfig+0x4ac>)
 8002632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002634:	4a65      	ldr	r2, [pc, #404]	; (80027cc <HAL_RCC_OscConfig+0x4ac>)
 8002636:	f043 0301 	orr.w	r3, r3, #1
 800263a:	6713      	str	r3, [r2, #112]	; 0x70
 800263c:	e01c      	b.n	8002678 <HAL_RCC_OscConfig+0x358>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	2b05      	cmp	r3, #5
 8002644:	d10c      	bne.n	8002660 <HAL_RCC_OscConfig+0x340>
 8002646:	4b61      	ldr	r3, [pc, #388]	; (80027cc <HAL_RCC_OscConfig+0x4ac>)
 8002648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800264a:	4a60      	ldr	r2, [pc, #384]	; (80027cc <HAL_RCC_OscConfig+0x4ac>)
 800264c:	f043 0304 	orr.w	r3, r3, #4
 8002650:	6713      	str	r3, [r2, #112]	; 0x70
 8002652:	4b5e      	ldr	r3, [pc, #376]	; (80027cc <HAL_RCC_OscConfig+0x4ac>)
 8002654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002656:	4a5d      	ldr	r2, [pc, #372]	; (80027cc <HAL_RCC_OscConfig+0x4ac>)
 8002658:	f043 0301 	orr.w	r3, r3, #1
 800265c:	6713      	str	r3, [r2, #112]	; 0x70
 800265e:	e00b      	b.n	8002678 <HAL_RCC_OscConfig+0x358>
 8002660:	4b5a      	ldr	r3, [pc, #360]	; (80027cc <HAL_RCC_OscConfig+0x4ac>)
 8002662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002664:	4a59      	ldr	r2, [pc, #356]	; (80027cc <HAL_RCC_OscConfig+0x4ac>)
 8002666:	f023 0301 	bic.w	r3, r3, #1
 800266a:	6713      	str	r3, [r2, #112]	; 0x70
 800266c:	4b57      	ldr	r3, [pc, #348]	; (80027cc <HAL_RCC_OscConfig+0x4ac>)
 800266e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002670:	4a56      	ldr	r2, [pc, #344]	; (80027cc <HAL_RCC_OscConfig+0x4ac>)
 8002672:	f023 0304 	bic.w	r3, r3, #4
 8002676:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d015      	beq.n	80026ac <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002680:	f7ff f808 	bl	8001694 <HAL_GetTick>
 8002684:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002686:	e00a      	b.n	800269e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002688:	f7ff f804 	bl	8001694 <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	f241 3288 	movw	r2, #5000	; 0x1388
 8002696:	4293      	cmp	r3, r2
 8002698:	d901      	bls.n	800269e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e0d7      	b.n	800284e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800269e:	4b4b      	ldr	r3, [pc, #300]	; (80027cc <HAL_RCC_OscConfig+0x4ac>)
 80026a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026a2:	f003 0302 	and.w	r3, r3, #2
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d0ee      	beq.n	8002688 <HAL_RCC_OscConfig+0x368>
 80026aa:	e014      	b.n	80026d6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026ac:	f7fe fff2 	bl	8001694 <HAL_GetTick>
 80026b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026b2:	e00a      	b.n	80026ca <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026b4:	f7fe ffee 	bl	8001694 <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	f241 3288 	movw	r2, #5000	; 0x1388
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d901      	bls.n	80026ca <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	e0c1      	b.n	800284e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026ca:	4b40      	ldr	r3, [pc, #256]	; (80027cc <HAL_RCC_OscConfig+0x4ac>)
 80026cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ce:	f003 0302 	and.w	r3, r3, #2
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d1ee      	bne.n	80026b4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026d6:	7dfb      	ldrb	r3, [r7, #23]
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d105      	bne.n	80026e8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026dc:	4b3b      	ldr	r3, [pc, #236]	; (80027cc <HAL_RCC_OscConfig+0x4ac>)
 80026de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e0:	4a3a      	ldr	r2, [pc, #232]	; (80027cc <HAL_RCC_OscConfig+0x4ac>)
 80026e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026e6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	699b      	ldr	r3, [r3, #24]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	f000 80ad 	beq.w	800284c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026f2:	4b36      	ldr	r3, [pc, #216]	; (80027cc <HAL_RCC_OscConfig+0x4ac>)
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	f003 030c 	and.w	r3, r3, #12
 80026fa:	2b08      	cmp	r3, #8
 80026fc:	d060      	beq.n	80027c0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	699b      	ldr	r3, [r3, #24]
 8002702:	2b02      	cmp	r3, #2
 8002704:	d145      	bne.n	8002792 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002706:	4b33      	ldr	r3, [pc, #204]	; (80027d4 <HAL_RCC_OscConfig+0x4b4>)
 8002708:	2200      	movs	r2, #0
 800270a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800270c:	f7fe ffc2 	bl	8001694 <HAL_GetTick>
 8002710:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002712:	e008      	b.n	8002726 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002714:	f7fe ffbe 	bl	8001694 <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	2b02      	cmp	r3, #2
 8002720:	d901      	bls.n	8002726 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e093      	b.n	800284e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002726:	4b29      	ldr	r3, [pc, #164]	; (80027cc <HAL_RCC_OscConfig+0x4ac>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d1f0      	bne.n	8002714 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	69da      	ldr	r2, [r3, #28]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6a1b      	ldr	r3, [r3, #32]
 800273a:	431a      	orrs	r2, r3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002740:	019b      	lsls	r3, r3, #6
 8002742:	431a      	orrs	r2, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002748:	085b      	lsrs	r3, r3, #1
 800274a:	3b01      	subs	r3, #1
 800274c:	041b      	lsls	r3, r3, #16
 800274e:	431a      	orrs	r2, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002754:	061b      	lsls	r3, r3, #24
 8002756:	431a      	orrs	r2, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275c:	071b      	lsls	r3, r3, #28
 800275e:	491b      	ldr	r1, [pc, #108]	; (80027cc <HAL_RCC_OscConfig+0x4ac>)
 8002760:	4313      	orrs	r3, r2
 8002762:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002764:	4b1b      	ldr	r3, [pc, #108]	; (80027d4 <HAL_RCC_OscConfig+0x4b4>)
 8002766:	2201      	movs	r2, #1
 8002768:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800276a:	f7fe ff93 	bl	8001694 <HAL_GetTick>
 800276e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002770:	e008      	b.n	8002784 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002772:	f7fe ff8f 	bl	8001694 <HAL_GetTick>
 8002776:	4602      	mov	r2, r0
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	2b02      	cmp	r3, #2
 800277e:	d901      	bls.n	8002784 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002780:	2303      	movs	r3, #3
 8002782:	e064      	b.n	800284e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002784:	4b11      	ldr	r3, [pc, #68]	; (80027cc <HAL_RCC_OscConfig+0x4ac>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800278c:	2b00      	cmp	r3, #0
 800278e:	d0f0      	beq.n	8002772 <HAL_RCC_OscConfig+0x452>
 8002790:	e05c      	b.n	800284c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002792:	4b10      	ldr	r3, [pc, #64]	; (80027d4 <HAL_RCC_OscConfig+0x4b4>)
 8002794:	2200      	movs	r2, #0
 8002796:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002798:	f7fe ff7c 	bl	8001694 <HAL_GetTick>
 800279c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800279e:	e008      	b.n	80027b2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027a0:	f7fe ff78 	bl	8001694 <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d901      	bls.n	80027b2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e04d      	b.n	800284e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027b2:	4b06      	ldr	r3, [pc, #24]	; (80027cc <HAL_RCC_OscConfig+0x4ac>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d1f0      	bne.n	80027a0 <HAL_RCC_OscConfig+0x480>
 80027be:	e045      	b.n	800284c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	699b      	ldr	r3, [r3, #24]
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d107      	bne.n	80027d8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e040      	b.n	800284e <HAL_RCC_OscConfig+0x52e>
 80027cc:	40023800 	.word	0x40023800
 80027d0:	40007000 	.word	0x40007000
 80027d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80027d8:	4b1f      	ldr	r3, [pc, #124]	; (8002858 <HAL_RCC_OscConfig+0x538>)
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	699b      	ldr	r3, [r3, #24]
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d030      	beq.n	8002848 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d129      	bne.n	8002848 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027fe:	429a      	cmp	r2, r3
 8002800:	d122      	bne.n	8002848 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002802:	68fa      	ldr	r2, [r7, #12]
 8002804:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002808:	4013      	ands	r3, r2
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800280e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002810:	4293      	cmp	r3, r2
 8002812:	d119      	bne.n	8002848 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800281e:	085b      	lsrs	r3, r3, #1
 8002820:	3b01      	subs	r3, #1
 8002822:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002824:	429a      	cmp	r2, r3
 8002826:	d10f      	bne.n	8002848 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002832:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002834:	429a      	cmp	r2, r3
 8002836:	d107      	bne.n	8002848 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002842:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002844:	429a      	cmp	r2, r3
 8002846:	d001      	beq.n	800284c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e000      	b.n	800284e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800284c:	2300      	movs	r3, #0
}
 800284e:	4618      	mov	r0, r3
 8002850:	3718      	adds	r7, #24
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	40023800 	.word	0x40023800

0800285c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d101      	bne.n	800286e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e041      	b.n	80028f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002874:	b2db      	uxtb	r3, r3
 8002876:	2b00      	cmp	r3, #0
 8002878:	d106      	bne.n	8002888 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2200      	movs	r2, #0
 800287e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f7fe fd7c 	bl	8001380 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2202      	movs	r2, #2
 800288c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	3304      	adds	r3, #4
 8002898:	4619      	mov	r1, r3
 800289a:	4610      	mov	r0, r2
 800289c:	f000 fa96 	bl	8002dcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2201      	movs	r2, #1
 80028ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2201      	movs	r2, #1
 80028b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2201      	movs	r2, #1
 80028bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2201      	movs	r2, #1
 80028c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2201      	movs	r2, #1
 80028cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2201      	movs	r2, #1
 80028d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2201      	movs	r2, #1
 80028dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2201      	movs	r2, #1
 80028e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2201      	movs	r2, #1
 80028ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028f0:	2300      	movs	r3, #0
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3708      	adds	r7, #8
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
	...

080028fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b085      	sub	sp, #20
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800290a:	b2db      	uxtb	r3, r3
 800290c:	2b01      	cmp	r3, #1
 800290e:	d001      	beq.n	8002914 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e04e      	b.n	80029b2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2202      	movs	r2, #2
 8002918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	68da      	ldr	r2, [r3, #12]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f042 0201 	orr.w	r2, r2, #1
 800292a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a23      	ldr	r2, [pc, #140]	; (80029c0 <HAL_TIM_Base_Start_IT+0xc4>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d022      	beq.n	800297c <HAL_TIM_Base_Start_IT+0x80>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800293e:	d01d      	beq.n	800297c <HAL_TIM_Base_Start_IT+0x80>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a1f      	ldr	r2, [pc, #124]	; (80029c4 <HAL_TIM_Base_Start_IT+0xc8>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d018      	beq.n	800297c <HAL_TIM_Base_Start_IT+0x80>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a1e      	ldr	r2, [pc, #120]	; (80029c8 <HAL_TIM_Base_Start_IT+0xcc>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d013      	beq.n	800297c <HAL_TIM_Base_Start_IT+0x80>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a1c      	ldr	r2, [pc, #112]	; (80029cc <HAL_TIM_Base_Start_IT+0xd0>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d00e      	beq.n	800297c <HAL_TIM_Base_Start_IT+0x80>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a1b      	ldr	r2, [pc, #108]	; (80029d0 <HAL_TIM_Base_Start_IT+0xd4>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d009      	beq.n	800297c <HAL_TIM_Base_Start_IT+0x80>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a19      	ldr	r2, [pc, #100]	; (80029d4 <HAL_TIM_Base_Start_IT+0xd8>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d004      	beq.n	800297c <HAL_TIM_Base_Start_IT+0x80>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a18      	ldr	r2, [pc, #96]	; (80029d8 <HAL_TIM_Base_Start_IT+0xdc>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d111      	bne.n	80029a0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	f003 0307 	and.w	r3, r3, #7
 8002986:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2b06      	cmp	r3, #6
 800298c:	d010      	beq.n	80029b0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f042 0201 	orr.w	r2, r2, #1
 800299c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800299e:	e007      	b.n	80029b0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f042 0201 	orr.w	r2, r2, #1
 80029ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80029b0:	2300      	movs	r3, #0
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3714      	adds	r7, #20
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr
 80029be:	bf00      	nop
 80029c0:	40010000 	.word	0x40010000
 80029c4:	40000400 	.word	0x40000400
 80029c8:	40000800 	.word	0x40000800
 80029cc:	40000c00 	.word	0x40000c00
 80029d0:	40010400 	.word	0x40010400
 80029d4:	40014000 	.word	0x40014000
 80029d8:	40001800 	.word	0x40001800

080029dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	691b      	ldr	r3, [r3, #16]
 80029ea:	f003 0302 	and.w	r3, r3, #2
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d122      	bne.n	8002a38 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	f003 0302 	and.w	r3, r3, #2
 80029fc:	2b02      	cmp	r3, #2
 80029fe:	d11b      	bne.n	8002a38 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f06f 0202 	mvn.w	r2, #2
 8002a08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	699b      	ldr	r3, [r3, #24]
 8002a16:	f003 0303 	and.w	r3, r3, #3
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d003      	beq.n	8002a26 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f000 f9b5 	bl	8002d8e <HAL_TIM_IC_CaptureCallback>
 8002a24:	e005      	b.n	8002a32 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f000 f9a7 	bl	8002d7a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	f000 f9b8 	bl	8002da2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2200      	movs	r2, #0
 8002a36:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	691b      	ldr	r3, [r3, #16]
 8002a3e:	f003 0304 	and.w	r3, r3, #4
 8002a42:	2b04      	cmp	r3, #4
 8002a44:	d122      	bne.n	8002a8c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	f003 0304 	and.w	r3, r3, #4
 8002a50:	2b04      	cmp	r3, #4
 8002a52:	d11b      	bne.n	8002a8c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f06f 0204 	mvn.w	r2, #4
 8002a5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2202      	movs	r2, #2
 8002a62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	699b      	ldr	r3, [r3, #24]
 8002a6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d003      	beq.n	8002a7a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f000 f98b 	bl	8002d8e <HAL_TIM_IC_CaptureCallback>
 8002a78:	e005      	b.n	8002a86 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f000 f97d 	bl	8002d7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	f000 f98e 	bl	8002da2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	691b      	ldr	r3, [r3, #16]
 8002a92:	f003 0308 	and.w	r3, r3, #8
 8002a96:	2b08      	cmp	r3, #8
 8002a98:	d122      	bne.n	8002ae0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	f003 0308 	and.w	r3, r3, #8
 8002aa4:	2b08      	cmp	r3, #8
 8002aa6:	d11b      	bne.n	8002ae0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f06f 0208 	mvn.w	r2, #8
 8002ab0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2204      	movs	r2, #4
 8002ab6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	69db      	ldr	r3, [r3, #28]
 8002abe:	f003 0303 	and.w	r3, r3, #3
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d003      	beq.n	8002ace <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f000 f961 	bl	8002d8e <HAL_TIM_IC_CaptureCallback>
 8002acc:	e005      	b.n	8002ada <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f000 f953 	bl	8002d7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	f000 f964 	bl	8002da2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2200      	movs	r2, #0
 8002ade:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	691b      	ldr	r3, [r3, #16]
 8002ae6:	f003 0310 	and.w	r3, r3, #16
 8002aea:	2b10      	cmp	r3, #16
 8002aec:	d122      	bne.n	8002b34 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	f003 0310 	and.w	r3, r3, #16
 8002af8:	2b10      	cmp	r3, #16
 8002afa:	d11b      	bne.n	8002b34 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f06f 0210 	mvn.w	r2, #16
 8002b04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2208      	movs	r2, #8
 8002b0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	69db      	ldr	r3, [r3, #28]
 8002b12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d003      	beq.n	8002b22 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f000 f937 	bl	8002d8e <HAL_TIM_IC_CaptureCallback>
 8002b20:	e005      	b.n	8002b2e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f000 f929 	bl	8002d7a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	f000 f93a 	bl	8002da2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2200      	movs	r2, #0
 8002b32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	691b      	ldr	r3, [r3, #16]
 8002b3a:	f003 0301 	and.w	r3, r3, #1
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d10e      	bne.n	8002b60 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	f003 0301 	and.w	r3, r3, #1
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d107      	bne.n	8002b60 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f06f 0201 	mvn.w	r2, #1
 8002b58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f7fe f9c8 	bl	8000ef0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	691b      	ldr	r3, [r3, #16]
 8002b66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b6a:	2b80      	cmp	r3, #128	; 0x80
 8002b6c:	d10e      	bne.n	8002b8c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b78:	2b80      	cmp	r3, #128	; 0x80
 8002b7a:	d107      	bne.n	8002b8c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002b84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f000 fae0 	bl	800314c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	691b      	ldr	r3, [r3, #16]
 8002b92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b96:	2b40      	cmp	r3, #64	; 0x40
 8002b98:	d10e      	bne.n	8002bb8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ba4:	2b40      	cmp	r3, #64	; 0x40
 8002ba6:	d107      	bne.n	8002bb8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002bb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f000 f8ff 	bl	8002db6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	691b      	ldr	r3, [r3, #16]
 8002bbe:	f003 0320 	and.w	r3, r3, #32
 8002bc2:	2b20      	cmp	r3, #32
 8002bc4:	d10e      	bne.n	8002be4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	f003 0320 	and.w	r3, r3, #32
 8002bd0:	2b20      	cmp	r3, #32
 8002bd2:	d107      	bne.n	8002be4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f06f 0220 	mvn.w	r2, #32
 8002bdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f000 faaa 	bl	8003138 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002be4:	bf00      	nop
 8002be6:	3708      	adds	r7, #8
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}

08002bec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b084      	sub	sp, #16
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d101      	bne.n	8002c08 <HAL_TIM_ConfigClockSource+0x1c>
 8002c04:	2302      	movs	r3, #2
 8002c06:	e0b4      	b.n	8002d72 <HAL_TIM_ConfigClockSource+0x186>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2202      	movs	r2, #2
 8002c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002c26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c2e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	68ba      	ldr	r2, [r7, #8]
 8002c36:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c40:	d03e      	beq.n	8002cc0 <HAL_TIM_ConfigClockSource+0xd4>
 8002c42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c46:	f200 8087 	bhi.w	8002d58 <HAL_TIM_ConfigClockSource+0x16c>
 8002c4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c4e:	f000 8086 	beq.w	8002d5e <HAL_TIM_ConfigClockSource+0x172>
 8002c52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c56:	d87f      	bhi.n	8002d58 <HAL_TIM_ConfigClockSource+0x16c>
 8002c58:	2b70      	cmp	r3, #112	; 0x70
 8002c5a:	d01a      	beq.n	8002c92 <HAL_TIM_ConfigClockSource+0xa6>
 8002c5c:	2b70      	cmp	r3, #112	; 0x70
 8002c5e:	d87b      	bhi.n	8002d58 <HAL_TIM_ConfigClockSource+0x16c>
 8002c60:	2b60      	cmp	r3, #96	; 0x60
 8002c62:	d050      	beq.n	8002d06 <HAL_TIM_ConfigClockSource+0x11a>
 8002c64:	2b60      	cmp	r3, #96	; 0x60
 8002c66:	d877      	bhi.n	8002d58 <HAL_TIM_ConfigClockSource+0x16c>
 8002c68:	2b50      	cmp	r3, #80	; 0x50
 8002c6a:	d03c      	beq.n	8002ce6 <HAL_TIM_ConfigClockSource+0xfa>
 8002c6c:	2b50      	cmp	r3, #80	; 0x50
 8002c6e:	d873      	bhi.n	8002d58 <HAL_TIM_ConfigClockSource+0x16c>
 8002c70:	2b40      	cmp	r3, #64	; 0x40
 8002c72:	d058      	beq.n	8002d26 <HAL_TIM_ConfigClockSource+0x13a>
 8002c74:	2b40      	cmp	r3, #64	; 0x40
 8002c76:	d86f      	bhi.n	8002d58 <HAL_TIM_ConfigClockSource+0x16c>
 8002c78:	2b30      	cmp	r3, #48	; 0x30
 8002c7a:	d064      	beq.n	8002d46 <HAL_TIM_ConfigClockSource+0x15a>
 8002c7c:	2b30      	cmp	r3, #48	; 0x30
 8002c7e:	d86b      	bhi.n	8002d58 <HAL_TIM_ConfigClockSource+0x16c>
 8002c80:	2b20      	cmp	r3, #32
 8002c82:	d060      	beq.n	8002d46 <HAL_TIM_ConfigClockSource+0x15a>
 8002c84:	2b20      	cmp	r3, #32
 8002c86:	d867      	bhi.n	8002d58 <HAL_TIM_ConfigClockSource+0x16c>
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d05c      	beq.n	8002d46 <HAL_TIM_ConfigClockSource+0x15a>
 8002c8c:	2b10      	cmp	r3, #16
 8002c8e:	d05a      	beq.n	8002d46 <HAL_TIM_ConfigClockSource+0x15a>
 8002c90:	e062      	b.n	8002d58 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6818      	ldr	r0, [r3, #0]
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	6899      	ldr	r1, [r3, #8]
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	685a      	ldr	r2, [r3, #4]
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	68db      	ldr	r3, [r3, #12]
 8002ca2:	f000 f9ad 	bl	8003000 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002cb4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	68ba      	ldr	r2, [r7, #8]
 8002cbc:	609a      	str	r2, [r3, #8]
      break;
 8002cbe:	e04f      	b.n	8002d60 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6818      	ldr	r0, [r3, #0]
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	6899      	ldr	r1, [r3, #8]
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	685a      	ldr	r2, [r3, #4]
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	f000 f996 	bl	8003000 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	689a      	ldr	r2, [r3, #8]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ce2:	609a      	str	r2, [r3, #8]
      break;
 8002ce4:	e03c      	b.n	8002d60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6818      	ldr	r0, [r3, #0]
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	6859      	ldr	r1, [r3, #4]
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	68db      	ldr	r3, [r3, #12]
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	f000 f90a 	bl	8002f0c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	2150      	movs	r1, #80	; 0x50
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f000 f963 	bl	8002fca <TIM_ITRx_SetConfig>
      break;
 8002d04:	e02c      	b.n	8002d60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6818      	ldr	r0, [r3, #0]
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	6859      	ldr	r1, [r3, #4]
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	461a      	mov	r2, r3
 8002d14:	f000 f929 	bl	8002f6a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	2160      	movs	r1, #96	; 0x60
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f000 f953 	bl	8002fca <TIM_ITRx_SetConfig>
      break;
 8002d24:	e01c      	b.n	8002d60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6818      	ldr	r0, [r3, #0]
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	6859      	ldr	r1, [r3, #4]
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	68db      	ldr	r3, [r3, #12]
 8002d32:	461a      	mov	r2, r3
 8002d34:	f000 f8ea 	bl	8002f0c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	2140      	movs	r1, #64	; 0x40
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f000 f943 	bl	8002fca <TIM_ITRx_SetConfig>
      break;
 8002d44:	e00c      	b.n	8002d60 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4619      	mov	r1, r3
 8002d50:	4610      	mov	r0, r2
 8002d52:	f000 f93a 	bl	8002fca <TIM_ITRx_SetConfig>
      break;
 8002d56:	e003      	b.n	8002d60 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	73fb      	strb	r3, [r7, #15]
      break;
 8002d5c:	e000      	b.n	8002d60 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002d5e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2201      	movs	r2, #1
 8002d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002d70:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3710      	adds	r7, #16
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}

08002d7a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d7a:	b480      	push	{r7}
 8002d7c:	b083      	sub	sp, #12
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d82:	bf00      	nop
 8002d84:	370c      	adds	r7, #12
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr

08002d8e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d8e:	b480      	push	{r7}
 8002d90:	b083      	sub	sp, #12
 8002d92:	af00      	add	r7, sp, #0
 8002d94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d96:	bf00      	nop
 8002d98:	370c      	adds	r7, #12
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr

08002da2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002da2:	b480      	push	{r7}
 8002da4:	b083      	sub	sp, #12
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002daa:	bf00      	nop
 8002dac:	370c      	adds	r7, #12
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr

08002db6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002db6:	b480      	push	{r7}
 8002db8:	b083      	sub	sp, #12
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002dbe:	bf00      	nop
 8002dc0:	370c      	adds	r7, #12
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr
	...

08002dcc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b085      	sub	sp, #20
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	4a40      	ldr	r2, [pc, #256]	; (8002ee0 <TIM_Base_SetConfig+0x114>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d013      	beq.n	8002e0c <TIM_Base_SetConfig+0x40>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dea:	d00f      	beq.n	8002e0c <TIM_Base_SetConfig+0x40>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	4a3d      	ldr	r2, [pc, #244]	; (8002ee4 <TIM_Base_SetConfig+0x118>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d00b      	beq.n	8002e0c <TIM_Base_SetConfig+0x40>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	4a3c      	ldr	r2, [pc, #240]	; (8002ee8 <TIM_Base_SetConfig+0x11c>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d007      	beq.n	8002e0c <TIM_Base_SetConfig+0x40>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	4a3b      	ldr	r2, [pc, #236]	; (8002eec <TIM_Base_SetConfig+0x120>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d003      	beq.n	8002e0c <TIM_Base_SetConfig+0x40>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	4a3a      	ldr	r2, [pc, #232]	; (8002ef0 <TIM_Base_SetConfig+0x124>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d108      	bne.n	8002e1e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	68fa      	ldr	r2, [r7, #12]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	4a2f      	ldr	r2, [pc, #188]	; (8002ee0 <TIM_Base_SetConfig+0x114>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d02b      	beq.n	8002e7e <TIM_Base_SetConfig+0xb2>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e2c:	d027      	beq.n	8002e7e <TIM_Base_SetConfig+0xb2>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4a2c      	ldr	r2, [pc, #176]	; (8002ee4 <TIM_Base_SetConfig+0x118>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d023      	beq.n	8002e7e <TIM_Base_SetConfig+0xb2>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	4a2b      	ldr	r2, [pc, #172]	; (8002ee8 <TIM_Base_SetConfig+0x11c>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d01f      	beq.n	8002e7e <TIM_Base_SetConfig+0xb2>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4a2a      	ldr	r2, [pc, #168]	; (8002eec <TIM_Base_SetConfig+0x120>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d01b      	beq.n	8002e7e <TIM_Base_SetConfig+0xb2>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4a29      	ldr	r2, [pc, #164]	; (8002ef0 <TIM_Base_SetConfig+0x124>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d017      	beq.n	8002e7e <TIM_Base_SetConfig+0xb2>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4a28      	ldr	r2, [pc, #160]	; (8002ef4 <TIM_Base_SetConfig+0x128>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d013      	beq.n	8002e7e <TIM_Base_SetConfig+0xb2>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4a27      	ldr	r2, [pc, #156]	; (8002ef8 <TIM_Base_SetConfig+0x12c>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d00f      	beq.n	8002e7e <TIM_Base_SetConfig+0xb2>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4a26      	ldr	r2, [pc, #152]	; (8002efc <TIM_Base_SetConfig+0x130>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d00b      	beq.n	8002e7e <TIM_Base_SetConfig+0xb2>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4a25      	ldr	r2, [pc, #148]	; (8002f00 <TIM_Base_SetConfig+0x134>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d007      	beq.n	8002e7e <TIM_Base_SetConfig+0xb2>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4a24      	ldr	r2, [pc, #144]	; (8002f04 <TIM_Base_SetConfig+0x138>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d003      	beq.n	8002e7e <TIM_Base_SetConfig+0xb2>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	4a23      	ldr	r2, [pc, #140]	; (8002f08 <TIM_Base_SetConfig+0x13c>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d108      	bne.n	8002e90 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	68db      	ldr	r3, [r3, #12]
 8002e8a:	68fa      	ldr	r2, [r7, #12]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	695b      	ldr	r3, [r3, #20]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	68fa      	ldr	r2, [r7, #12]
 8002ea2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	689a      	ldr	r2, [r3, #8]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	4a0a      	ldr	r2, [pc, #40]	; (8002ee0 <TIM_Base_SetConfig+0x114>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d003      	beq.n	8002ec4 <TIM_Base_SetConfig+0xf8>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	4a0c      	ldr	r2, [pc, #48]	; (8002ef0 <TIM_Base_SetConfig+0x124>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d103      	bne.n	8002ecc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	691a      	ldr	r2, [r3, #16]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	615a      	str	r2, [r3, #20]
}
 8002ed2:	bf00      	nop
 8002ed4:	3714      	adds	r7, #20
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr
 8002ede:	bf00      	nop
 8002ee0:	40010000 	.word	0x40010000
 8002ee4:	40000400 	.word	0x40000400
 8002ee8:	40000800 	.word	0x40000800
 8002eec:	40000c00 	.word	0x40000c00
 8002ef0:	40010400 	.word	0x40010400
 8002ef4:	40014000 	.word	0x40014000
 8002ef8:	40014400 	.word	0x40014400
 8002efc:	40014800 	.word	0x40014800
 8002f00:	40001800 	.word	0x40001800
 8002f04:	40001c00 	.word	0x40001c00
 8002f08:	40002000 	.word	0x40002000

08002f0c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b087      	sub	sp, #28
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	60f8      	str	r0, [r7, #12]
 8002f14:	60b9      	str	r1, [r7, #8]
 8002f16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6a1b      	ldr	r3, [r3, #32]
 8002f1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	6a1b      	ldr	r3, [r3, #32]
 8002f22:	f023 0201 	bic.w	r2, r3, #1
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	699b      	ldr	r3, [r3, #24]
 8002f2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	011b      	lsls	r3, r3, #4
 8002f3c:	693a      	ldr	r2, [r7, #16]
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	f023 030a 	bic.w	r3, r3, #10
 8002f48:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002f4a:	697a      	ldr	r2, [r7, #20]
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	693a      	ldr	r2, [r7, #16]
 8002f56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	697a      	ldr	r2, [r7, #20]
 8002f5c:	621a      	str	r2, [r3, #32]
}
 8002f5e:	bf00      	nop
 8002f60:	371c      	adds	r7, #28
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr

08002f6a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f6a:	b480      	push	{r7}
 8002f6c:	b087      	sub	sp, #28
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	60f8      	str	r0, [r7, #12]
 8002f72:	60b9      	str	r1, [r7, #8]
 8002f74:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	6a1b      	ldr	r3, [r3, #32]
 8002f7a:	f023 0210 	bic.w	r2, r3, #16
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	699b      	ldr	r3, [r3, #24]
 8002f86:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	6a1b      	ldr	r3, [r3, #32]
 8002f8c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002f94:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	031b      	lsls	r3, r3, #12
 8002f9a:	697a      	ldr	r2, [r7, #20]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002fa6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	011b      	lsls	r3, r3, #4
 8002fac:	693a      	ldr	r2, [r7, #16]
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	697a      	ldr	r2, [r7, #20]
 8002fb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	693a      	ldr	r2, [r7, #16]
 8002fbc:	621a      	str	r2, [r3, #32]
}
 8002fbe:	bf00      	nop
 8002fc0:	371c      	adds	r7, #28
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr

08002fca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002fca:	b480      	push	{r7}
 8002fcc:	b085      	sub	sp, #20
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	6078      	str	r0, [r7, #4]
 8002fd2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fe0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002fe2:	683a      	ldr	r2, [r7, #0]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	f043 0307 	orr.w	r3, r3, #7
 8002fec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	68fa      	ldr	r2, [r7, #12]
 8002ff2:	609a      	str	r2, [r3, #8]
}
 8002ff4:	bf00      	nop
 8002ff6:	3714      	adds	r7, #20
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr

08003000 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003000:	b480      	push	{r7}
 8003002:	b087      	sub	sp, #28
 8003004:	af00      	add	r7, sp, #0
 8003006:	60f8      	str	r0, [r7, #12]
 8003008:	60b9      	str	r1, [r7, #8]
 800300a:	607a      	str	r2, [r7, #4]
 800300c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800301a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	021a      	lsls	r2, r3, #8
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	431a      	orrs	r2, r3
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	4313      	orrs	r3, r2
 8003028:	697a      	ldr	r2, [r7, #20]
 800302a:	4313      	orrs	r3, r2
 800302c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	697a      	ldr	r2, [r7, #20]
 8003032:	609a      	str	r2, [r3, #8]
}
 8003034:	bf00      	nop
 8003036:	371c      	adds	r7, #28
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr

08003040 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003040:	b480      	push	{r7}
 8003042:	b085      	sub	sp, #20
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003050:	2b01      	cmp	r3, #1
 8003052:	d101      	bne.n	8003058 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003054:	2302      	movs	r3, #2
 8003056:	e05a      	b.n	800310e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2201      	movs	r2, #1
 800305c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2202      	movs	r2, #2
 8003064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800307e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	68fa      	ldr	r2, [r7, #12]
 8003086:	4313      	orrs	r3, r2
 8003088:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	68fa      	ldr	r2, [r7, #12]
 8003090:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a21      	ldr	r2, [pc, #132]	; (800311c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d022      	beq.n	80030e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030a4:	d01d      	beq.n	80030e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a1d      	ldr	r2, [pc, #116]	; (8003120 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d018      	beq.n	80030e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a1b      	ldr	r2, [pc, #108]	; (8003124 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d013      	beq.n	80030e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a1a      	ldr	r2, [pc, #104]	; (8003128 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d00e      	beq.n	80030e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a18      	ldr	r2, [pc, #96]	; (800312c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d009      	beq.n	80030e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a17      	ldr	r2, [pc, #92]	; (8003130 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d004      	beq.n	80030e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a15      	ldr	r2, [pc, #84]	; (8003134 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d10c      	bne.n	80030fc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80030e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	68ba      	ldr	r2, [r7, #8]
 80030f0:	4313      	orrs	r3, r2
 80030f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	68ba      	ldr	r2, [r7, #8]
 80030fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2201      	movs	r2, #1
 8003100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2200      	movs	r2, #0
 8003108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800310c:	2300      	movs	r3, #0
}
 800310e:	4618      	mov	r0, r3
 8003110:	3714      	adds	r7, #20
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr
 800311a:	bf00      	nop
 800311c:	40010000 	.word	0x40010000
 8003120:	40000400 	.word	0x40000400
 8003124:	40000800 	.word	0x40000800
 8003128:	40000c00 	.word	0x40000c00
 800312c:	40010400 	.word	0x40010400
 8003130:	40014000 	.word	0x40014000
 8003134:	40001800 	.word	0x40001800

08003138 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003140:	bf00      	nop
 8003142:	370c      	adds	r7, #12
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr

0800314c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003154:	bf00      	nop
 8003156:	370c      	adds	r7, #12
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr

08003160 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b082      	sub	sp, #8
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d101      	bne.n	8003172 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e03f      	b.n	80031f2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003178:	b2db      	uxtb	r3, r3
 800317a:	2b00      	cmp	r3, #0
 800317c:	d106      	bne.n	800318c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2200      	movs	r2, #0
 8003182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f7fe f920 	bl	80013cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2224      	movs	r2, #36	; 0x24
 8003190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	68da      	ldr	r2, [r3, #12]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80031a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f000 f929 	bl	80033fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	691a      	ldr	r2, [r3, #16]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80031b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	695a      	ldr	r2, [r3, #20]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80031c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	68da      	ldr	r2, [r3, #12]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80031d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2200      	movs	r2, #0
 80031de:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2220      	movs	r2, #32
 80031e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2220      	movs	r2, #32
 80031ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80031f0:	2300      	movs	r3, #0
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3708      	adds	r7, #8
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}

080031fa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031fa:	b580      	push	{r7, lr}
 80031fc:	b08a      	sub	sp, #40	; 0x28
 80031fe:	af02      	add	r7, sp, #8
 8003200:	60f8      	str	r0, [r7, #12]
 8003202:	60b9      	str	r1, [r7, #8]
 8003204:	603b      	str	r3, [r7, #0]
 8003206:	4613      	mov	r3, r2
 8003208:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800320a:	2300      	movs	r3, #0
 800320c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003214:	b2db      	uxtb	r3, r3
 8003216:	2b20      	cmp	r3, #32
 8003218:	d17c      	bne.n	8003314 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d002      	beq.n	8003226 <HAL_UART_Transmit+0x2c>
 8003220:	88fb      	ldrh	r3, [r7, #6]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d101      	bne.n	800322a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e075      	b.n	8003316 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003230:	2b01      	cmp	r3, #1
 8003232:	d101      	bne.n	8003238 <HAL_UART_Transmit+0x3e>
 8003234:	2302      	movs	r3, #2
 8003236:	e06e      	b.n	8003316 <HAL_UART_Transmit+0x11c>
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2201      	movs	r2, #1
 800323c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2200      	movs	r2, #0
 8003244:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2221      	movs	r2, #33	; 0x21
 800324a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800324e:	f7fe fa21 	bl	8001694 <HAL_GetTick>
 8003252:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	88fa      	ldrh	r2, [r7, #6]
 8003258:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	88fa      	ldrh	r2, [r7, #6]
 800325e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003268:	d108      	bne.n	800327c <HAL_UART_Transmit+0x82>
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	691b      	ldr	r3, [r3, #16]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d104      	bne.n	800327c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003272:	2300      	movs	r3, #0
 8003274:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	61bb      	str	r3, [r7, #24]
 800327a:	e003      	b.n	8003284 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003280:	2300      	movs	r3, #0
 8003282:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2200      	movs	r2, #0
 8003288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800328c:	e02a      	b.n	80032e4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	9300      	str	r3, [sp, #0]
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	2200      	movs	r2, #0
 8003296:	2180      	movs	r1, #128	; 0x80
 8003298:	68f8      	ldr	r0, [r7, #12]
 800329a:	f000 f840 	bl	800331e <UART_WaitOnFlagUntilTimeout>
 800329e:	4603      	mov	r3, r0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d001      	beq.n	80032a8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80032a4:	2303      	movs	r3, #3
 80032a6:	e036      	b.n	8003316 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80032a8:	69fb      	ldr	r3, [r7, #28]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d10b      	bne.n	80032c6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80032ae:	69bb      	ldr	r3, [r7, #24]
 80032b0:	881b      	ldrh	r3, [r3, #0]
 80032b2:	461a      	mov	r2, r3
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032bc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80032be:	69bb      	ldr	r3, [r7, #24]
 80032c0:	3302      	adds	r3, #2
 80032c2:	61bb      	str	r3, [r7, #24]
 80032c4:	e007      	b.n	80032d6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	781a      	ldrb	r2, [r3, #0]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	3301      	adds	r3, #1
 80032d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80032da:	b29b      	uxth	r3, r3
 80032dc:	3b01      	subs	r3, #1
 80032de:	b29a      	uxth	r2, r3
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80032e8:	b29b      	uxth	r3, r3
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d1cf      	bne.n	800328e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	9300      	str	r3, [sp, #0]
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	2200      	movs	r2, #0
 80032f6:	2140      	movs	r1, #64	; 0x40
 80032f8:	68f8      	ldr	r0, [r7, #12]
 80032fa:	f000 f810 	bl	800331e <UART_WaitOnFlagUntilTimeout>
 80032fe:	4603      	mov	r3, r0
 8003300:	2b00      	cmp	r3, #0
 8003302:	d001      	beq.n	8003308 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003304:	2303      	movs	r3, #3
 8003306:	e006      	b.n	8003316 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2220      	movs	r2, #32
 800330c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003310:	2300      	movs	r3, #0
 8003312:	e000      	b.n	8003316 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003314:	2302      	movs	r3, #2
  }
}
 8003316:	4618      	mov	r0, r3
 8003318:	3720      	adds	r7, #32
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}

0800331e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800331e:	b580      	push	{r7, lr}
 8003320:	b090      	sub	sp, #64	; 0x40
 8003322:	af00      	add	r7, sp, #0
 8003324:	60f8      	str	r0, [r7, #12]
 8003326:	60b9      	str	r1, [r7, #8]
 8003328:	603b      	str	r3, [r7, #0]
 800332a:	4613      	mov	r3, r2
 800332c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800332e:	e050      	b.n	80033d2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003330:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003332:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003336:	d04c      	beq.n	80033d2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003338:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800333a:	2b00      	cmp	r3, #0
 800333c:	d007      	beq.n	800334e <UART_WaitOnFlagUntilTimeout+0x30>
 800333e:	f7fe f9a9 	bl	8001694 <HAL_GetTick>
 8003342:	4602      	mov	r2, r0
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800334a:	429a      	cmp	r2, r3
 800334c:	d241      	bcs.n	80033d2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	330c      	adds	r3, #12
 8003354:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003358:	e853 3f00 	ldrex	r3, [r3]
 800335c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800335e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003360:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003364:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	330c      	adds	r3, #12
 800336c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800336e:	637a      	str	r2, [r7, #52]	; 0x34
 8003370:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003372:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003374:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003376:	e841 2300 	strex	r3, r2, [r1]
 800337a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800337c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800337e:	2b00      	cmp	r3, #0
 8003380:	d1e5      	bne.n	800334e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	3314      	adds	r3, #20
 8003388:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	e853 3f00 	ldrex	r3, [r3]
 8003390:	613b      	str	r3, [r7, #16]
   return(result);
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	f023 0301 	bic.w	r3, r3, #1
 8003398:	63bb      	str	r3, [r7, #56]	; 0x38
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	3314      	adds	r3, #20
 80033a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80033a2:	623a      	str	r2, [r7, #32]
 80033a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033a6:	69f9      	ldr	r1, [r7, #28]
 80033a8:	6a3a      	ldr	r2, [r7, #32]
 80033aa:	e841 2300 	strex	r3, r2, [r1]
 80033ae:	61bb      	str	r3, [r7, #24]
   return(result);
 80033b0:	69bb      	ldr	r3, [r7, #24]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d1e5      	bne.n	8003382 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2220      	movs	r2, #32
 80033ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2220      	movs	r2, #32
 80033c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2200      	movs	r2, #0
 80033ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	e00f      	b.n	80033f2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	4013      	ands	r3, r2
 80033dc:	68ba      	ldr	r2, [r7, #8]
 80033de:	429a      	cmp	r2, r3
 80033e0:	bf0c      	ite	eq
 80033e2:	2301      	moveq	r3, #1
 80033e4:	2300      	movne	r3, #0
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	461a      	mov	r2, r3
 80033ea:	79fb      	ldrb	r3, [r7, #7]
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d09f      	beq.n	8003330 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80033f0:	2300      	movs	r3, #0
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3740      	adds	r7, #64	; 0x40
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
	...

080033fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003400:	b0c0      	sub	sp, #256	; 0x100
 8003402:	af00      	add	r7, sp, #0
 8003404:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003408:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	691b      	ldr	r3, [r3, #16]
 8003410:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003418:	68d9      	ldr	r1, [r3, #12]
 800341a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	ea40 0301 	orr.w	r3, r0, r1
 8003424:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003426:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800342a:	689a      	ldr	r2, [r3, #8]
 800342c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003430:	691b      	ldr	r3, [r3, #16]
 8003432:	431a      	orrs	r2, r3
 8003434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003438:	695b      	ldr	r3, [r3, #20]
 800343a:	431a      	orrs	r2, r3
 800343c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003440:	69db      	ldr	r3, [r3, #28]
 8003442:	4313      	orrs	r3, r2
 8003444:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	68db      	ldr	r3, [r3, #12]
 8003450:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003454:	f021 010c 	bic.w	r1, r1, #12
 8003458:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003462:	430b      	orrs	r3, r1
 8003464:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003466:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	695b      	ldr	r3, [r3, #20]
 800346e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003472:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003476:	6999      	ldr	r1, [r3, #24]
 8003478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	ea40 0301 	orr.w	r3, r0, r1
 8003482:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	4b8f      	ldr	r3, [pc, #572]	; (80036c8 <UART_SetConfig+0x2cc>)
 800348c:	429a      	cmp	r2, r3
 800348e:	d005      	beq.n	800349c <UART_SetConfig+0xa0>
 8003490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	4b8d      	ldr	r3, [pc, #564]	; (80036cc <UART_SetConfig+0x2d0>)
 8003498:	429a      	cmp	r2, r3
 800349a:	d104      	bne.n	80034a6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800349c:	f7fe fcfc 	bl	8001e98 <HAL_RCC_GetPCLK2Freq>
 80034a0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80034a4:	e003      	b.n	80034ae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80034a6:	f7fe fce3 	bl	8001e70 <HAL_RCC_GetPCLK1Freq>
 80034aa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034b2:	69db      	ldr	r3, [r3, #28]
 80034b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034b8:	f040 810c 	bne.w	80036d4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80034bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034c0:	2200      	movs	r2, #0
 80034c2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80034c6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80034ca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80034ce:	4622      	mov	r2, r4
 80034d0:	462b      	mov	r3, r5
 80034d2:	1891      	adds	r1, r2, r2
 80034d4:	65b9      	str	r1, [r7, #88]	; 0x58
 80034d6:	415b      	adcs	r3, r3
 80034d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80034da:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80034de:	4621      	mov	r1, r4
 80034e0:	eb12 0801 	adds.w	r8, r2, r1
 80034e4:	4629      	mov	r1, r5
 80034e6:	eb43 0901 	adc.w	r9, r3, r1
 80034ea:	f04f 0200 	mov.w	r2, #0
 80034ee:	f04f 0300 	mov.w	r3, #0
 80034f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80034f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80034fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80034fe:	4690      	mov	r8, r2
 8003500:	4699      	mov	r9, r3
 8003502:	4623      	mov	r3, r4
 8003504:	eb18 0303 	adds.w	r3, r8, r3
 8003508:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800350c:	462b      	mov	r3, r5
 800350e:	eb49 0303 	adc.w	r3, r9, r3
 8003512:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003516:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	2200      	movs	r2, #0
 800351e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003522:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003526:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800352a:	460b      	mov	r3, r1
 800352c:	18db      	adds	r3, r3, r3
 800352e:	653b      	str	r3, [r7, #80]	; 0x50
 8003530:	4613      	mov	r3, r2
 8003532:	eb42 0303 	adc.w	r3, r2, r3
 8003536:	657b      	str	r3, [r7, #84]	; 0x54
 8003538:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800353c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003540:	f7fd faac 	bl	8000a9c <__aeabi_uldivmod>
 8003544:	4602      	mov	r2, r0
 8003546:	460b      	mov	r3, r1
 8003548:	4b61      	ldr	r3, [pc, #388]	; (80036d0 <UART_SetConfig+0x2d4>)
 800354a:	fba3 2302 	umull	r2, r3, r3, r2
 800354e:	095b      	lsrs	r3, r3, #5
 8003550:	011c      	lsls	r4, r3, #4
 8003552:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003556:	2200      	movs	r2, #0
 8003558:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800355c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003560:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003564:	4642      	mov	r2, r8
 8003566:	464b      	mov	r3, r9
 8003568:	1891      	adds	r1, r2, r2
 800356a:	64b9      	str	r1, [r7, #72]	; 0x48
 800356c:	415b      	adcs	r3, r3
 800356e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003570:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003574:	4641      	mov	r1, r8
 8003576:	eb12 0a01 	adds.w	sl, r2, r1
 800357a:	4649      	mov	r1, r9
 800357c:	eb43 0b01 	adc.w	fp, r3, r1
 8003580:	f04f 0200 	mov.w	r2, #0
 8003584:	f04f 0300 	mov.w	r3, #0
 8003588:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800358c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003590:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003594:	4692      	mov	sl, r2
 8003596:	469b      	mov	fp, r3
 8003598:	4643      	mov	r3, r8
 800359a:	eb1a 0303 	adds.w	r3, sl, r3
 800359e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80035a2:	464b      	mov	r3, r9
 80035a4:	eb4b 0303 	adc.w	r3, fp, r3
 80035a8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80035ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80035b8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80035bc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80035c0:	460b      	mov	r3, r1
 80035c2:	18db      	adds	r3, r3, r3
 80035c4:	643b      	str	r3, [r7, #64]	; 0x40
 80035c6:	4613      	mov	r3, r2
 80035c8:	eb42 0303 	adc.w	r3, r2, r3
 80035cc:	647b      	str	r3, [r7, #68]	; 0x44
 80035ce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80035d2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80035d6:	f7fd fa61 	bl	8000a9c <__aeabi_uldivmod>
 80035da:	4602      	mov	r2, r0
 80035dc:	460b      	mov	r3, r1
 80035de:	4611      	mov	r1, r2
 80035e0:	4b3b      	ldr	r3, [pc, #236]	; (80036d0 <UART_SetConfig+0x2d4>)
 80035e2:	fba3 2301 	umull	r2, r3, r3, r1
 80035e6:	095b      	lsrs	r3, r3, #5
 80035e8:	2264      	movs	r2, #100	; 0x64
 80035ea:	fb02 f303 	mul.w	r3, r2, r3
 80035ee:	1acb      	subs	r3, r1, r3
 80035f0:	00db      	lsls	r3, r3, #3
 80035f2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80035f6:	4b36      	ldr	r3, [pc, #216]	; (80036d0 <UART_SetConfig+0x2d4>)
 80035f8:	fba3 2302 	umull	r2, r3, r3, r2
 80035fc:	095b      	lsrs	r3, r3, #5
 80035fe:	005b      	lsls	r3, r3, #1
 8003600:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003604:	441c      	add	r4, r3
 8003606:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800360a:	2200      	movs	r2, #0
 800360c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003610:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003614:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003618:	4642      	mov	r2, r8
 800361a:	464b      	mov	r3, r9
 800361c:	1891      	adds	r1, r2, r2
 800361e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003620:	415b      	adcs	r3, r3
 8003622:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003624:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003628:	4641      	mov	r1, r8
 800362a:	1851      	adds	r1, r2, r1
 800362c:	6339      	str	r1, [r7, #48]	; 0x30
 800362e:	4649      	mov	r1, r9
 8003630:	414b      	adcs	r3, r1
 8003632:	637b      	str	r3, [r7, #52]	; 0x34
 8003634:	f04f 0200 	mov.w	r2, #0
 8003638:	f04f 0300 	mov.w	r3, #0
 800363c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003640:	4659      	mov	r1, fp
 8003642:	00cb      	lsls	r3, r1, #3
 8003644:	4651      	mov	r1, sl
 8003646:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800364a:	4651      	mov	r1, sl
 800364c:	00ca      	lsls	r2, r1, #3
 800364e:	4610      	mov	r0, r2
 8003650:	4619      	mov	r1, r3
 8003652:	4603      	mov	r3, r0
 8003654:	4642      	mov	r2, r8
 8003656:	189b      	adds	r3, r3, r2
 8003658:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800365c:	464b      	mov	r3, r9
 800365e:	460a      	mov	r2, r1
 8003660:	eb42 0303 	adc.w	r3, r2, r3
 8003664:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003668:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	2200      	movs	r2, #0
 8003670:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003674:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003678:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800367c:	460b      	mov	r3, r1
 800367e:	18db      	adds	r3, r3, r3
 8003680:	62bb      	str	r3, [r7, #40]	; 0x28
 8003682:	4613      	mov	r3, r2
 8003684:	eb42 0303 	adc.w	r3, r2, r3
 8003688:	62fb      	str	r3, [r7, #44]	; 0x2c
 800368a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800368e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003692:	f7fd fa03 	bl	8000a9c <__aeabi_uldivmod>
 8003696:	4602      	mov	r2, r0
 8003698:	460b      	mov	r3, r1
 800369a:	4b0d      	ldr	r3, [pc, #52]	; (80036d0 <UART_SetConfig+0x2d4>)
 800369c:	fba3 1302 	umull	r1, r3, r3, r2
 80036a0:	095b      	lsrs	r3, r3, #5
 80036a2:	2164      	movs	r1, #100	; 0x64
 80036a4:	fb01 f303 	mul.w	r3, r1, r3
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	00db      	lsls	r3, r3, #3
 80036ac:	3332      	adds	r3, #50	; 0x32
 80036ae:	4a08      	ldr	r2, [pc, #32]	; (80036d0 <UART_SetConfig+0x2d4>)
 80036b0:	fba2 2303 	umull	r2, r3, r2, r3
 80036b4:	095b      	lsrs	r3, r3, #5
 80036b6:	f003 0207 	and.w	r2, r3, #7
 80036ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4422      	add	r2, r4
 80036c2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80036c4:	e106      	b.n	80038d4 <UART_SetConfig+0x4d8>
 80036c6:	bf00      	nop
 80036c8:	40011000 	.word	0x40011000
 80036cc:	40011400 	.word	0x40011400
 80036d0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80036d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036d8:	2200      	movs	r2, #0
 80036da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80036de:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80036e2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80036e6:	4642      	mov	r2, r8
 80036e8:	464b      	mov	r3, r9
 80036ea:	1891      	adds	r1, r2, r2
 80036ec:	6239      	str	r1, [r7, #32]
 80036ee:	415b      	adcs	r3, r3
 80036f0:	627b      	str	r3, [r7, #36]	; 0x24
 80036f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80036f6:	4641      	mov	r1, r8
 80036f8:	1854      	adds	r4, r2, r1
 80036fa:	4649      	mov	r1, r9
 80036fc:	eb43 0501 	adc.w	r5, r3, r1
 8003700:	f04f 0200 	mov.w	r2, #0
 8003704:	f04f 0300 	mov.w	r3, #0
 8003708:	00eb      	lsls	r3, r5, #3
 800370a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800370e:	00e2      	lsls	r2, r4, #3
 8003710:	4614      	mov	r4, r2
 8003712:	461d      	mov	r5, r3
 8003714:	4643      	mov	r3, r8
 8003716:	18e3      	adds	r3, r4, r3
 8003718:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800371c:	464b      	mov	r3, r9
 800371e:	eb45 0303 	adc.w	r3, r5, r3
 8003722:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003726:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	2200      	movs	r2, #0
 800372e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003732:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003736:	f04f 0200 	mov.w	r2, #0
 800373a:	f04f 0300 	mov.w	r3, #0
 800373e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003742:	4629      	mov	r1, r5
 8003744:	008b      	lsls	r3, r1, #2
 8003746:	4621      	mov	r1, r4
 8003748:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800374c:	4621      	mov	r1, r4
 800374e:	008a      	lsls	r2, r1, #2
 8003750:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003754:	f7fd f9a2 	bl	8000a9c <__aeabi_uldivmod>
 8003758:	4602      	mov	r2, r0
 800375a:	460b      	mov	r3, r1
 800375c:	4b60      	ldr	r3, [pc, #384]	; (80038e0 <UART_SetConfig+0x4e4>)
 800375e:	fba3 2302 	umull	r2, r3, r3, r2
 8003762:	095b      	lsrs	r3, r3, #5
 8003764:	011c      	lsls	r4, r3, #4
 8003766:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800376a:	2200      	movs	r2, #0
 800376c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003770:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003774:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003778:	4642      	mov	r2, r8
 800377a:	464b      	mov	r3, r9
 800377c:	1891      	adds	r1, r2, r2
 800377e:	61b9      	str	r1, [r7, #24]
 8003780:	415b      	adcs	r3, r3
 8003782:	61fb      	str	r3, [r7, #28]
 8003784:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003788:	4641      	mov	r1, r8
 800378a:	1851      	adds	r1, r2, r1
 800378c:	6139      	str	r1, [r7, #16]
 800378e:	4649      	mov	r1, r9
 8003790:	414b      	adcs	r3, r1
 8003792:	617b      	str	r3, [r7, #20]
 8003794:	f04f 0200 	mov.w	r2, #0
 8003798:	f04f 0300 	mov.w	r3, #0
 800379c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80037a0:	4659      	mov	r1, fp
 80037a2:	00cb      	lsls	r3, r1, #3
 80037a4:	4651      	mov	r1, sl
 80037a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037aa:	4651      	mov	r1, sl
 80037ac:	00ca      	lsls	r2, r1, #3
 80037ae:	4610      	mov	r0, r2
 80037b0:	4619      	mov	r1, r3
 80037b2:	4603      	mov	r3, r0
 80037b4:	4642      	mov	r2, r8
 80037b6:	189b      	adds	r3, r3, r2
 80037b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80037bc:	464b      	mov	r3, r9
 80037be:	460a      	mov	r2, r1
 80037c0:	eb42 0303 	adc.w	r3, r2, r3
 80037c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80037c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	67bb      	str	r3, [r7, #120]	; 0x78
 80037d2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80037d4:	f04f 0200 	mov.w	r2, #0
 80037d8:	f04f 0300 	mov.w	r3, #0
 80037dc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80037e0:	4649      	mov	r1, r9
 80037e2:	008b      	lsls	r3, r1, #2
 80037e4:	4641      	mov	r1, r8
 80037e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80037ea:	4641      	mov	r1, r8
 80037ec:	008a      	lsls	r2, r1, #2
 80037ee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80037f2:	f7fd f953 	bl	8000a9c <__aeabi_uldivmod>
 80037f6:	4602      	mov	r2, r0
 80037f8:	460b      	mov	r3, r1
 80037fa:	4611      	mov	r1, r2
 80037fc:	4b38      	ldr	r3, [pc, #224]	; (80038e0 <UART_SetConfig+0x4e4>)
 80037fe:	fba3 2301 	umull	r2, r3, r3, r1
 8003802:	095b      	lsrs	r3, r3, #5
 8003804:	2264      	movs	r2, #100	; 0x64
 8003806:	fb02 f303 	mul.w	r3, r2, r3
 800380a:	1acb      	subs	r3, r1, r3
 800380c:	011b      	lsls	r3, r3, #4
 800380e:	3332      	adds	r3, #50	; 0x32
 8003810:	4a33      	ldr	r2, [pc, #204]	; (80038e0 <UART_SetConfig+0x4e4>)
 8003812:	fba2 2303 	umull	r2, r3, r2, r3
 8003816:	095b      	lsrs	r3, r3, #5
 8003818:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800381c:	441c      	add	r4, r3
 800381e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003822:	2200      	movs	r2, #0
 8003824:	673b      	str	r3, [r7, #112]	; 0x70
 8003826:	677a      	str	r2, [r7, #116]	; 0x74
 8003828:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800382c:	4642      	mov	r2, r8
 800382e:	464b      	mov	r3, r9
 8003830:	1891      	adds	r1, r2, r2
 8003832:	60b9      	str	r1, [r7, #8]
 8003834:	415b      	adcs	r3, r3
 8003836:	60fb      	str	r3, [r7, #12]
 8003838:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800383c:	4641      	mov	r1, r8
 800383e:	1851      	adds	r1, r2, r1
 8003840:	6039      	str	r1, [r7, #0]
 8003842:	4649      	mov	r1, r9
 8003844:	414b      	adcs	r3, r1
 8003846:	607b      	str	r3, [r7, #4]
 8003848:	f04f 0200 	mov.w	r2, #0
 800384c:	f04f 0300 	mov.w	r3, #0
 8003850:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003854:	4659      	mov	r1, fp
 8003856:	00cb      	lsls	r3, r1, #3
 8003858:	4651      	mov	r1, sl
 800385a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800385e:	4651      	mov	r1, sl
 8003860:	00ca      	lsls	r2, r1, #3
 8003862:	4610      	mov	r0, r2
 8003864:	4619      	mov	r1, r3
 8003866:	4603      	mov	r3, r0
 8003868:	4642      	mov	r2, r8
 800386a:	189b      	adds	r3, r3, r2
 800386c:	66bb      	str	r3, [r7, #104]	; 0x68
 800386e:	464b      	mov	r3, r9
 8003870:	460a      	mov	r2, r1
 8003872:	eb42 0303 	adc.w	r3, r2, r3
 8003876:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003878:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	2200      	movs	r2, #0
 8003880:	663b      	str	r3, [r7, #96]	; 0x60
 8003882:	667a      	str	r2, [r7, #100]	; 0x64
 8003884:	f04f 0200 	mov.w	r2, #0
 8003888:	f04f 0300 	mov.w	r3, #0
 800388c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003890:	4649      	mov	r1, r9
 8003892:	008b      	lsls	r3, r1, #2
 8003894:	4641      	mov	r1, r8
 8003896:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800389a:	4641      	mov	r1, r8
 800389c:	008a      	lsls	r2, r1, #2
 800389e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80038a2:	f7fd f8fb 	bl	8000a9c <__aeabi_uldivmod>
 80038a6:	4602      	mov	r2, r0
 80038a8:	460b      	mov	r3, r1
 80038aa:	4b0d      	ldr	r3, [pc, #52]	; (80038e0 <UART_SetConfig+0x4e4>)
 80038ac:	fba3 1302 	umull	r1, r3, r3, r2
 80038b0:	095b      	lsrs	r3, r3, #5
 80038b2:	2164      	movs	r1, #100	; 0x64
 80038b4:	fb01 f303 	mul.w	r3, r1, r3
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	011b      	lsls	r3, r3, #4
 80038bc:	3332      	adds	r3, #50	; 0x32
 80038be:	4a08      	ldr	r2, [pc, #32]	; (80038e0 <UART_SetConfig+0x4e4>)
 80038c0:	fba2 2303 	umull	r2, r3, r2, r3
 80038c4:	095b      	lsrs	r3, r3, #5
 80038c6:	f003 020f 	and.w	r2, r3, #15
 80038ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4422      	add	r2, r4
 80038d2:	609a      	str	r2, [r3, #8]
}
 80038d4:	bf00      	nop
 80038d6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80038da:	46bd      	mov	sp, r7
 80038dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038e0:	51eb851f 	.word	0x51eb851f

080038e4 <siprintf>:
 80038e4:	b40e      	push	{r1, r2, r3}
 80038e6:	b500      	push	{lr}
 80038e8:	b09c      	sub	sp, #112	; 0x70
 80038ea:	ab1d      	add	r3, sp, #116	; 0x74
 80038ec:	9002      	str	r0, [sp, #8]
 80038ee:	9006      	str	r0, [sp, #24]
 80038f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80038f4:	4809      	ldr	r0, [pc, #36]	; (800391c <siprintf+0x38>)
 80038f6:	9107      	str	r1, [sp, #28]
 80038f8:	9104      	str	r1, [sp, #16]
 80038fa:	4909      	ldr	r1, [pc, #36]	; (8003920 <siprintf+0x3c>)
 80038fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8003900:	9105      	str	r1, [sp, #20]
 8003902:	6800      	ldr	r0, [r0, #0]
 8003904:	9301      	str	r3, [sp, #4]
 8003906:	a902      	add	r1, sp, #8
 8003908:	f000 f992 	bl	8003c30 <_svfiprintf_r>
 800390c:	9b02      	ldr	r3, [sp, #8]
 800390e:	2200      	movs	r2, #0
 8003910:	701a      	strb	r2, [r3, #0]
 8003912:	b01c      	add	sp, #112	; 0x70
 8003914:	f85d eb04 	ldr.w	lr, [sp], #4
 8003918:	b003      	add	sp, #12
 800391a:	4770      	bx	lr
 800391c:	20000058 	.word	0x20000058
 8003920:	ffff0208 	.word	0xffff0208

08003924 <memset>:
 8003924:	4402      	add	r2, r0
 8003926:	4603      	mov	r3, r0
 8003928:	4293      	cmp	r3, r2
 800392a:	d100      	bne.n	800392e <memset+0xa>
 800392c:	4770      	bx	lr
 800392e:	f803 1b01 	strb.w	r1, [r3], #1
 8003932:	e7f9      	b.n	8003928 <memset+0x4>

08003934 <__errno>:
 8003934:	4b01      	ldr	r3, [pc, #4]	; (800393c <__errno+0x8>)
 8003936:	6818      	ldr	r0, [r3, #0]
 8003938:	4770      	bx	lr
 800393a:	bf00      	nop
 800393c:	20000058 	.word	0x20000058

08003940 <__libc_init_array>:
 8003940:	b570      	push	{r4, r5, r6, lr}
 8003942:	4d0d      	ldr	r5, [pc, #52]	; (8003978 <__libc_init_array+0x38>)
 8003944:	4c0d      	ldr	r4, [pc, #52]	; (800397c <__libc_init_array+0x3c>)
 8003946:	1b64      	subs	r4, r4, r5
 8003948:	10a4      	asrs	r4, r4, #2
 800394a:	2600      	movs	r6, #0
 800394c:	42a6      	cmp	r6, r4
 800394e:	d109      	bne.n	8003964 <__libc_init_array+0x24>
 8003950:	4d0b      	ldr	r5, [pc, #44]	; (8003980 <__libc_init_array+0x40>)
 8003952:	4c0c      	ldr	r4, [pc, #48]	; (8003984 <__libc_init_array+0x44>)
 8003954:	f000 fc6a 	bl	800422c <_init>
 8003958:	1b64      	subs	r4, r4, r5
 800395a:	10a4      	asrs	r4, r4, #2
 800395c:	2600      	movs	r6, #0
 800395e:	42a6      	cmp	r6, r4
 8003960:	d105      	bne.n	800396e <__libc_init_array+0x2e>
 8003962:	bd70      	pop	{r4, r5, r6, pc}
 8003964:	f855 3b04 	ldr.w	r3, [r5], #4
 8003968:	4798      	blx	r3
 800396a:	3601      	adds	r6, #1
 800396c:	e7ee      	b.n	800394c <__libc_init_array+0xc>
 800396e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003972:	4798      	blx	r3
 8003974:	3601      	adds	r6, #1
 8003976:	e7f2      	b.n	800395e <__libc_init_array+0x1e>
 8003978:	080042ec 	.word	0x080042ec
 800397c:	080042ec 	.word	0x080042ec
 8003980:	080042ec 	.word	0x080042ec
 8003984:	080042f0 	.word	0x080042f0

08003988 <__retarget_lock_acquire_recursive>:
 8003988:	4770      	bx	lr

0800398a <__retarget_lock_release_recursive>:
 800398a:	4770      	bx	lr

0800398c <_free_r>:
 800398c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800398e:	2900      	cmp	r1, #0
 8003990:	d044      	beq.n	8003a1c <_free_r+0x90>
 8003992:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003996:	9001      	str	r0, [sp, #4]
 8003998:	2b00      	cmp	r3, #0
 800399a:	f1a1 0404 	sub.w	r4, r1, #4
 800399e:	bfb8      	it	lt
 80039a0:	18e4      	addlt	r4, r4, r3
 80039a2:	f000 f8df 	bl	8003b64 <__malloc_lock>
 80039a6:	4a1e      	ldr	r2, [pc, #120]	; (8003a20 <_free_r+0x94>)
 80039a8:	9801      	ldr	r0, [sp, #4]
 80039aa:	6813      	ldr	r3, [r2, #0]
 80039ac:	b933      	cbnz	r3, 80039bc <_free_r+0x30>
 80039ae:	6063      	str	r3, [r4, #4]
 80039b0:	6014      	str	r4, [r2, #0]
 80039b2:	b003      	add	sp, #12
 80039b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80039b8:	f000 b8da 	b.w	8003b70 <__malloc_unlock>
 80039bc:	42a3      	cmp	r3, r4
 80039be:	d908      	bls.n	80039d2 <_free_r+0x46>
 80039c0:	6825      	ldr	r5, [r4, #0]
 80039c2:	1961      	adds	r1, r4, r5
 80039c4:	428b      	cmp	r3, r1
 80039c6:	bf01      	itttt	eq
 80039c8:	6819      	ldreq	r1, [r3, #0]
 80039ca:	685b      	ldreq	r3, [r3, #4]
 80039cc:	1949      	addeq	r1, r1, r5
 80039ce:	6021      	streq	r1, [r4, #0]
 80039d0:	e7ed      	b.n	80039ae <_free_r+0x22>
 80039d2:	461a      	mov	r2, r3
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	b10b      	cbz	r3, 80039dc <_free_r+0x50>
 80039d8:	42a3      	cmp	r3, r4
 80039da:	d9fa      	bls.n	80039d2 <_free_r+0x46>
 80039dc:	6811      	ldr	r1, [r2, #0]
 80039de:	1855      	adds	r5, r2, r1
 80039e0:	42a5      	cmp	r5, r4
 80039e2:	d10b      	bne.n	80039fc <_free_r+0x70>
 80039e4:	6824      	ldr	r4, [r4, #0]
 80039e6:	4421      	add	r1, r4
 80039e8:	1854      	adds	r4, r2, r1
 80039ea:	42a3      	cmp	r3, r4
 80039ec:	6011      	str	r1, [r2, #0]
 80039ee:	d1e0      	bne.n	80039b2 <_free_r+0x26>
 80039f0:	681c      	ldr	r4, [r3, #0]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	6053      	str	r3, [r2, #4]
 80039f6:	440c      	add	r4, r1
 80039f8:	6014      	str	r4, [r2, #0]
 80039fa:	e7da      	b.n	80039b2 <_free_r+0x26>
 80039fc:	d902      	bls.n	8003a04 <_free_r+0x78>
 80039fe:	230c      	movs	r3, #12
 8003a00:	6003      	str	r3, [r0, #0]
 8003a02:	e7d6      	b.n	80039b2 <_free_r+0x26>
 8003a04:	6825      	ldr	r5, [r4, #0]
 8003a06:	1961      	adds	r1, r4, r5
 8003a08:	428b      	cmp	r3, r1
 8003a0a:	bf04      	itt	eq
 8003a0c:	6819      	ldreq	r1, [r3, #0]
 8003a0e:	685b      	ldreq	r3, [r3, #4]
 8003a10:	6063      	str	r3, [r4, #4]
 8003a12:	bf04      	itt	eq
 8003a14:	1949      	addeq	r1, r1, r5
 8003a16:	6021      	streq	r1, [r4, #0]
 8003a18:	6054      	str	r4, [r2, #4]
 8003a1a:	e7ca      	b.n	80039b2 <_free_r+0x26>
 8003a1c:	b003      	add	sp, #12
 8003a1e:	bd30      	pop	{r4, r5, pc}
 8003a20:	20000264 	.word	0x20000264

08003a24 <sbrk_aligned>:
 8003a24:	b570      	push	{r4, r5, r6, lr}
 8003a26:	4e0e      	ldr	r6, [pc, #56]	; (8003a60 <sbrk_aligned+0x3c>)
 8003a28:	460c      	mov	r4, r1
 8003a2a:	6831      	ldr	r1, [r6, #0]
 8003a2c:	4605      	mov	r5, r0
 8003a2e:	b911      	cbnz	r1, 8003a36 <sbrk_aligned+0x12>
 8003a30:	f000 fba6 	bl	8004180 <_sbrk_r>
 8003a34:	6030      	str	r0, [r6, #0]
 8003a36:	4621      	mov	r1, r4
 8003a38:	4628      	mov	r0, r5
 8003a3a:	f000 fba1 	bl	8004180 <_sbrk_r>
 8003a3e:	1c43      	adds	r3, r0, #1
 8003a40:	d00a      	beq.n	8003a58 <sbrk_aligned+0x34>
 8003a42:	1cc4      	adds	r4, r0, #3
 8003a44:	f024 0403 	bic.w	r4, r4, #3
 8003a48:	42a0      	cmp	r0, r4
 8003a4a:	d007      	beq.n	8003a5c <sbrk_aligned+0x38>
 8003a4c:	1a21      	subs	r1, r4, r0
 8003a4e:	4628      	mov	r0, r5
 8003a50:	f000 fb96 	bl	8004180 <_sbrk_r>
 8003a54:	3001      	adds	r0, #1
 8003a56:	d101      	bne.n	8003a5c <sbrk_aligned+0x38>
 8003a58:	f04f 34ff 	mov.w	r4, #4294967295
 8003a5c:	4620      	mov	r0, r4
 8003a5e:	bd70      	pop	{r4, r5, r6, pc}
 8003a60:	20000268 	.word	0x20000268

08003a64 <_malloc_r>:
 8003a64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a68:	1ccd      	adds	r5, r1, #3
 8003a6a:	f025 0503 	bic.w	r5, r5, #3
 8003a6e:	3508      	adds	r5, #8
 8003a70:	2d0c      	cmp	r5, #12
 8003a72:	bf38      	it	cc
 8003a74:	250c      	movcc	r5, #12
 8003a76:	2d00      	cmp	r5, #0
 8003a78:	4607      	mov	r7, r0
 8003a7a:	db01      	blt.n	8003a80 <_malloc_r+0x1c>
 8003a7c:	42a9      	cmp	r1, r5
 8003a7e:	d905      	bls.n	8003a8c <_malloc_r+0x28>
 8003a80:	230c      	movs	r3, #12
 8003a82:	603b      	str	r3, [r7, #0]
 8003a84:	2600      	movs	r6, #0
 8003a86:	4630      	mov	r0, r6
 8003a88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a8c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003b60 <_malloc_r+0xfc>
 8003a90:	f000 f868 	bl	8003b64 <__malloc_lock>
 8003a94:	f8d8 3000 	ldr.w	r3, [r8]
 8003a98:	461c      	mov	r4, r3
 8003a9a:	bb5c      	cbnz	r4, 8003af4 <_malloc_r+0x90>
 8003a9c:	4629      	mov	r1, r5
 8003a9e:	4638      	mov	r0, r7
 8003aa0:	f7ff ffc0 	bl	8003a24 <sbrk_aligned>
 8003aa4:	1c43      	adds	r3, r0, #1
 8003aa6:	4604      	mov	r4, r0
 8003aa8:	d155      	bne.n	8003b56 <_malloc_r+0xf2>
 8003aaa:	f8d8 4000 	ldr.w	r4, [r8]
 8003aae:	4626      	mov	r6, r4
 8003ab0:	2e00      	cmp	r6, #0
 8003ab2:	d145      	bne.n	8003b40 <_malloc_r+0xdc>
 8003ab4:	2c00      	cmp	r4, #0
 8003ab6:	d048      	beq.n	8003b4a <_malloc_r+0xe6>
 8003ab8:	6823      	ldr	r3, [r4, #0]
 8003aba:	4631      	mov	r1, r6
 8003abc:	4638      	mov	r0, r7
 8003abe:	eb04 0903 	add.w	r9, r4, r3
 8003ac2:	f000 fb5d 	bl	8004180 <_sbrk_r>
 8003ac6:	4581      	cmp	r9, r0
 8003ac8:	d13f      	bne.n	8003b4a <_malloc_r+0xe6>
 8003aca:	6821      	ldr	r1, [r4, #0]
 8003acc:	1a6d      	subs	r5, r5, r1
 8003ace:	4629      	mov	r1, r5
 8003ad0:	4638      	mov	r0, r7
 8003ad2:	f7ff ffa7 	bl	8003a24 <sbrk_aligned>
 8003ad6:	3001      	adds	r0, #1
 8003ad8:	d037      	beq.n	8003b4a <_malloc_r+0xe6>
 8003ada:	6823      	ldr	r3, [r4, #0]
 8003adc:	442b      	add	r3, r5
 8003ade:	6023      	str	r3, [r4, #0]
 8003ae0:	f8d8 3000 	ldr.w	r3, [r8]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d038      	beq.n	8003b5a <_malloc_r+0xf6>
 8003ae8:	685a      	ldr	r2, [r3, #4]
 8003aea:	42a2      	cmp	r2, r4
 8003aec:	d12b      	bne.n	8003b46 <_malloc_r+0xe2>
 8003aee:	2200      	movs	r2, #0
 8003af0:	605a      	str	r2, [r3, #4]
 8003af2:	e00f      	b.n	8003b14 <_malloc_r+0xb0>
 8003af4:	6822      	ldr	r2, [r4, #0]
 8003af6:	1b52      	subs	r2, r2, r5
 8003af8:	d41f      	bmi.n	8003b3a <_malloc_r+0xd6>
 8003afa:	2a0b      	cmp	r2, #11
 8003afc:	d917      	bls.n	8003b2e <_malloc_r+0xca>
 8003afe:	1961      	adds	r1, r4, r5
 8003b00:	42a3      	cmp	r3, r4
 8003b02:	6025      	str	r5, [r4, #0]
 8003b04:	bf18      	it	ne
 8003b06:	6059      	strne	r1, [r3, #4]
 8003b08:	6863      	ldr	r3, [r4, #4]
 8003b0a:	bf08      	it	eq
 8003b0c:	f8c8 1000 	streq.w	r1, [r8]
 8003b10:	5162      	str	r2, [r4, r5]
 8003b12:	604b      	str	r3, [r1, #4]
 8003b14:	4638      	mov	r0, r7
 8003b16:	f104 060b 	add.w	r6, r4, #11
 8003b1a:	f000 f829 	bl	8003b70 <__malloc_unlock>
 8003b1e:	f026 0607 	bic.w	r6, r6, #7
 8003b22:	1d23      	adds	r3, r4, #4
 8003b24:	1af2      	subs	r2, r6, r3
 8003b26:	d0ae      	beq.n	8003a86 <_malloc_r+0x22>
 8003b28:	1b9b      	subs	r3, r3, r6
 8003b2a:	50a3      	str	r3, [r4, r2]
 8003b2c:	e7ab      	b.n	8003a86 <_malloc_r+0x22>
 8003b2e:	42a3      	cmp	r3, r4
 8003b30:	6862      	ldr	r2, [r4, #4]
 8003b32:	d1dd      	bne.n	8003af0 <_malloc_r+0x8c>
 8003b34:	f8c8 2000 	str.w	r2, [r8]
 8003b38:	e7ec      	b.n	8003b14 <_malloc_r+0xb0>
 8003b3a:	4623      	mov	r3, r4
 8003b3c:	6864      	ldr	r4, [r4, #4]
 8003b3e:	e7ac      	b.n	8003a9a <_malloc_r+0x36>
 8003b40:	4634      	mov	r4, r6
 8003b42:	6876      	ldr	r6, [r6, #4]
 8003b44:	e7b4      	b.n	8003ab0 <_malloc_r+0x4c>
 8003b46:	4613      	mov	r3, r2
 8003b48:	e7cc      	b.n	8003ae4 <_malloc_r+0x80>
 8003b4a:	230c      	movs	r3, #12
 8003b4c:	603b      	str	r3, [r7, #0]
 8003b4e:	4638      	mov	r0, r7
 8003b50:	f000 f80e 	bl	8003b70 <__malloc_unlock>
 8003b54:	e797      	b.n	8003a86 <_malloc_r+0x22>
 8003b56:	6025      	str	r5, [r4, #0]
 8003b58:	e7dc      	b.n	8003b14 <_malloc_r+0xb0>
 8003b5a:	605b      	str	r3, [r3, #4]
 8003b5c:	deff      	udf	#255	; 0xff
 8003b5e:	bf00      	nop
 8003b60:	20000264 	.word	0x20000264

08003b64 <__malloc_lock>:
 8003b64:	4801      	ldr	r0, [pc, #4]	; (8003b6c <__malloc_lock+0x8>)
 8003b66:	f7ff bf0f 	b.w	8003988 <__retarget_lock_acquire_recursive>
 8003b6a:	bf00      	nop
 8003b6c:	20000260 	.word	0x20000260

08003b70 <__malloc_unlock>:
 8003b70:	4801      	ldr	r0, [pc, #4]	; (8003b78 <__malloc_unlock+0x8>)
 8003b72:	f7ff bf0a 	b.w	800398a <__retarget_lock_release_recursive>
 8003b76:	bf00      	nop
 8003b78:	20000260 	.word	0x20000260

08003b7c <__ssputs_r>:
 8003b7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b80:	688e      	ldr	r6, [r1, #8]
 8003b82:	461f      	mov	r7, r3
 8003b84:	42be      	cmp	r6, r7
 8003b86:	680b      	ldr	r3, [r1, #0]
 8003b88:	4682      	mov	sl, r0
 8003b8a:	460c      	mov	r4, r1
 8003b8c:	4690      	mov	r8, r2
 8003b8e:	d82c      	bhi.n	8003bea <__ssputs_r+0x6e>
 8003b90:	898a      	ldrh	r2, [r1, #12]
 8003b92:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003b96:	d026      	beq.n	8003be6 <__ssputs_r+0x6a>
 8003b98:	6965      	ldr	r5, [r4, #20]
 8003b9a:	6909      	ldr	r1, [r1, #16]
 8003b9c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003ba0:	eba3 0901 	sub.w	r9, r3, r1
 8003ba4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003ba8:	1c7b      	adds	r3, r7, #1
 8003baa:	444b      	add	r3, r9
 8003bac:	106d      	asrs	r5, r5, #1
 8003bae:	429d      	cmp	r5, r3
 8003bb0:	bf38      	it	cc
 8003bb2:	461d      	movcc	r5, r3
 8003bb4:	0553      	lsls	r3, r2, #21
 8003bb6:	d527      	bpl.n	8003c08 <__ssputs_r+0x8c>
 8003bb8:	4629      	mov	r1, r5
 8003bba:	f7ff ff53 	bl	8003a64 <_malloc_r>
 8003bbe:	4606      	mov	r6, r0
 8003bc0:	b360      	cbz	r0, 8003c1c <__ssputs_r+0xa0>
 8003bc2:	6921      	ldr	r1, [r4, #16]
 8003bc4:	464a      	mov	r2, r9
 8003bc6:	f000 faeb 	bl	80041a0 <memcpy>
 8003bca:	89a3      	ldrh	r3, [r4, #12]
 8003bcc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003bd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bd4:	81a3      	strh	r3, [r4, #12]
 8003bd6:	6126      	str	r6, [r4, #16]
 8003bd8:	6165      	str	r5, [r4, #20]
 8003bda:	444e      	add	r6, r9
 8003bdc:	eba5 0509 	sub.w	r5, r5, r9
 8003be0:	6026      	str	r6, [r4, #0]
 8003be2:	60a5      	str	r5, [r4, #8]
 8003be4:	463e      	mov	r6, r7
 8003be6:	42be      	cmp	r6, r7
 8003be8:	d900      	bls.n	8003bec <__ssputs_r+0x70>
 8003bea:	463e      	mov	r6, r7
 8003bec:	6820      	ldr	r0, [r4, #0]
 8003bee:	4632      	mov	r2, r6
 8003bf0:	4641      	mov	r1, r8
 8003bf2:	f000 faab 	bl	800414c <memmove>
 8003bf6:	68a3      	ldr	r3, [r4, #8]
 8003bf8:	1b9b      	subs	r3, r3, r6
 8003bfa:	60a3      	str	r3, [r4, #8]
 8003bfc:	6823      	ldr	r3, [r4, #0]
 8003bfe:	4433      	add	r3, r6
 8003c00:	6023      	str	r3, [r4, #0]
 8003c02:	2000      	movs	r0, #0
 8003c04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c08:	462a      	mov	r2, r5
 8003c0a:	f000 fad7 	bl	80041bc <_realloc_r>
 8003c0e:	4606      	mov	r6, r0
 8003c10:	2800      	cmp	r0, #0
 8003c12:	d1e0      	bne.n	8003bd6 <__ssputs_r+0x5a>
 8003c14:	6921      	ldr	r1, [r4, #16]
 8003c16:	4650      	mov	r0, sl
 8003c18:	f7ff feb8 	bl	800398c <_free_r>
 8003c1c:	230c      	movs	r3, #12
 8003c1e:	f8ca 3000 	str.w	r3, [sl]
 8003c22:	89a3      	ldrh	r3, [r4, #12]
 8003c24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c28:	81a3      	strh	r3, [r4, #12]
 8003c2a:	f04f 30ff 	mov.w	r0, #4294967295
 8003c2e:	e7e9      	b.n	8003c04 <__ssputs_r+0x88>

08003c30 <_svfiprintf_r>:
 8003c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c34:	4698      	mov	r8, r3
 8003c36:	898b      	ldrh	r3, [r1, #12]
 8003c38:	061b      	lsls	r3, r3, #24
 8003c3a:	b09d      	sub	sp, #116	; 0x74
 8003c3c:	4607      	mov	r7, r0
 8003c3e:	460d      	mov	r5, r1
 8003c40:	4614      	mov	r4, r2
 8003c42:	d50e      	bpl.n	8003c62 <_svfiprintf_r+0x32>
 8003c44:	690b      	ldr	r3, [r1, #16]
 8003c46:	b963      	cbnz	r3, 8003c62 <_svfiprintf_r+0x32>
 8003c48:	2140      	movs	r1, #64	; 0x40
 8003c4a:	f7ff ff0b 	bl	8003a64 <_malloc_r>
 8003c4e:	6028      	str	r0, [r5, #0]
 8003c50:	6128      	str	r0, [r5, #16]
 8003c52:	b920      	cbnz	r0, 8003c5e <_svfiprintf_r+0x2e>
 8003c54:	230c      	movs	r3, #12
 8003c56:	603b      	str	r3, [r7, #0]
 8003c58:	f04f 30ff 	mov.w	r0, #4294967295
 8003c5c:	e0d0      	b.n	8003e00 <_svfiprintf_r+0x1d0>
 8003c5e:	2340      	movs	r3, #64	; 0x40
 8003c60:	616b      	str	r3, [r5, #20]
 8003c62:	2300      	movs	r3, #0
 8003c64:	9309      	str	r3, [sp, #36]	; 0x24
 8003c66:	2320      	movs	r3, #32
 8003c68:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003c6c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003c70:	2330      	movs	r3, #48	; 0x30
 8003c72:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003e18 <_svfiprintf_r+0x1e8>
 8003c76:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003c7a:	f04f 0901 	mov.w	r9, #1
 8003c7e:	4623      	mov	r3, r4
 8003c80:	469a      	mov	sl, r3
 8003c82:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003c86:	b10a      	cbz	r2, 8003c8c <_svfiprintf_r+0x5c>
 8003c88:	2a25      	cmp	r2, #37	; 0x25
 8003c8a:	d1f9      	bne.n	8003c80 <_svfiprintf_r+0x50>
 8003c8c:	ebba 0b04 	subs.w	fp, sl, r4
 8003c90:	d00b      	beq.n	8003caa <_svfiprintf_r+0x7a>
 8003c92:	465b      	mov	r3, fp
 8003c94:	4622      	mov	r2, r4
 8003c96:	4629      	mov	r1, r5
 8003c98:	4638      	mov	r0, r7
 8003c9a:	f7ff ff6f 	bl	8003b7c <__ssputs_r>
 8003c9e:	3001      	adds	r0, #1
 8003ca0:	f000 80a9 	beq.w	8003df6 <_svfiprintf_r+0x1c6>
 8003ca4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003ca6:	445a      	add	r2, fp
 8003ca8:	9209      	str	r2, [sp, #36]	; 0x24
 8003caa:	f89a 3000 	ldrb.w	r3, [sl]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	f000 80a1 	beq.w	8003df6 <_svfiprintf_r+0x1c6>
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	f04f 32ff 	mov.w	r2, #4294967295
 8003cba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003cbe:	f10a 0a01 	add.w	sl, sl, #1
 8003cc2:	9304      	str	r3, [sp, #16]
 8003cc4:	9307      	str	r3, [sp, #28]
 8003cc6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003cca:	931a      	str	r3, [sp, #104]	; 0x68
 8003ccc:	4654      	mov	r4, sl
 8003cce:	2205      	movs	r2, #5
 8003cd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003cd4:	4850      	ldr	r0, [pc, #320]	; (8003e18 <_svfiprintf_r+0x1e8>)
 8003cd6:	f7fc fa9b 	bl	8000210 <memchr>
 8003cda:	9a04      	ldr	r2, [sp, #16]
 8003cdc:	b9d8      	cbnz	r0, 8003d16 <_svfiprintf_r+0xe6>
 8003cde:	06d0      	lsls	r0, r2, #27
 8003ce0:	bf44      	itt	mi
 8003ce2:	2320      	movmi	r3, #32
 8003ce4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003ce8:	0711      	lsls	r1, r2, #28
 8003cea:	bf44      	itt	mi
 8003cec:	232b      	movmi	r3, #43	; 0x2b
 8003cee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003cf2:	f89a 3000 	ldrb.w	r3, [sl]
 8003cf6:	2b2a      	cmp	r3, #42	; 0x2a
 8003cf8:	d015      	beq.n	8003d26 <_svfiprintf_r+0xf6>
 8003cfa:	9a07      	ldr	r2, [sp, #28]
 8003cfc:	4654      	mov	r4, sl
 8003cfe:	2000      	movs	r0, #0
 8003d00:	f04f 0c0a 	mov.w	ip, #10
 8003d04:	4621      	mov	r1, r4
 8003d06:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003d0a:	3b30      	subs	r3, #48	; 0x30
 8003d0c:	2b09      	cmp	r3, #9
 8003d0e:	d94d      	bls.n	8003dac <_svfiprintf_r+0x17c>
 8003d10:	b1b0      	cbz	r0, 8003d40 <_svfiprintf_r+0x110>
 8003d12:	9207      	str	r2, [sp, #28]
 8003d14:	e014      	b.n	8003d40 <_svfiprintf_r+0x110>
 8003d16:	eba0 0308 	sub.w	r3, r0, r8
 8003d1a:	fa09 f303 	lsl.w	r3, r9, r3
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	9304      	str	r3, [sp, #16]
 8003d22:	46a2      	mov	sl, r4
 8003d24:	e7d2      	b.n	8003ccc <_svfiprintf_r+0x9c>
 8003d26:	9b03      	ldr	r3, [sp, #12]
 8003d28:	1d19      	adds	r1, r3, #4
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	9103      	str	r1, [sp, #12]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	bfbb      	ittet	lt
 8003d32:	425b      	neglt	r3, r3
 8003d34:	f042 0202 	orrlt.w	r2, r2, #2
 8003d38:	9307      	strge	r3, [sp, #28]
 8003d3a:	9307      	strlt	r3, [sp, #28]
 8003d3c:	bfb8      	it	lt
 8003d3e:	9204      	strlt	r2, [sp, #16]
 8003d40:	7823      	ldrb	r3, [r4, #0]
 8003d42:	2b2e      	cmp	r3, #46	; 0x2e
 8003d44:	d10c      	bne.n	8003d60 <_svfiprintf_r+0x130>
 8003d46:	7863      	ldrb	r3, [r4, #1]
 8003d48:	2b2a      	cmp	r3, #42	; 0x2a
 8003d4a:	d134      	bne.n	8003db6 <_svfiprintf_r+0x186>
 8003d4c:	9b03      	ldr	r3, [sp, #12]
 8003d4e:	1d1a      	adds	r2, r3, #4
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	9203      	str	r2, [sp, #12]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	bfb8      	it	lt
 8003d58:	f04f 33ff 	movlt.w	r3, #4294967295
 8003d5c:	3402      	adds	r4, #2
 8003d5e:	9305      	str	r3, [sp, #20]
 8003d60:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8003e28 <_svfiprintf_r+0x1f8>
 8003d64:	7821      	ldrb	r1, [r4, #0]
 8003d66:	2203      	movs	r2, #3
 8003d68:	4650      	mov	r0, sl
 8003d6a:	f7fc fa51 	bl	8000210 <memchr>
 8003d6e:	b138      	cbz	r0, 8003d80 <_svfiprintf_r+0x150>
 8003d70:	9b04      	ldr	r3, [sp, #16]
 8003d72:	eba0 000a 	sub.w	r0, r0, sl
 8003d76:	2240      	movs	r2, #64	; 0x40
 8003d78:	4082      	lsls	r2, r0
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	3401      	adds	r4, #1
 8003d7e:	9304      	str	r3, [sp, #16]
 8003d80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d84:	4825      	ldr	r0, [pc, #148]	; (8003e1c <_svfiprintf_r+0x1ec>)
 8003d86:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003d8a:	2206      	movs	r2, #6
 8003d8c:	f7fc fa40 	bl	8000210 <memchr>
 8003d90:	2800      	cmp	r0, #0
 8003d92:	d038      	beq.n	8003e06 <_svfiprintf_r+0x1d6>
 8003d94:	4b22      	ldr	r3, [pc, #136]	; (8003e20 <_svfiprintf_r+0x1f0>)
 8003d96:	bb1b      	cbnz	r3, 8003de0 <_svfiprintf_r+0x1b0>
 8003d98:	9b03      	ldr	r3, [sp, #12]
 8003d9a:	3307      	adds	r3, #7
 8003d9c:	f023 0307 	bic.w	r3, r3, #7
 8003da0:	3308      	adds	r3, #8
 8003da2:	9303      	str	r3, [sp, #12]
 8003da4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003da6:	4433      	add	r3, r6
 8003da8:	9309      	str	r3, [sp, #36]	; 0x24
 8003daa:	e768      	b.n	8003c7e <_svfiprintf_r+0x4e>
 8003dac:	fb0c 3202 	mla	r2, ip, r2, r3
 8003db0:	460c      	mov	r4, r1
 8003db2:	2001      	movs	r0, #1
 8003db4:	e7a6      	b.n	8003d04 <_svfiprintf_r+0xd4>
 8003db6:	2300      	movs	r3, #0
 8003db8:	3401      	adds	r4, #1
 8003dba:	9305      	str	r3, [sp, #20]
 8003dbc:	4619      	mov	r1, r3
 8003dbe:	f04f 0c0a 	mov.w	ip, #10
 8003dc2:	4620      	mov	r0, r4
 8003dc4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003dc8:	3a30      	subs	r2, #48	; 0x30
 8003dca:	2a09      	cmp	r2, #9
 8003dcc:	d903      	bls.n	8003dd6 <_svfiprintf_r+0x1a6>
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d0c6      	beq.n	8003d60 <_svfiprintf_r+0x130>
 8003dd2:	9105      	str	r1, [sp, #20]
 8003dd4:	e7c4      	b.n	8003d60 <_svfiprintf_r+0x130>
 8003dd6:	fb0c 2101 	mla	r1, ip, r1, r2
 8003dda:	4604      	mov	r4, r0
 8003ddc:	2301      	movs	r3, #1
 8003dde:	e7f0      	b.n	8003dc2 <_svfiprintf_r+0x192>
 8003de0:	ab03      	add	r3, sp, #12
 8003de2:	9300      	str	r3, [sp, #0]
 8003de4:	462a      	mov	r2, r5
 8003de6:	4b0f      	ldr	r3, [pc, #60]	; (8003e24 <_svfiprintf_r+0x1f4>)
 8003de8:	a904      	add	r1, sp, #16
 8003dea:	4638      	mov	r0, r7
 8003dec:	f3af 8000 	nop.w
 8003df0:	1c42      	adds	r2, r0, #1
 8003df2:	4606      	mov	r6, r0
 8003df4:	d1d6      	bne.n	8003da4 <_svfiprintf_r+0x174>
 8003df6:	89ab      	ldrh	r3, [r5, #12]
 8003df8:	065b      	lsls	r3, r3, #25
 8003dfa:	f53f af2d 	bmi.w	8003c58 <_svfiprintf_r+0x28>
 8003dfe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003e00:	b01d      	add	sp, #116	; 0x74
 8003e02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e06:	ab03      	add	r3, sp, #12
 8003e08:	9300      	str	r3, [sp, #0]
 8003e0a:	462a      	mov	r2, r5
 8003e0c:	4b05      	ldr	r3, [pc, #20]	; (8003e24 <_svfiprintf_r+0x1f4>)
 8003e0e:	a904      	add	r1, sp, #16
 8003e10:	4638      	mov	r0, r7
 8003e12:	f000 f879 	bl	8003f08 <_printf_i>
 8003e16:	e7eb      	b.n	8003df0 <_svfiprintf_r+0x1c0>
 8003e18:	080042b0 	.word	0x080042b0
 8003e1c:	080042ba 	.word	0x080042ba
 8003e20:	00000000 	.word	0x00000000
 8003e24:	08003b7d 	.word	0x08003b7d
 8003e28:	080042b6 	.word	0x080042b6

08003e2c <_printf_common>:
 8003e2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e30:	4616      	mov	r6, r2
 8003e32:	4699      	mov	r9, r3
 8003e34:	688a      	ldr	r2, [r1, #8]
 8003e36:	690b      	ldr	r3, [r1, #16]
 8003e38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	bfb8      	it	lt
 8003e40:	4613      	movlt	r3, r2
 8003e42:	6033      	str	r3, [r6, #0]
 8003e44:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003e48:	4607      	mov	r7, r0
 8003e4a:	460c      	mov	r4, r1
 8003e4c:	b10a      	cbz	r2, 8003e52 <_printf_common+0x26>
 8003e4e:	3301      	adds	r3, #1
 8003e50:	6033      	str	r3, [r6, #0]
 8003e52:	6823      	ldr	r3, [r4, #0]
 8003e54:	0699      	lsls	r1, r3, #26
 8003e56:	bf42      	ittt	mi
 8003e58:	6833      	ldrmi	r3, [r6, #0]
 8003e5a:	3302      	addmi	r3, #2
 8003e5c:	6033      	strmi	r3, [r6, #0]
 8003e5e:	6825      	ldr	r5, [r4, #0]
 8003e60:	f015 0506 	ands.w	r5, r5, #6
 8003e64:	d106      	bne.n	8003e74 <_printf_common+0x48>
 8003e66:	f104 0a19 	add.w	sl, r4, #25
 8003e6a:	68e3      	ldr	r3, [r4, #12]
 8003e6c:	6832      	ldr	r2, [r6, #0]
 8003e6e:	1a9b      	subs	r3, r3, r2
 8003e70:	42ab      	cmp	r3, r5
 8003e72:	dc26      	bgt.n	8003ec2 <_printf_common+0x96>
 8003e74:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003e78:	1e13      	subs	r3, r2, #0
 8003e7a:	6822      	ldr	r2, [r4, #0]
 8003e7c:	bf18      	it	ne
 8003e7e:	2301      	movne	r3, #1
 8003e80:	0692      	lsls	r2, r2, #26
 8003e82:	d42b      	bmi.n	8003edc <_printf_common+0xb0>
 8003e84:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003e88:	4649      	mov	r1, r9
 8003e8a:	4638      	mov	r0, r7
 8003e8c:	47c0      	blx	r8
 8003e8e:	3001      	adds	r0, #1
 8003e90:	d01e      	beq.n	8003ed0 <_printf_common+0xa4>
 8003e92:	6823      	ldr	r3, [r4, #0]
 8003e94:	6922      	ldr	r2, [r4, #16]
 8003e96:	f003 0306 	and.w	r3, r3, #6
 8003e9a:	2b04      	cmp	r3, #4
 8003e9c:	bf02      	ittt	eq
 8003e9e:	68e5      	ldreq	r5, [r4, #12]
 8003ea0:	6833      	ldreq	r3, [r6, #0]
 8003ea2:	1aed      	subeq	r5, r5, r3
 8003ea4:	68a3      	ldr	r3, [r4, #8]
 8003ea6:	bf0c      	ite	eq
 8003ea8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003eac:	2500      	movne	r5, #0
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	bfc4      	itt	gt
 8003eb2:	1a9b      	subgt	r3, r3, r2
 8003eb4:	18ed      	addgt	r5, r5, r3
 8003eb6:	2600      	movs	r6, #0
 8003eb8:	341a      	adds	r4, #26
 8003eba:	42b5      	cmp	r5, r6
 8003ebc:	d11a      	bne.n	8003ef4 <_printf_common+0xc8>
 8003ebe:	2000      	movs	r0, #0
 8003ec0:	e008      	b.n	8003ed4 <_printf_common+0xa8>
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	4652      	mov	r2, sl
 8003ec6:	4649      	mov	r1, r9
 8003ec8:	4638      	mov	r0, r7
 8003eca:	47c0      	blx	r8
 8003ecc:	3001      	adds	r0, #1
 8003ece:	d103      	bne.n	8003ed8 <_printf_common+0xac>
 8003ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ed4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ed8:	3501      	adds	r5, #1
 8003eda:	e7c6      	b.n	8003e6a <_printf_common+0x3e>
 8003edc:	18e1      	adds	r1, r4, r3
 8003ede:	1c5a      	adds	r2, r3, #1
 8003ee0:	2030      	movs	r0, #48	; 0x30
 8003ee2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003ee6:	4422      	add	r2, r4
 8003ee8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003eec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003ef0:	3302      	adds	r3, #2
 8003ef2:	e7c7      	b.n	8003e84 <_printf_common+0x58>
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	4622      	mov	r2, r4
 8003ef8:	4649      	mov	r1, r9
 8003efa:	4638      	mov	r0, r7
 8003efc:	47c0      	blx	r8
 8003efe:	3001      	adds	r0, #1
 8003f00:	d0e6      	beq.n	8003ed0 <_printf_common+0xa4>
 8003f02:	3601      	adds	r6, #1
 8003f04:	e7d9      	b.n	8003eba <_printf_common+0x8e>
	...

08003f08 <_printf_i>:
 8003f08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003f0c:	7e0f      	ldrb	r7, [r1, #24]
 8003f0e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003f10:	2f78      	cmp	r7, #120	; 0x78
 8003f12:	4691      	mov	r9, r2
 8003f14:	4680      	mov	r8, r0
 8003f16:	460c      	mov	r4, r1
 8003f18:	469a      	mov	sl, r3
 8003f1a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003f1e:	d807      	bhi.n	8003f30 <_printf_i+0x28>
 8003f20:	2f62      	cmp	r7, #98	; 0x62
 8003f22:	d80a      	bhi.n	8003f3a <_printf_i+0x32>
 8003f24:	2f00      	cmp	r7, #0
 8003f26:	f000 80d4 	beq.w	80040d2 <_printf_i+0x1ca>
 8003f2a:	2f58      	cmp	r7, #88	; 0x58
 8003f2c:	f000 80c0 	beq.w	80040b0 <_printf_i+0x1a8>
 8003f30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f34:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003f38:	e03a      	b.n	8003fb0 <_printf_i+0xa8>
 8003f3a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003f3e:	2b15      	cmp	r3, #21
 8003f40:	d8f6      	bhi.n	8003f30 <_printf_i+0x28>
 8003f42:	a101      	add	r1, pc, #4	; (adr r1, 8003f48 <_printf_i+0x40>)
 8003f44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003f48:	08003fa1 	.word	0x08003fa1
 8003f4c:	08003fb5 	.word	0x08003fb5
 8003f50:	08003f31 	.word	0x08003f31
 8003f54:	08003f31 	.word	0x08003f31
 8003f58:	08003f31 	.word	0x08003f31
 8003f5c:	08003f31 	.word	0x08003f31
 8003f60:	08003fb5 	.word	0x08003fb5
 8003f64:	08003f31 	.word	0x08003f31
 8003f68:	08003f31 	.word	0x08003f31
 8003f6c:	08003f31 	.word	0x08003f31
 8003f70:	08003f31 	.word	0x08003f31
 8003f74:	080040b9 	.word	0x080040b9
 8003f78:	08003fe1 	.word	0x08003fe1
 8003f7c:	08004073 	.word	0x08004073
 8003f80:	08003f31 	.word	0x08003f31
 8003f84:	08003f31 	.word	0x08003f31
 8003f88:	080040db 	.word	0x080040db
 8003f8c:	08003f31 	.word	0x08003f31
 8003f90:	08003fe1 	.word	0x08003fe1
 8003f94:	08003f31 	.word	0x08003f31
 8003f98:	08003f31 	.word	0x08003f31
 8003f9c:	0800407b 	.word	0x0800407b
 8003fa0:	682b      	ldr	r3, [r5, #0]
 8003fa2:	1d1a      	adds	r2, r3, #4
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	602a      	str	r2, [r5, #0]
 8003fa8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003fac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	e09f      	b.n	80040f4 <_printf_i+0x1ec>
 8003fb4:	6820      	ldr	r0, [r4, #0]
 8003fb6:	682b      	ldr	r3, [r5, #0]
 8003fb8:	0607      	lsls	r7, r0, #24
 8003fba:	f103 0104 	add.w	r1, r3, #4
 8003fbe:	6029      	str	r1, [r5, #0]
 8003fc0:	d501      	bpl.n	8003fc6 <_printf_i+0xbe>
 8003fc2:	681e      	ldr	r6, [r3, #0]
 8003fc4:	e003      	b.n	8003fce <_printf_i+0xc6>
 8003fc6:	0646      	lsls	r6, r0, #25
 8003fc8:	d5fb      	bpl.n	8003fc2 <_printf_i+0xba>
 8003fca:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003fce:	2e00      	cmp	r6, #0
 8003fd0:	da03      	bge.n	8003fda <_printf_i+0xd2>
 8003fd2:	232d      	movs	r3, #45	; 0x2d
 8003fd4:	4276      	negs	r6, r6
 8003fd6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003fda:	485a      	ldr	r0, [pc, #360]	; (8004144 <_printf_i+0x23c>)
 8003fdc:	230a      	movs	r3, #10
 8003fde:	e012      	b.n	8004006 <_printf_i+0xfe>
 8003fe0:	682b      	ldr	r3, [r5, #0]
 8003fe2:	6820      	ldr	r0, [r4, #0]
 8003fe4:	1d19      	adds	r1, r3, #4
 8003fe6:	6029      	str	r1, [r5, #0]
 8003fe8:	0605      	lsls	r5, r0, #24
 8003fea:	d501      	bpl.n	8003ff0 <_printf_i+0xe8>
 8003fec:	681e      	ldr	r6, [r3, #0]
 8003fee:	e002      	b.n	8003ff6 <_printf_i+0xee>
 8003ff0:	0641      	lsls	r1, r0, #25
 8003ff2:	d5fb      	bpl.n	8003fec <_printf_i+0xe4>
 8003ff4:	881e      	ldrh	r6, [r3, #0]
 8003ff6:	4853      	ldr	r0, [pc, #332]	; (8004144 <_printf_i+0x23c>)
 8003ff8:	2f6f      	cmp	r7, #111	; 0x6f
 8003ffa:	bf0c      	ite	eq
 8003ffc:	2308      	moveq	r3, #8
 8003ffe:	230a      	movne	r3, #10
 8004000:	2100      	movs	r1, #0
 8004002:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004006:	6865      	ldr	r5, [r4, #4]
 8004008:	60a5      	str	r5, [r4, #8]
 800400a:	2d00      	cmp	r5, #0
 800400c:	bfa2      	ittt	ge
 800400e:	6821      	ldrge	r1, [r4, #0]
 8004010:	f021 0104 	bicge.w	r1, r1, #4
 8004014:	6021      	strge	r1, [r4, #0]
 8004016:	b90e      	cbnz	r6, 800401c <_printf_i+0x114>
 8004018:	2d00      	cmp	r5, #0
 800401a:	d04b      	beq.n	80040b4 <_printf_i+0x1ac>
 800401c:	4615      	mov	r5, r2
 800401e:	fbb6 f1f3 	udiv	r1, r6, r3
 8004022:	fb03 6711 	mls	r7, r3, r1, r6
 8004026:	5dc7      	ldrb	r7, [r0, r7]
 8004028:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800402c:	4637      	mov	r7, r6
 800402e:	42bb      	cmp	r3, r7
 8004030:	460e      	mov	r6, r1
 8004032:	d9f4      	bls.n	800401e <_printf_i+0x116>
 8004034:	2b08      	cmp	r3, #8
 8004036:	d10b      	bne.n	8004050 <_printf_i+0x148>
 8004038:	6823      	ldr	r3, [r4, #0]
 800403a:	07de      	lsls	r6, r3, #31
 800403c:	d508      	bpl.n	8004050 <_printf_i+0x148>
 800403e:	6923      	ldr	r3, [r4, #16]
 8004040:	6861      	ldr	r1, [r4, #4]
 8004042:	4299      	cmp	r1, r3
 8004044:	bfde      	ittt	le
 8004046:	2330      	movle	r3, #48	; 0x30
 8004048:	f805 3c01 	strble.w	r3, [r5, #-1]
 800404c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004050:	1b52      	subs	r2, r2, r5
 8004052:	6122      	str	r2, [r4, #16]
 8004054:	f8cd a000 	str.w	sl, [sp]
 8004058:	464b      	mov	r3, r9
 800405a:	aa03      	add	r2, sp, #12
 800405c:	4621      	mov	r1, r4
 800405e:	4640      	mov	r0, r8
 8004060:	f7ff fee4 	bl	8003e2c <_printf_common>
 8004064:	3001      	adds	r0, #1
 8004066:	d14a      	bne.n	80040fe <_printf_i+0x1f6>
 8004068:	f04f 30ff 	mov.w	r0, #4294967295
 800406c:	b004      	add	sp, #16
 800406e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004072:	6823      	ldr	r3, [r4, #0]
 8004074:	f043 0320 	orr.w	r3, r3, #32
 8004078:	6023      	str	r3, [r4, #0]
 800407a:	4833      	ldr	r0, [pc, #204]	; (8004148 <_printf_i+0x240>)
 800407c:	2778      	movs	r7, #120	; 0x78
 800407e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004082:	6823      	ldr	r3, [r4, #0]
 8004084:	6829      	ldr	r1, [r5, #0]
 8004086:	061f      	lsls	r7, r3, #24
 8004088:	f851 6b04 	ldr.w	r6, [r1], #4
 800408c:	d402      	bmi.n	8004094 <_printf_i+0x18c>
 800408e:	065f      	lsls	r7, r3, #25
 8004090:	bf48      	it	mi
 8004092:	b2b6      	uxthmi	r6, r6
 8004094:	07df      	lsls	r7, r3, #31
 8004096:	bf48      	it	mi
 8004098:	f043 0320 	orrmi.w	r3, r3, #32
 800409c:	6029      	str	r1, [r5, #0]
 800409e:	bf48      	it	mi
 80040a0:	6023      	strmi	r3, [r4, #0]
 80040a2:	b91e      	cbnz	r6, 80040ac <_printf_i+0x1a4>
 80040a4:	6823      	ldr	r3, [r4, #0]
 80040a6:	f023 0320 	bic.w	r3, r3, #32
 80040aa:	6023      	str	r3, [r4, #0]
 80040ac:	2310      	movs	r3, #16
 80040ae:	e7a7      	b.n	8004000 <_printf_i+0xf8>
 80040b0:	4824      	ldr	r0, [pc, #144]	; (8004144 <_printf_i+0x23c>)
 80040b2:	e7e4      	b.n	800407e <_printf_i+0x176>
 80040b4:	4615      	mov	r5, r2
 80040b6:	e7bd      	b.n	8004034 <_printf_i+0x12c>
 80040b8:	682b      	ldr	r3, [r5, #0]
 80040ba:	6826      	ldr	r6, [r4, #0]
 80040bc:	6961      	ldr	r1, [r4, #20]
 80040be:	1d18      	adds	r0, r3, #4
 80040c0:	6028      	str	r0, [r5, #0]
 80040c2:	0635      	lsls	r5, r6, #24
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	d501      	bpl.n	80040cc <_printf_i+0x1c4>
 80040c8:	6019      	str	r1, [r3, #0]
 80040ca:	e002      	b.n	80040d2 <_printf_i+0x1ca>
 80040cc:	0670      	lsls	r0, r6, #25
 80040ce:	d5fb      	bpl.n	80040c8 <_printf_i+0x1c0>
 80040d0:	8019      	strh	r1, [r3, #0]
 80040d2:	2300      	movs	r3, #0
 80040d4:	6123      	str	r3, [r4, #16]
 80040d6:	4615      	mov	r5, r2
 80040d8:	e7bc      	b.n	8004054 <_printf_i+0x14c>
 80040da:	682b      	ldr	r3, [r5, #0]
 80040dc:	1d1a      	adds	r2, r3, #4
 80040de:	602a      	str	r2, [r5, #0]
 80040e0:	681d      	ldr	r5, [r3, #0]
 80040e2:	6862      	ldr	r2, [r4, #4]
 80040e4:	2100      	movs	r1, #0
 80040e6:	4628      	mov	r0, r5
 80040e8:	f7fc f892 	bl	8000210 <memchr>
 80040ec:	b108      	cbz	r0, 80040f2 <_printf_i+0x1ea>
 80040ee:	1b40      	subs	r0, r0, r5
 80040f0:	6060      	str	r0, [r4, #4]
 80040f2:	6863      	ldr	r3, [r4, #4]
 80040f4:	6123      	str	r3, [r4, #16]
 80040f6:	2300      	movs	r3, #0
 80040f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80040fc:	e7aa      	b.n	8004054 <_printf_i+0x14c>
 80040fe:	6923      	ldr	r3, [r4, #16]
 8004100:	462a      	mov	r2, r5
 8004102:	4649      	mov	r1, r9
 8004104:	4640      	mov	r0, r8
 8004106:	47d0      	blx	sl
 8004108:	3001      	adds	r0, #1
 800410a:	d0ad      	beq.n	8004068 <_printf_i+0x160>
 800410c:	6823      	ldr	r3, [r4, #0]
 800410e:	079b      	lsls	r3, r3, #30
 8004110:	d413      	bmi.n	800413a <_printf_i+0x232>
 8004112:	68e0      	ldr	r0, [r4, #12]
 8004114:	9b03      	ldr	r3, [sp, #12]
 8004116:	4298      	cmp	r0, r3
 8004118:	bfb8      	it	lt
 800411a:	4618      	movlt	r0, r3
 800411c:	e7a6      	b.n	800406c <_printf_i+0x164>
 800411e:	2301      	movs	r3, #1
 8004120:	4632      	mov	r2, r6
 8004122:	4649      	mov	r1, r9
 8004124:	4640      	mov	r0, r8
 8004126:	47d0      	blx	sl
 8004128:	3001      	adds	r0, #1
 800412a:	d09d      	beq.n	8004068 <_printf_i+0x160>
 800412c:	3501      	adds	r5, #1
 800412e:	68e3      	ldr	r3, [r4, #12]
 8004130:	9903      	ldr	r1, [sp, #12]
 8004132:	1a5b      	subs	r3, r3, r1
 8004134:	42ab      	cmp	r3, r5
 8004136:	dcf2      	bgt.n	800411e <_printf_i+0x216>
 8004138:	e7eb      	b.n	8004112 <_printf_i+0x20a>
 800413a:	2500      	movs	r5, #0
 800413c:	f104 0619 	add.w	r6, r4, #25
 8004140:	e7f5      	b.n	800412e <_printf_i+0x226>
 8004142:	bf00      	nop
 8004144:	080042c1 	.word	0x080042c1
 8004148:	080042d2 	.word	0x080042d2

0800414c <memmove>:
 800414c:	4288      	cmp	r0, r1
 800414e:	b510      	push	{r4, lr}
 8004150:	eb01 0402 	add.w	r4, r1, r2
 8004154:	d902      	bls.n	800415c <memmove+0x10>
 8004156:	4284      	cmp	r4, r0
 8004158:	4623      	mov	r3, r4
 800415a:	d807      	bhi.n	800416c <memmove+0x20>
 800415c:	1e43      	subs	r3, r0, #1
 800415e:	42a1      	cmp	r1, r4
 8004160:	d008      	beq.n	8004174 <memmove+0x28>
 8004162:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004166:	f803 2f01 	strb.w	r2, [r3, #1]!
 800416a:	e7f8      	b.n	800415e <memmove+0x12>
 800416c:	4402      	add	r2, r0
 800416e:	4601      	mov	r1, r0
 8004170:	428a      	cmp	r2, r1
 8004172:	d100      	bne.n	8004176 <memmove+0x2a>
 8004174:	bd10      	pop	{r4, pc}
 8004176:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800417a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800417e:	e7f7      	b.n	8004170 <memmove+0x24>

08004180 <_sbrk_r>:
 8004180:	b538      	push	{r3, r4, r5, lr}
 8004182:	4d06      	ldr	r5, [pc, #24]	; (800419c <_sbrk_r+0x1c>)
 8004184:	2300      	movs	r3, #0
 8004186:	4604      	mov	r4, r0
 8004188:	4608      	mov	r0, r1
 800418a:	602b      	str	r3, [r5, #0]
 800418c:	f7fd f9aa 	bl	80014e4 <_sbrk>
 8004190:	1c43      	adds	r3, r0, #1
 8004192:	d102      	bne.n	800419a <_sbrk_r+0x1a>
 8004194:	682b      	ldr	r3, [r5, #0]
 8004196:	b103      	cbz	r3, 800419a <_sbrk_r+0x1a>
 8004198:	6023      	str	r3, [r4, #0]
 800419a:	bd38      	pop	{r3, r4, r5, pc}
 800419c:	2000025c 	.word	0x2000025c

080041a0 <memcpy>:
 80041a0:	440a      	add	r2, r1
 80041a2:	4291      	cmp	r1, r2
 80041a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80041a8:	d100      	bne.n	80041ac <memcpy+0xc>
 80041aa:	4770      	bx	lr
 80041ac:	b510      	push	{r4, lr}
 80041ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80041b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80041b6:	4291      	cmp	r1, r2
 80041b8:	d1f9      	bne.n	80041ae <memcpy+0xe>
 80041ba:	bd10      	pop	{r4, pc}

080041bc <_realloc_r>:
 80041bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041c0:	4680      	mov	r8, r0
 80041c2:	4614      	mov	r4, r2
 80041c4:	460e      	mov	r6, r1
 80041c6:	b921      	cbnz	r1, 80041d2 <_realloc_r+0x16>
 80041c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80041cc:	4611      	mov	r1, r2
 80041ce:	f7ff bc49 	b.w	8003a64 <_malloc_r>
 80041d2:	b92a      	cbnz	r2, 80041e0 <_realloc_r+0x24>
 80041d4:	f7ff fbda 	bl	800398c <_free_r>
 80041d8:	4625      	mov	r5, r4
 80041da:	4628      	mov	r0, r5
 80041dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80041e0:	f000 f81b 	bl	800421a <_malloc_usable_size_r>
 80041e4:	4284      	cmp	r4, r0
 80041e6:	4607      	mov	r7, r0
 80041e8:	d802      	bhi.n	80041f0 <_realloc_r+0x34>
 80041ea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80041ee:	d812      	bhi.n	8004216 <_realloc_r+0x5a>
 80041f0:	4621      	mov	r1, r4
 80041f2:	4640      	mov	r0, r8
 80041f4:	f7ff fc36 	bl	8003a64 <_malloc_r>
 80041f8:	4605      	mov	r5, r0
 80041fa:	2800      	cmp	r0, #0
 80041fc:	d0ed      	beq.n	80041da <_realloc_r+0x1e>
 80041fe:	42bc      	cmp	r4, r7
 8004200:	4622      	mov	r2, r4
 8004202:	4631      	mov	r1, r6
 8004204:	bf28      	it	cs
 8004206:	463a      	movcs	r2, r7
 8004208:	f7ff ffca 	bl	80041a0 <memcpy>
 800420c:	4631      	mov	r1, r6
 800420e:	4640      	mov	r0, r8
 8004210:	f7ff fbbc 	bl	800398c <_free_r>
 8004214:	e7e1      	b.n	80041da <_realloc_r+0x1e>
 8004216:	4635      	mov	r5, r6
 8004218:	e7df      	b.n	80041da <_realloc_r+0x1e>

0800421a <_malloc_usable_size_r>:
 800421a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800421e:	1f18      	subs	r0, r3, #4
 8004220:	2b00      	cmp	r3, #0
 8004222:	bfbc      	itt	lt
 8004224:	580b      	ldrlt	r3, [r1, r0]
 8004226:	18c0      	addlt	r0, r0, r3
 8004228:	4770      	bx	lr
	...

0800422c <_init>:
 800422c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800422e:	bf00      	nop
 8004230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004232:	bc08      	pop	{r3}
 8004234:	469e      	mov	lr, r3
 8004236:	4770      	bx	lr

08004238 <_fini>:
 8004238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800423a:	bf00      	nop
 800423c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800423e:	bc08      	pop	{r3}
 8004240:	469e      	mov	lr, r3
 8004242:	4770      	bx	lr
