
wheelencodercpp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000085ac  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000324  08008774  08008774  00018774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a98  08008a98  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08008a98  08008a98  00018a98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008aa0  08008aa0  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08008aa0  08008aa0  00018aa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008aa8  08008aa8  00018aa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08008aac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d18  20000060  08008b08  00020060  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000d78  08008b08  00020d78  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015a6e  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ade  00000000  00000000  00035b3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fb0  00000000  00000000  00038620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c4f  00000000  00000000  000395d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000232d5  00000000  00000000  0003a21f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000130a6  00000000  00000000  0005d4f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d7440  00000000  00000000  0007059a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000479c  00000000  00000000  001479dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  0014c178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000060 	.word	0x20000060
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800875c 	.word	0x0800875c

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000064 	.word	0x20000064
 8000204:	0800875c 	.word	0x0800875c

08000208 <strlen>:
 8000208:	4603      	mov	r3, r0
 800020a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020e:	2a00      	cmp	r2, #0
 8000210:	d1fb      	bne.n	800020a <strlen+0x2>
 8000212:	1a18      	subs	r0, r3, r0
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2iz>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009bc:	d215      	bcs.n	80009ea <__aeabi_d2iz+0x36>
 80009be:	d511      	bpl.n	80009e4 <__aeabi_d2iz+0x30>
 80009c0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d912      	bls.n	80009f0 <__aeabi_d2iz+0x3c>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009da:	fa23 f002 	lsr.w	r0, r3, r2
 80009de:	bf18      	it	ne
 80009e0:	4240      	negne	r0, r0
 80009e2:	4770      	bx	lr
 80009e4:	f04f 0000 	mov.w	r0, #0
 80009e8:	4770      	bx	lr
 80009ea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ee:	d105      	bne.n	80009fc <__aeabi_d2iz+0x48>
 80009f0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009f4:	bf08      	it	eq
 80009f6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009fa:	4770      	bx	lr
 80009fc:	f04f 0000 	mov.w	r0, #0
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_d2f>:
 8000a04:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a08:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a0c:	bf24      	itt	cs
 8000a0e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a12:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a16:	d90d      	bls.n	8000a34 <__aeabi_d2f+0x30>
 8000a18:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a1c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a20:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a24:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a28:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a2c:	bf08      	it	eq
 8000a2e:	f020 0001 	biceq.w	r0, r0, #1
 8000a32:	4770      	bx	lr
 8000a34:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a38:	d121      	bne.n	8000a7e <__aeabi_d2f+0x7a>
 8000a3a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a3e:	bfbc      	itt	lt
 8000a40:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a44:	4770      	bxlt	lr
 8000a46:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a4a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a4e:	f1c2 0218 	rsb	r2, r2, #24
 8000a52:	f1c2 0c20 	rsb	ip, r2, #32
 8000a56:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a5a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a5e:	bf18      	it	ne
 8000a60:	f040 0001 	orrne.w	r0, r0, #1
 8000a64:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a68:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a6c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a70:	ea40 000c 	orr.w	r0, r0, ip
 8000a74:	fa23 f302 	lsr.w	r3, r3, r2
 8000a78:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a7c:	e7cc      	b.n	8000a18 <__aeabi_d2f+0x14>
 8000a7e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a82:	d107      	bne.n	8000a94 <__aeabi_d2f+0x90>
 8000a84:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a88:	bf1e      	ittt	ne
 8000a8a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a8e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a92:	4770      	bxne	lr
 8000a94:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_uldivmod>:
 8000aa4:	b953      	cbnz	r3, 8000abc <__aeabi_uldivmod+0x18>
 8000aa6:	b94a      	cbnz	r2, 8000abc <__aeabi_uldivmod+0x18>
 8000aa8:	2900      	cmp	r1, #0
 8000aaa:	bf08      	it	eq
 8000aac:	2800      	cmpeq	r0, #0
 8000aae:	bf1c      	itt	ne
 8000ab0:	f04f 31ff 	movne.w	r1, #4294967295
 8000ab4:	f04f 30ff 	movne.w	r0, #4294967295
 8000ab8:	f000 b970 	b.w	8000d9c <__aeabi_idiv0>
 8000abc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ac0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ac4:	f000 f806 	bl	8000ad4 <__udivmoddi4>
 8000ac8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000acc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad0:	b004      	add	sp, #16
 8000ad2:	4770      	bx	lr

08000ad4 <__udivmoddi4>:
 8000ad4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ad8:	9e08      	ldr	r6, [sp, #32]
 8000ada:	460d      	mov	r5, r1
 8000adc:	4604      	mov	r4, r0
 8000ade:	460f      	mov	r7, r1
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d14a      	bne.n	8000b7a <__udivmoddi4+0xa6>
 8000ae4:	428a      	cmp	r2, r1
 8000ae6:	4694      	mov	ip, r2
 8000ae8:	d965      	bls.n	8000bb6 <__udivmoddi4+0xe2>
 8000aea:	fab2 f382 	clz	r3, r2
 8000aee:	b143      	cbz	r3, 8000b02 <__udivmoddi4+0x2e>
 8000af0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000af4:	f1c3 0220 	rsb	r2, r3, #32
 8000af8:	409f      	lsls	r7, r3
 8000afa:	fa20 f202 	lsr.w	r2, r0, r2
 8000afe:	4317      	orrs	r7, r2
 8000b00:	409c      	lsls	r4, r3
 8000b02:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b06:	fa1f f58c 	uxth.w	r5, ip
 8000b0a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000b0e:	0c22      	lsrs	r2, r4, #16
 8000b10:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b14:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b18:	fb01 f005 	mul.w	r0, r1, r5
 8000b1c:	4290      	cmp	r0, r2
 8000b1e:	d90a      	bls.n	8000b36 <__udivmoddi4+0x62>
 8000b20:	eb1c 0202 	adds.w	r2, ip, r2
 8000b24:	f101 37ff 	add.w	r7, r1, #4294967295
 8000b28:	f080 811c 	bcs.w	8000d64 <__udivmoddi4+0x290>
 8000b2c:	4290      	cmp	r0, r2
 8000b2e:	f240 8119 	bls.w	8000d64 <__udivmoddi4+0x290>
 8000b32:	3902      	subs	r1, #2
 8000b34:	4462      	add	r2, ip
 8000b36:	1a12      	subs	r2, r2, r0
 8000b38:	b2a4      	uxth	r4, r4
 8000b3a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b3e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b42:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b46:	fb00 f505 	mul.w	r5, r0, r5
 8000b4a:	42a5      	cmp	r5, r4
 8000b4c:	d90a      	bls.n	8000b64 <__udivmoddi4+0x90>
 8000b4e:	eb1c 0404 	adds.w	r4, ip, r4
 8000b52:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b56:	f080 8107 	bcs.w	8000d68 <__udivmoddi4+0x294>
 8000b5a:	42a5      	cmp	r5, r4
 8000b5c:	f240 8104 	bls.w	8000d68 <__udivmoddi4+0x294>
 8000b60:	4464      	add	r4, ip
 8000b62:	3802      	subs	r0, #2
 8000b64:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b68:	1b64      	subs	r4, r4, r5
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	b11e      	cbz	r6, 8000b76 <__udivmoddi4+0xa2>
 8000b6e:	40dc      	lsrs	r4, r3
 8000b70:	2300      	movs	r3, #0
 8000b72:	e9c6 4300 	strd	r4, r3, [r6]
 8000b76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b7a:	428b      	cmp	r3, r1
 8000b7c:	d908      	bls.n	8000b90 <__udivmoddi4+0xbc>
 8000b7e:	2e00      	cmp	r6, #0
 8000b80:	f000 80ed 	beq.w	8000d5e <__udivmoddi4+0x28a>
 8000b84:	2100      	movs	r1, #0
 8000b86:	e9c6 0500 	strd	r0, r5, [r6]
 8000b8a:	4608      	mov	r0, r1
 8000b8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b90:	fab3 f183 	clz	r1, r3
 8000b94:	2900      	cmp	r1, #0
 8000b96:	d149      	bne.n	8000c2c <__udivmoddi4+0x158>
 8000b98:	42ab      	cmp	r3, r5
 8000b9a:	d302      	bcc.n	8000ba2 <__udivmoddi4+0xce>
 8000b9c:	4282      	cmp	r2, r0
 8000b9e:	f200 80f8 	bhi.w	8000d92 <__udivmoddi4+0x2be>
 8000ba2:	1a84      	subs	r4, r0, r2
 8000ba4:	eb65 0203 	sbc.w	r2, r5, r3
 8000ba8:	2001      	movs	r0, #1
 8000baa:	4617      	mov	r7, r2
 8000bac:	2e00      	cmp	r6, #0
 8000bae:	d0e2      	beq.n	8000b76 <__udivmoddi4+0xa2>
 8000bb0:	e9c6 4700 	strd	r4, r7, [r6]
 8000bb4:	e7df      	b.n	8000b76 <__udivmoddi4+0xa2>
 8000bb6:	b902      	cbnz	r2, 8000bba <__udivmoddi4+0xe6>
 8000bb8:	deff      	udf	#255	; 0xff
 8000bba:	fab2 f382 	clz	r3, r2
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	f040 8090 	bne.w	8000ce4 <__udivmoddi4+0x210>
 8000bc4:	1a8a      	subs	r2, r1, r2
 8000bc6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bca:	fa1f fe8c 	uxth.w	lr, ip
 8000bce:	2101      	movs	r1, #1
 8000bd0:	fbb2 f5f7 	udiv	r5, r2, r7
 8000bd4:	fb07 2015 	mls	r0, r7, r5, r2
 8000bd8:	0c22      	lsrs	r2, r4, #16
 8000bda:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000bde:	fb0e f005 	mul.w	r0, lr, r5
 8000be2:	4290      	cmp	r0, r2
 8000be4:	d908      	bls.n	8000bf8 <__udivmoddi4+0x124>
 8000be6:	eb1c 0202 	adds.w	r2, ip, r2
 8000bea:	f105 38ff 	add.w	r8, r5, #4294967295
 8000bee:	d202      	bcs.n	8000bf6 <__udivmoddi4+0x122>
 8000bf0:	4290      	cmp	r0, r2
 8000bf2:	f200 80cb 	bhi.w	8000d8c <__udivmoddi4+0x2b8>
 8000bf6:	4645      	mov	r5, r8
 8000bf8:	1a12      	subs	r2, r2, r0
 8000bfa:	b2a4      	uxth	r4, r4
 8000bfc:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c00:	fb07 2210 	mls	r2, r7, r0, r2
 8000c04:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c08:	fb0e fe00 	mul.w	lr, lr, r0
 8000c0c:	45a6      	cmp	lr, r4
 8000c0e:	d908      	bls.n	8000c22 <__udivmoddi4+0x14e>
 8000c10:	eb1c 0404 	adds.w	r4, ip, r4
 8000c14:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c18:	d202      	bcs.n	8000c20 <__udivmoddi4+0x14c>
 8000c1a:	45a6      	cmp	lr, r4
 8000c1c:	f200 80bb 	bhi.w	8000d96 <__udivmoddi4+0x2c2>
 8000c20:	4610      	mov	r0, r2
 8000c22:	eba4 040e 	sub.w	r4, r4, lr
 8000c26:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c2a:	e79f      	b.n	8000b6c <__udivmoddi4+0x98>
 8000c2c:	f1c1 0720 	rsb	r7, r1, #32
 8000c30:	408b      	lsls	r3, r1
 8000c32:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c36:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c3a:	fa05 f401 	lsl.w	r4, r5, r1
 8000c3e:	fa20 f307 	lsr.w	r3, r0, r7
 8000c42:	40fd      	lsrs	r5, r7
 8000c44:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c48:	4323      	orrs	r3, r4
 8000c4a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c4e:	fa1f fe8c 	uxth.w	lr, ip
 8000c52:	fb09 5518 	mls	r5, r9, r8, r5
 8000c56:	0c1c      	lsrs	r4, r3, #16
 8000c58:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c5c:	fb08 f50e 	mul.w	r5, r8, lr
 8000c60:	42a5      	cmp	r5, r4
 8000c62:	fa02 f201 	lsl.w	r2, r2, r1
 8000c66:	fa00 f001 	lsl.w	r0, r0, r1
 8000c6a:	d90b      	bls.n	8000c84 <__udivmoddi4+0x1b0>
 8000c6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c70:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c74:	f080 8088 	bcs.w	8000d88 <__udivmoddi4+0x2b4>
 8000c78:	42a5      	cmp	r5, r4
 8000c7a:	f240 8085 	bls.w	8000d88 <__udivmoddi4+0x2b4>
 8000c7e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c82:	4464      	add	r4, ip
 8000c84:	1b64      	subs	r4, r4, r5
 8000c86:	b29d      	uxth	r5, r3
 8000c88:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c8c:	fb09 4413 	mls	r4, r9, r3, r4
 8000c90:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c94:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c98:	45a6      	cmp	lr, r4
 8000c9a:	d908      	bls.n	8000cae <__udivmoddi4+0x1da>
 8000c9c:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ca4:	d26c      	bcs.n	8000d80 <__udivmoddi4+0x2ac>
 8000ca6:	45a6      	cmp	lr, r4
 8000ca8:	d96a      	bls.n	8000d80 <__udivmoddi4+0x2ac>
 8000caa:	3b02      	subs	r3, #2
 8000cac:	4464      	add	r4, ip
 8000cae:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cb2:	fba3 9502 	umull	r9, r5, r3, r2
 8000cb6:	eba4 040e 	sub.w	r4, r4, lr
 8000cba:	42ac      	cmp	r4, r5
 8000cbc:	46c8      	mov	r8, r9
 8000cbe:	46ae      	mov	lr, r5
 8000cc0:	d356      	bcc.n	8000d70 <__udivmoddi4+0x29c>
 8000cc2:	d053      	beq.n	8000d6c <__udivmoddi4+0x298>
 8000cc4:	b156      	cbz	r6, 8000cdc <__udivmoddi4+0x208>
 8000cc6:	ebb0 0208 	subs.w	r2, r0, r8
 8000cca:	eb64 040e 	sbc.w	r4, r4, lr
 8000cce:	fa04 f707 	lsl.w	r7, r4, r7
 8000cd2:	40ca      	lsrs	r2, r1
 8000cd4:	40cc      	lsrs	r4, r1
 8000cd6:	4317      	orrs	r7, r2
 8000cd8:	e9c6 7400 	strd	r7, r4, [r6]
 8000cdc:	4618      	mov	r0, r3
 8000cde:	2100      	movs	r1, #0
 8000ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce4:	f1c3 0120 	rsb	r1, r3, #32
 8000ce8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cec:	fa20 f201 	lsr.w	r2, r0, r1
 8000cf0:	fa25 f101 	lsr.w	r1, r5, r1
 8000cf4:	409d      	lsls	r5, r3
 8000cf6:	432a      	orrs	r2, r5
 8000cf8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfc:	fa1f fe8c 	uxth.w	lr, ip
 8000d00:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d04:	fb07 1510 	mls	r5, r7, r0, r1
 8000d08:	0c11      	lsrs	r1, r2, #16
 8000d0a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d0e:	fb00 f50e 	mul.w	r5, r0, lr
 8000d12:	428d      	cmp	r5, r1
 8000d14:	fa04 f403 	lsl.w	r4, r4, r3
 8000d18:	d908      	bls.n	8000d2c <__udivmoddi4+0x258>
 8000d1a:	eb1c 0101 	adds.w	r1, ip, r1
 8000d1e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d22:	d22f      	bcs.n	8000d84 <__udivmoddi4+0x2b0>
 8000d24:	428d      	cmp	r5, r1
 8000d26:	d92d      	bls.n	8000d84 <__udivmoddi4+0x2b0>
 8000d28:	3802      	subs	r0, #2
 8000d2a:	4461      	add	r1, ip
 8000d2c:	1b49      	subs	r1, r1, r5
 8000d2e:	b292      	uxth	r2, r2
 8000d30:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d34:	fb07 1115 	mls	r1, r7, r5, r1
 8000d38:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d3c:	fb05 f10e 	mul.w	r1, r5, lr
 8000d40:	4291      	cmp	r1, r2
 8000d42:	d908      	bls.n	8000d56 <__udivmoddi4+0x282>
 8000d44:	eb1c 0202 	adds.w	r2, ip, r2
 8000d48:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d4c:	d216      	bcs.n	8000d7c <__udivmoddi4+0x2a8>
 8000d4e:	4291      	cmp	r1, r2
 8000d50:	d914      	bls.n	8000d7c <__udivmoddi4+0x2a8>
 8000d52:	3d02      	subs	r5, #2
 8000d54:	4462      	add	r2, ip
 8000d56:	1a52      	subs	r2, r2, r1
 8000d58:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d5c:	e738      	b.n	8000bd0 <__udivmoddi4+0xfc>
 8000d5e:	4631      	mov	r1, r6
 8000d60:	4630      	mov	r0, r6
 8000d62:	e708      	b.n	8000b76 <__udivmoddi4+0xa2>
 8000d64:	4639      	mov	r1, r7
 8000d66:	e6e6      	b.n	8000b36 <__udivmoddi4+0x62>
 8000d68:	4610      	mov	r0, r2
 8000d6a:	e6fb      	b.n	8000b64 <__udivmoddi4+0x90>
 8000d6c:	4548      	cmp	r0, r9
 8000d6e:	d2a9      	bcs.n	8000cc4 <__udivmoddi4+0x1f0>
 8000d70:	ebb9 0802 	subs.w	r8, r9, r2
 8000d74:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d78:	3b01      	subs	r3, #1
 8000d7a:	e7a3      	b.n	8000cc4 <__udivmoddi4+0x1f0>
 8000d7c:	4645      	mov	r5, r8
 8000d7e:	e7ea      	b.n	8000d56 <__udivmoddi4+0x282>
 8000d80:	462b      	mov	r3, r5
 8000d82:	e794      	b.n	8000cae <__udivmoddi4+0x1da>
 8000d84:	4640      	mov	r0, r8
 8000d86:	e7d1      	b.n	8000d2c <__udivmoddi4+0x258>
 8000d88:	46d0      	mov	r8, sl
 8000d8a:	e77b      	b.n	8000c84 <__udivmoddi4+0x1b0>
 8000d8c:	3d02      	subs	r5, #2
 8000d8e:	4462      	add	r2, ip
 8000d90:	e732      	b.n	8000bf8 <__udivmoddi4+0x124>
 8000d92:	4608      	mov	r0, r1
 8000d94:	e70a      	b.n	8000bac <__udivmoddi4+0xd8>
 8000d96:	4464      	add	r4, ip
 8000d98:	3802      	subs	r0, #2
 8000d9a:	e742      	b.n	8000c22 <__udivmoddi4+0x14e>

08000d9c <__aeabi_idiv0>:
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop

08000da0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000da4:	f003 fb60 	bl	8004468 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000da8:	f000 f82a 	bl	8000e00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dac:	f000 f9ce 	bl	800114c <MX_GPIO_Init>
  MX_DMA_Init();
 8000db0:	f000 f9a4 	bl	80010fc <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000db4:	f000 f978 	bl	80010a8 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000db8:	f000 f890 	bl	8000edc <MX_TIM2_Init>
  MX_TIM3_Init();
 8000dbc:	f000 f8da 	bl	8000f74 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim3);
 8000dc0:	480d      	ldr	r0, [pc, #52]	; (8000df8 <main+0x58>)
 8000dc2:	f005 f911 	bl	8005fe8 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	480b      	ldr	r0, [pc, #44]	; (8000df8 <main+0x58>)
 8000dca:	f005 fa3f 	bl	800624c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000dce:	2104      	movs	r1, #4
 8000dd0:	4809      	ldr	r0, [pc, #36]	; (8000df8 <main+0x58>)
 8000dd2:	f005 fa3b 	bl	800624c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000dd6:	2108      	movs	r1, #8
 8000dd8:	4807      	ldr	r0, [pc, #28]	; (8000df8 <main+0x58>)
 8000dda:	f005 fa37 	bl	800624c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8000dde:	210c      	movs	r1, #12
 8000de0:	4805      	ldr	r0, [pc, #20]	; (8000df8 <main+0x58>)
 8000de2:	f005 fa33 	bl	800624c <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 8000de6:	4805      	ldr	r0, [pc, #20]	; (8000dfc <main+0x5c>)
 8000de8:	f005 f966 	bl	80060b8 <HAL_TIM_Base_Start_IT>
  setup();
 8000dec:	f002 fa76 	bl	80032dc <setup>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  loop();
 8000df0:	f002 fa90 	bl	8003314 <loop>
 8000df4:	e7fc      	b.n	8000df0 <main+0x50>
 8000df6:	bf00      	nop
 8000df8:	200000c4 	.word	0x200000c4
 8000dfc:	2000007c 	.word	0x2000007c

08000e00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b094      	sub	sp, #80	; 0x50
 8000e04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e06:	f107 031c 	add.w	r3, r7, #28
 8000e0a:	2234      	movs	r2, #52	; 0x34
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f007 fb51 	bl	80084b6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e14:	f107 0308 	add.w	r3, r7, #8
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	605a      	str	r2, [r3, #4]
 8000e1e:	609a      	str	r2, [r3, #8]
 8000e20:	60da      	str	r2, [r3, #12]
 8000e22:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e24:	2300      	movs	r3, #0
 8000e26:	607b      	str	r3, [r7, #4]
 8000e28:	4b2a      	ldr	r3, [pc, #168]	; (8000ed4 <SystemClock_Config+0xd4>)
 8000e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2c:	4a29      	ldr	r2, [pc, #164]	; (8000ed4 <SystemClock_Config+0xd4>)
 8000e2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e32:	6413      	str	r3, [r2, #64]	; 0x40
 8000e34:	4b27      	ldr	r3, [pc, #156]	; (8000ed4 <SystemClock_Config+0xd4>)
 8000e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e3c:	607b      	str	r3, [r7, #4]
 8000e3e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000e40:	2300      	movs	r3, #0
 8000e42:	603b      	str	r3, [r7, #0]
 8000e44:	4b24      	ldr	r3, [pc, #144]	; (8000ed8 <SystemClock_Config+0xd8>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000e4c:	4a22      	ldr	r2, [pc, #136]	; (8000ed8 <SystemClock_Config+0xd8>)
 8000e4e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e52:	6013      	str	r3, [r2, #0]
 8000e54:	4b20      	ldr	r3, [pc, #128]	; (8000ed8 <SystemClock_Config+0xd8>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e5c:	603b      	str	r3, [r7, #0]
 8000e5e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e60:	2301      	movs	r3, #1
 8000e62:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e64:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e68:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e6e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e72:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000e74:	2304      	movs	r3, #4
 8000e76:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 90;
 8000e78:	235a      	movs	r3, #90	; 0x5a
 8000e7a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000e80:	2302      	movs	r3, #2
 8000e82:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e84:	2302      	movs	r3, #2
 8000e86:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e88:	f107 031c 	add.w	r3, r7, #28
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f004 fdbd 	bl	8005a0c <HAL_RCC_OscConfig>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000e98:	f000 f9ec 	bl	8001274 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e9c:	230f      	movs	r3, #15
 8000e9e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ea8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000eae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eb2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000eb4:	f107 0308 	add.w	r3, r7, #8
 8000eb8:	2102      	movs	r1, #2
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f004 fa5c 	bl	8005378 <HAL_RCC_ClockConfig>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000ec6:	f000 f9d5 	bl	8001274 <Error_Handler>
  }
}
 8000eca:	bf00      	nop
 8000ecc:	3750      	adds	r7, #80	; 0x50
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	40023800 	.word	0x40023800
 8000ed8:	40007000 	.word	0x40007000

08000edc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b086      	sub	sp, #24
 8000ee0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ee2:	f107 0308 	add.w	r3, r7, #8
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	601a      	str	r2, [r3, #0]
 8000eea:	605a      	str	r2, [r3, #4]
 8000eec:	609a      	str	r2, [r3, #8]
 8000eee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ef0:	463b      	mov	r3, r7
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	601a      	str	r2, [r3, #0]
 8000ef6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ef8:	4b1d      	ldr	r3, [pc, #116]	; (8000f70 <MX_TIM2_Init+0x94>)
 8000efa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000efe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 60000;
 8000f00:	4b1b      	ldr	r3, [pc, #108]	; (8000f70 <MX_TIM2_Init+0x94>)
 8000f02:	f64e 2260 	movw	r2, #60000	; 0xea60
 8000f06:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f08:	4b19      	ldr	r3, [pc, #100]	; (8000f70 <MX_TIM2_Init+0x94>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 150;
 8000f0e:	4b18      	ldr	r3, [pc, #96]	; (8000f70 <MX_TIM2_Init+0x94>)
 8000f10:	2296      	movs	r2, #150	; 0x96
 8000f12:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f14:	4b16      	ldr	r3, [pc, #88]	; (8000f70 <MX_TIM2_Init+0x94>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f1a:	4b15      	ldr	r3, [pc, #84]	; (8000f70 <MX_TIM2_Init+0x94>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f20:	4813      	ldr	r0, [pc, #76]	; (8000f70 <MX_TIM2_Init+0x94>)
 8000f22:	f005 f811 	bl	8005f48 <HAL_TIM_Base_Init>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000f2c:	f000 f9a2 	bl	8001274 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f34:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f36:	f107 0308 	add.w	r3, r7, #8
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	480c      	ldr	r0, [pc, #48]	; (8000f70 <MX_TIM2_Init+0x94>)
 8000f3e:	f005 fc17 	bl	8006770 <HAL_TIM_ConfigClockSource>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000f48:	f000 f994 	bl	8001274 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f50:	2300      	movs	r3, #0
 8000f52:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f54:	463b      	mov	r3, r7
 8000f56:	4619      	mov	r1, r3
 8000f58:	4805      	ldr	r0, [pc, #20]	; (8000f70 <MX_TIM2_Init+0x94>)
 8000f5a:	f006 f809 	bl	8006f70 <HAL_TIMEx_MasterConfigSynchronization>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000f64:	f000 f986 	bl	8001274 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f68:	bf00      	nop
 8000f6a:	3718      	adds	r7, #24
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	2000007c 	.word	0x2000007c

08000f74 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b08e      	sub	sp, #56	; 0x38
 8000f78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f7e:	2200      	movs	r2, #0
 8000f80:	601a      	str	r2, [r3, #0]
 8000f82:	605a      	str	r2, [r3, #4]
 8000f84:	609a      	str	r2, [r3, #8]
 8000f86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f88:	f107 0320 	add.w	r3, r7, #32
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f92:	1d3b      	adds	r3, r7, #4
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	605a      	str	r2, [r3, #4]
 8000f9a:	609a      	str	r2, [r3, #8]
 8000f9c:	60da      	str	r2, [r3, #12]
 8000f9e:	611a      	str	r2, [r3, #16]
 8000fa0:	615a      	str	r2, [r3, #20]
 8000fa2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000fa4:	4b3e      	ldr	r3, [pc, #248]	; (80010a0 <MX_TIM3_Init+0x12c>)
 8000fa6:	4a3f      	ldr	r2, [pc, #252]	; (80010a4 <MX_TIM3_Init+0x130>)
 8000fa8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 900;
 8000faa:	4b3d      	ldr	r3, [pc, #244]	; (80010a0 <MX_TIM3_Init+0x12c>)
 8000fac:	f44f 7261 	mov.w	r2, #900	; 0x384
 8000fb0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fb2:	4b3b      	ldr	r3, [pc, #236]	; (80010a0 <MX_TIM3_Init+0x12c>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8000fb8:	4b39      	ldr	r3, [pc, #228]	; (80010a0 <MX_TIM3_Init+0x12c>)
 8000fba:	2264      	movs	r2, #100	; 0x64
 8000fbc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fbe:	4b38      	ldr	r3, [pc, #224]	; (80010a0 <MX_TIM3_Init+0x12c>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fc4:	4b36      	ldr	r3, [pc, #216]	; (80010a0 <MX_TIM3_Init+0x12c>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000fca:	4835      	ldr	r0, [pc, #212]	; (80010a0 <MX_TIM3_Init+0x12c>)
 8000fcc:	f004 ffbc 	bl	8005f48 <HAL_TIM_Base_Init>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000fd6:	f000 f94d 	bl	8001274 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fde:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000fe0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	482e      	ldr	r0, [pc, #184]	; (80010a0 <MX_TIM3_Init+0x12c>)
 8000fe8:	f005 fbc2 	bl	8006770 <HAL_TIM_ConfigClockSource>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000ff2:	f000 f93f 	bl	8001274 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000ff6:	482a      	ldr	r0, [pc, #168]	; (80010a0 <MX_TIM3_Init+0x12c>)
 8000ff8:	f005 f8ce 	bl	8006198 <HAL_TIM_PWM_Init>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001002:	f000 f937 	bl	8001274 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001006:	2300      	movs	r3, #0
 8001008:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800100a:	2300      	movs	r3, #0
 800100c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800100e:	f107 0320 	add.w	r3, r7, #32
 8001012:	4619      	mov	r1, r3
 8001014:	4822      	ldr	r0, [pc, #136]	; (80010a0 <MX_TIM3_Init+0x12c>)
 8001016:	f005 ffab 	bl	8006f70 <HAL_TIMEx_MasterConfigSynchronization>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001020:	f000 f928 	bl	8001274 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001024:	2360      	movs	r3, #96	; 0x60
 8001026:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50;
 8001028:	2332      	movs	r3, #50	; 0x32
 800102a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800102c:	2300      	movs	r3, #0
 800102e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001030:	2300      	movs	r3, #0
 8001032:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001034:	1d3b      	adds	r3, r7, #4
 8001036:	2200      	movs	r2, #0
 8001038:	4619      	mov	r1, r3
 800103a:	4819      	ldr	r0, [pc, #100]	; (80010a0 <MX_TIM3_Init+0x12c>)
 800103c:	f005 fad6 	bl	80065ec <HAL_TIM_PWM_ConfigChannel>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001046:	f000 f915 	bl	8001274 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 800104a:	2300      	movs	r3, #0
 800104c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800104e:	1d3b      	adds	r3, r7, #4
 8001050:	2204      	movs	r2, #4
 8001052:	4619      	mov	r1, r3
 8001054:	4812      	ldr	r0, [pc, #72]	; (80010a0 <MX_TIM3_Init+0x12c>)
 8001056:	f005 fac9 	bl	80065ec <HAL_TIM_PWM_ConfigChannel>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 8001060:	f000 f908 	bl	8001274 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001064:	1d3b      	adds	r3, r7, #4
 8001066:	2208      	movs	r2, #8
 8001068:	4619      	mov	r1, r3
 800106a:	480d      	ldr	r0, [pc, #52]	; (80010a0 <MX_TIM3_Init+0x12c>)
 800106c:	f005 fabe 	bl	80065ec <HAL_TIM_PWM_ConfigChannel>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <MX_TIM3_Init+0x106>
  {
    Error_Handler();
 8001076:	f000 f8fd 	bl	8001274 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800107a:	1d3b      	adds	r3, r7, #4
 800107c:	220c      	movs	r2, #12
 800107e:	4619      	mov	r1, r3
 8001080:	4807      	ldr	r0, [pc, #28]	; (80010a0 <MX_TIM3_Init+0x12c>)
 8001082:	f005 fab3 	bl	80065ec <HAL_TIM_PWM_ConfigChannel>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <MX_TIM3_Init+0x11c>
  {
    Error_Handler();
 800108c:	f000 f8f2 	bl	8001274 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001090:	4803      	ldr	r0, [pc, #12]	; (80010a0 <MX_TIM3_Init+0x12c>)
 8001092:	f002 ffd7 	bl	8004044 <HAL_TIM_MspPostInit>

}
 8001096:	bf00      	nop
 8001098:	3738      	adds	r7, #56	; 0x38
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	200000c4 	.word	0x200000c4
 80010a4:	40000400 	.word	0x40000400

080010a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010ac:	4b11      	ldr	r3, [pc, #68]	; (80010f4 <MX_USART2_UART_Init+0x4c>)
 80010ae:	4a12      	ldr	r2, [pc, #72]	; (80010f8 <MX_USART2_UART_Init+0x50>)
 80010b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 80010b2:	4b10      	ldr	r3, [pc, #64]	; (80010f4 <MX_USART2_UART_Init+0x4c>)
 80010b4:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 80010b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010ba:	4b0e      	ldr	r3, [pc, #56]	; (80010f4 <MX_USART2_UART_Init+0x4c>)
 80010bc:	2200      	movs	r2, #0
 80010be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010c0:	4b0c      	ldr	r3, [pc, #48]	; (80010f4 <MX_USART2_UART_Init+0x4c>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010c6:	4b0b      	ldr	r3, [pc, #44]	; (80010f4 <MX_USART2_UART_Init+0x4c>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010cc:	4b09      	ldr	r3, [pc, #36]	; (80010f4 <MX_USART2_UART_Init+0x4c>)
 80010ce:	220c      	movs	r2, #12
 80010d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010d2:	4b08      	ldr	r3, [pc, #32]	; (80010f4 <MX_USART2_UART_Init+0x4c>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010d8:	4b06      	ldr	r3, [pc, #24]	; (80010f4 <MX_USART2_UART_Init+0x4c>)
 80010da:	2200      	movs	r2, #0
 80010dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010de:	4805      	ldr	r0, [pc, #20]	; (80010f4 <MX_USART2_UART_Init+0x4c>)
 80010e0:	f005 ffd6 	bl	8007090 <HAL_UART_Init>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80010ea:	f000 f8c3 	bl	8001274 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010ee:	bf00      	nop
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	2000010c 	.word	0x2000010c
 80010f8:	40004400 	.word	0x40004400

080010fc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001102:	2300      	movs	r3, #0
 8001104:	607b      	str	r3, [r7, #4]
 8001106:	4b10      	ldr	r3, [pc, #64]	; (8001148 <MX_DMA_Init+0x4c>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110a:	4a0f      	ldr	r2, [pc, #60]	; (8001148 <MX_DMA_Init+0x4c>)
 800110c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001110:	6313      	str	r3, [r2, #48]	; 0x30
 8001112:	4b0d      	ldr	r3, [pc, #52]	; (8001148 <MX_DMA_Init+0x4c>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001116:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800111a:	607b      	str	r3, [r7, #4]
 800111c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800111e:	2200      	movs	r2, #0
 8001120:	2100      	movs	r1, #0
 8001122:	2010      	movs	r0, #16
 8001124:	f003 fb11 	bl	800474a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001128:	2010      	movs	r0, #16
 800112a:	f003 fb2a 	bl	8004782 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800112e:	2200      	movs	r2, #0
 8001130:	2100      	movs	r1, #0
 8001132:	2011      	movs	r0, #17
 8001134:	f003 fb09 	bl	800474a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001138:	2011      	movs	r0, #17
 800113a:	f003 fb22 	bl	8004782 <HAL_NVIC_EnableIRQ>

}
 800113e:	bf00      	nop
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	40023800 	.word	0x40023800

0800114c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b08a      	sub	sp, #40	; 0x28
 8001150:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001152:	f107 0314 	add.w	r3, r7, #20
 8001156:	2200      	movs	r2, #0
 8001158:	601a      	str	r2, [r3, #0]
 800115a:	605a      	str	r2, [r3, #4]
 800115c:	609a      	str	r2, [r3, #8]
 800115e:	60da      	str	r2, [r3, #12]
 8001160:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001162:	2300      	movs	r3, #0
 8001164:	613b      	str	r3, [r7, #16]
 8001166:	4b3f      	ldr	r3, [pc, #252]	; (8001264 <MX_GPIO_Init+0x118>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	4a3e      	ldr	r2, [pc, #248]	; (8001264 <MX_GPIO_Init+0x118>)
 800116c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001170:	6313      	str	r3, [r2, #48]	; 0x30
 8001172:	4b3c      	ldr	r3, [pc, #240]	; (8001264 <MX_GPIO_Init+0x118>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800117a:	613b      	str	r3, [r7, #16]
 800117c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800117e:	2300      	movs	r3, #0
 8001180:	60fb      	str	r3, [r7, #12]
 8001182:	4b38      	ldr	r3, [pc, #224]	; (8001264 <MX_GPIO_Init+0x118>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001186:	4a37      	ldr	r2, [pc, #220]	; (8001264 <MX_GPIO_Init+0x118>)
 8001188:	f043 0301 	orr.w	r3, r3, #1
 800118c:	6313      	str	r3, [r2, #48]	; 0x30
 800118e:	4b35      	ldr	r3, [pc, #212]	; (8001264 <MX_GPIO_Init+0x118>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	f003 0301 	and.w	r3, r3, #1
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800119a:	2300      	movs	r3, #0
 800119c:	60bb      	str	r3, [r7, #8]
 800119e:	4b31      	ldr	r3, [pc, #196]	; (8001264 <MX_GPIO_Init+0x118>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	4a30      	ldr	r2, [pc, #192]	; (8001264 <MX_GPIO_Init+0x118>)
 80011a4:	f043 0302 	orr.w	r3, r3, #2
 80011a8:	6313      	str	r3, [r2, #48]	; 0x30
 80011aa:	4b2e      	ldr	r3, [pc, #184]	; (8001264 <MX_GPIO_Init+0x118>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	f003 0302 	and.w	r3, r3, #2
 80011b2:	60bb      	str	r3, [r7, #8]
 80011b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	607b      	str	r3, [r7, #4]
 80011ba:	4b2a      	ldr	r3, [pc, #168]	; (8001264 <MX_GPIO_Init+0x118>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	4a29      	ldr	r2, [pc, #164]	; (8001264 <MX_GPIO_Init+0x118>)
 80011c0:	f043 0304 	orr.w	r3, r3, #4
 80011c4:	6313      	str	r3, [r2, #48]	; 0x30
 80011c6:	4b27      	ldr	r3, [pc, #156]	; (8001264 <MX_GPIO_Init+0x118>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	f003 0304 	and.w	r3, r3, #4
 80011ce:	607b      	str	r3, [r7, #4]
 80011d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : LeftEncoderA_Pin */
  GPIO_InitStruct.Pin = LeftEncoderA_Pin;
 80011d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80011d8:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80011dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011de:	2301      	movs	r3, #1
 80011e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LeftEncoderA_GPIO_Port, &GPIO_InitStruct);
 80011e2:	f107 0314 	add.w	r3, r7, #20
 80011e6:	4619      	mov	r1, r3
 80011e8:	481f      	ldr	r0, [pc, #124]	; (8001268 <MX_GPIO_Init+0x11c>)
 80011ea:	f003 fee7 	bl	8004fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : RightEncoderB_Pin */
  GPIO_InitStruct.Pin = RightEncoderB_Pin;
 80011ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011f4:	2300      	movs	r3, #0
 80011f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011f8:	2301      	movs	r3, #1
 80011fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RightEncoderB_GPIO_Port, &GPIO_InitStruct);
 80011fc:	f107 0314 	add.w	r3, r7, #20
 8001200:	4619      	mov	r1, r3
 8001202:	4819      	ldr	r0, [pc, #100]	; (8001268 <MX_GPIO_Init+0x11c>)
 8001204:	f003 feda 	bl	8004fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : RightEncoderA_Pin */
  GPIO_InitStruct.Pin = RightEncoderA_Pin;
 8001208:	2340      	movs	r3, #64	; 0x40
 800120a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800120c:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001210:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001212:	2301      	movs	r3, #1
 8001214:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RightEncoderA_GPIO_Port, &GPIO_InitStruct);
 8001216:	f107 0314 	add.w	r3, r7, #20
 800121a:	4619      	mov	r1, r3
 800121c:	4813      	ldr	r0, [pc, #76]	; (800126c <MX_GPIO_Init+0x120>)
 800121e:	f003 fecd 	bl	8004fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : LeftEncoderB_Pin */
  GPIO_InitStruct.Pin = LeftEncoderB_Pin;
 8001222:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001226:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001228:	2300      	movs	r3, #0
 800122a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800122c:	2301      	movs	r3, #1
 800122e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LeftEncoderB_GPIO_Port, &GPIO_InitStruct);
 8001230:	f107 0314 	add.w	r3, r7, #20
 8001234:	4619      	mov	r1, r3
 8001236:	480e      	ldr	r0, [pc, #56]	; (8001270 <MX_GPIO_Init+0x124>)
 8001238:	f003 fec0 	bl	8004fbc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800123c:	2200      	movs	r2, #0
 800123e:	2100      	movs	r1, #0
 8001240:	2017      	movs	r0, #23
 8001242:	f003 fa82 	bl	800474a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001246:	2017      	movs	r0, #23
 8001248:	f003 fa9b 	bl	8004782 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800124c:	2200      	movs	r2, #0
 800124e:	2100      	movs	r1, #0
 8001250:	2028      	movs	r0, #40	; 0x28
 8001252:	f003 fa7a 	bl	800474a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001256:	2028      	movs	r0, #40	; 0x28
 8001258:	f003 fa93 	bl	8004782 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800125c:	bf00      	nop
 800125e:	3728      	adds	r7, #40	; 0x28
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	40023800 	.word	0x40023800
 8001268:	40020400 	.word	0x40020400
 800126c:	40020800 	.word	0x40020800
 8001270:	40020000 	.word	0x40020000

08001274 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001278:	b672      	cpsid	i
}
 800127a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800127c:	e7fe      	b.n	800127c <Error_Handler+0x8>

0800127e <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 800127e:	b480      	push	{r7}
 8001280:	b083      	sub	sp, #12
 8001282:	af00      	add	r7, sp, #0
 8001284:	6078      	str	r0, [r7, #4]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2200      	movs	r2, #0
 8001290:	605a      	str	r2, [r3, #4]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4618      	mov	r0, r3
 8001296:	370c      	adds	r7, #12
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr

080012a0 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	4a04      	ldr	r2, [pc, #16]	; (80012bc <_ZN3ros3MsgC1Ev+0x1c>)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	601a      	str	r2, [r3, #0]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4618      	mov	r0, r3
 80012b2:	370c      	adds	r7, #12
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr
 80012bc:	08008a68 	.word	0x08008a68

080012c0 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
      data()
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7ff ffe8 	bl	80012a0 <_ZN3ros3MsgC1Ev>
 80012d0:	4a06      	ldr	r2, [pc, #24]	; (80012ec <_ZN8std_msgs4TimeC1Ev+0x2c>)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	601a      	str	r2, [r3, #0]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	3304      	adds	r3, #4
 80012da:	4618      	mov	r0, r3
 80012dc:	f7ff ffcf 	bl	800127e <_ZN3ros4TimeC1Ev>
    {
    }
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	4618      	mov	r0, r3
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	08008a50 	.word	0x08008a50

080012f0 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80012f0:	b480      	push	{r7}
 80012f2:	b085      	sub	sp, #20
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80012fa:	2300      	movs	r3, #0
 80012fc:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6859      	ldr	r1, [r3, #4]
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	683a      	ldr	r2, [r7, #0]
 8001306:	4413      	add	r3, r2
 8001308:	b2ca      	uxtb	r2, r1
 800130a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	0a19      	lsrs	r1, r3, #8
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	3301      	adds	r3, #1
 8001316:	683a      	ldr	r2, [r7, #0]
 8001318:	4413      	add	r3, r2
 800131a:	b2ca      	uxtb	r2, r1
 800131c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	0c19      	lsrs	r1, r3, #16
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	3302      	adds	r3, #2
 8001328:	683a      	ldr	r2, [r7, #0]
 800132a:	4413      	add	r3, r2
 800132c:	b2ca      	uxtb	r2, r1
 800132e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	0e19      	lsrs	r1, r3, #24
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	3303      	adds	r3, #3
 800133a:	683a      	ldr	r2, [r7, #0]
 800133c:	4413      	add	r3, r2
 800133e:	b2ca      	uxtb	r2, r1
 8001340:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	3304      	adds	r3, #4
 8001346:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6899      	ldr	r1, [r3, #8]
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	683a      	ldr	r2, [r7, #0]
 8001350:	4413      	add	r3, r2
 8001352:	b2ca      	uxtb	r2, r1
 8001354:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	0a19      	lsrs	r1, r3, #8
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	3301      	adds	r3, #1
 8001360:	683a      	ldr	r2, [r7, #0]
 8001362:	4413      	add	r3, r2
 8001364:	b2ca      	uxtb	r2, r1
 8001366:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	689b      	ldr	r3, [r3, #8]
 800136c:	0c19      	lsrs	r1, r3, #16
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	3302      	adds	r3, #2
 8001372:	683a      	ldr	r2, [r7, #0]
 8001374:	4413      	add	r3, r2
 8001376:	b2ca      	uxtb	r2, r1
 8001378:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	689b      	ldr	r3, [r3, #8]
 800137e:	0e19      	lsrs	r1, r3, #24
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	3303      	adds	r3, #3
 8001384:	683a      	ldr	r2, [r7, #0]
 8001386:	4413      	add	r3, r2
 8001388:	b2ca      	uxtb	r2, r1
 800138a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	3304      	adds	r3, #4
 8001390:	60fb      	str	r3, [r7, #12]
      return offset;
 8001392:	68fb      	ldr	r3, [r7, #12]
    }
 8001394:	4618      	mov	r0, r3
 8001396:	3714      	adds	r7, #20
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr

080013a0 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80013a0:	b480      	push	{r7}
 80013a2:	b085      	sub	sp, #20
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80013aa:	2300      	movs	r3, #0
 80013ac:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	683a      	ldr	r2, [r7, #0]
 80013b2:	4413      	add	r3, r2
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	461a      	mov	r2, r3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	685a      	ldr	r2, [r3, #4]
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	3301      	adds	r3, #1
 80013c4:	6839      	ldr	r1, [r7, #0]
 80013c6:	440b      	add	r3, r1
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	021b      	lsls	r3, r3, #8
 80013cc:	431a      	orrs	r2, r3
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	685a      	ldr	r2, [r3, #4]
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	3302      	adds	r3, #2
 80013da:	6839      	ldr	r1, [r7, #0]
 80013dc:	440b      	add	r3, r1
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	041b      	lsls	r3, r3, #16
 80013e2:	431a      	orrs	r2, r3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	685a      	ldr	r2, [r3, #4]
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	3303      	adds	r3, #3
 80013f0:	6839      	ldr	r1, [r7, #0]
 80013f2:	440b      	add	r3, r1
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	061b      	lsls	r3, r3, #24
 80013f8:	431a      	orrs	r2, r3
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	3304      	adds	r3, #4
 8001402:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	683a      	ldr	r2, [r7, #0]
 8001408:	4413      	add	r3, r2
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	461a      	mov	r2, r3
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	689a      	ldr	r2, [r3, #8]
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	3301      	adds	r3, #1
 800141a:	6839      	ldr	r1, [r7, #0]
 800141c:	440b      	add	r3, r1
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	021b      	lsls	r3, r3, #8
 8001422:	431a      	orrs	r2, r3
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	689a      	ldr	r2, [r3, #8]
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	3302      	adds	r3, #2
 8001430:	6839      	ldr	r1, [r7, #0]
 8001432:	440b      	add	r3, r1
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	041b      	lsls	r3, r3, #16
 8001438:	431a      	orrs	r2, r3
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	689a      	ldr	r2, [r3, #8]
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	3303      	adds	r3, #3
 8001446:	6839      	ldr	r1, [r7, #0]
 8001448:	440b      	add	r3, r1
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	061b      	lsls	r3, r3, #24
 800144e:	431a      	orrs	r2, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	3304      	adds	r3, #4
 8001458:	60fb      	str	r3, [r7, #12]
     return offset;
 800145a:	68fb      	ldr	r3, [r7, #12]
    }
 800145c:	4618      	mov	r0, r3
 800145e:	3714      	adds	r7, #20
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr

08001468 <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	4b03      	ldr	r3, [pc, #12]	; (8001480 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8001472:	4618      	mov	r0, r3
 8001474:	370c      	adds	r7, #12
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	08008774 	.word	0x08008774

08001484 <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	4b03      	ldr	r3, [pc, #12]	; (800149c <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 800148e:	4618      	mov	r0, r3
 8001490:	370c      	adds	r7, #12
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	08008784 	.word	0x08008784

080014a0 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7ff fef8 	bl	80012a0 <_ZN3ros3MsgC1Ev>
 80014b0:	4a0b      	ldr	r2, [pc, #44]	; (80014e0 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	601a      	str	r2, [r3, #0]
      topic_id(0),
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2200      	movs	r2, #0
 80014ba:	809a      	strh	r2, [r3, #4]
      topic_name(""),
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	4a09      	ldr	r2, [pc, #36]	; (80014e4 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80014c0:	609a      	str	r2, [r3, #8]
      message_type(""),
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4a07      	ldr	r2, [pc, #28]	; (80014e4 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80014c6:	60da      	str	r2, [r3, #12]
      md5sum(""),
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	4a06      	ldr	r2, [pc, #24]	; (80014e4 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80014cc:	611a      	str	r2, [r3, #16]
      buffer_size(0)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2200      	movs	r2, #0
 80014d2:	615a      	str	r2, [r3, #20]
    {
    }
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	4618      	mov	r0, r3
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	08008a38 	.word	0x08008a38
 80014e4:	080087a8 	.word	0x080087a8

080014e8 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b088      	sub	sp, #32
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80014f2:	2300      	movs	r3, #0
 80014f4:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	8899      	ldrh	r1, [r3, #4]
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	683a      	ldr	r2, [r7, #0]
 80014fe:	4413      	add	r3, r2
 8001500:	b2ca      	uxtb	r2, r1
 8001502:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	889b      	ldrh	r3, [r3, #4]
 8001508:	0a1b      	lsrs	r3, r3, #8
 800150a:	b299      	uxth	r1, r3
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	3301      	adds	r3, #1
 8001510:	683a      	ldr	r2, [r7, #0]
 8001512:	4413      	add	r3, r2
 8001514:	b2ca      	uxtb	r2, r1
 8001516:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	3302      	adds	r3, #2
 800151c:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	4618      	mov	r0, r3
 8001524:	f7fe fe70 	bl	8000208 <strlen>
 8001528:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	683a      	ldr	r2, [r7, #0]
 800152e:	4413      	add	r3, r2
 8001530:	69b9      	ldr	r1, [r7, #24]
 8001532:	4618      	mov	r0, r3
 8001534:	f001 ff72 	bl	800341c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001538:	69fb      	ldr	r3, [r7, #28]
 800153a:	3304      	adds	r3, #4
 800153c:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	683a      	ldr	r2, [r7, #0]
 8001542:	18d0      	adds	r0, r2, r3
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	69ba      	ldr	r2, [r7, #24]
 800154a:	4619      	mov	r1, r3
 800154c:	f006 ffe8 	bl	8008520 <memcpy>
      offset += length_topic_name;
 8001550:	69fa      	ldr	r2, [r7, #28]
 8001552:	69bb      	ldr	r3, [r7, #24]
 8001554:	4413      	add	r3, r2
 8001556:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	4618      	mov	r0, r3
 800155e:	f7fe fe53 	bl	8000208 <strlen>
 8001562:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8001564:	69fb      	ldr	r3, [r7, #28]
 8001566:	683a      	ldr	r2, [r7, #0]
 8001568:	4413      	add	r3, r2
 800156a:	6979      	ldr	r1, [r7, #20]
 800156c:	4618      	mov	r0, r3
 800156e:	f001 ff55 	bl	800341c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	3304      	adds	r3, #4
 8001576:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8001578:	69fb      	ldr	r3, [r7, #28]
 800157a:	683a      	ldr	r2, [r7, #0]
 800157c:	18d0      	adds	r0, r2, r3
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	68db      	ldr	r3, [r3, #12]
 8001582:	697a      	ldr	r2, [r7, #20]
 8001584:	4619      	mov	r1, r3
 8001586:	f006 ffcb 	bl	8008520 <memcpy>
      offset += length_message_type;
 800158a:	69fa      	ldr	r2, [r7, #28]
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	4413      	add	r3, r2
 8001590:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	691b      	ldr	r3, [r3, #16]
 8001596:	4618      	mov	r0, r3
 8001598:	f7fe fe36 	bl	8000208 <strlen>
 800159c:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	683a      	ldr	r2, [r7, #0]
 80015a2:	4413      	add	r3, r2
 80015a4:	6939      	ldr	r1, [r7, #16]
 80015a6:	4618      	mov	r0, r3
 80015a8:	f001 ff38 	bl	800341c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	3304      	adds	r3, #4
 80015b0:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	683a      	ldr	r2, [r7, #0]
 80015b6:	18d0      	adds	r0, r2, r3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	691b      	ldr	r3, [r3, #16]
 80015bc:	693a      	ldr	r2, [r7, #16]
 80015be:	4619      	mov	r1, r3
 80015c0:	f006 ffae 	bl	8008520 <memcpy>
      offset += length_md5sum;
 80015c4:	69fa      	ldr	r2, [r7, #28]
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	4413      	add	r3, r2
 80015ca:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	695b      	ldr	r3, [r3, #20]
 80015d0:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 80015d2:	68f9      	ldr	r1, [r7, #12]
 80015d4:	69fb      	ldr	r3, [r7, #28]
 80015d6:	683a      	ldr	r2, [r7, #0]
 80015d8:	4413      	add	r3, r2
 80015da:	b2ca      	uxtb	r2, r1
 80015dc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	0a19      	lsrs	r1, r3, #8
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	3301      	adds	r3, #1
 80015e6:	683a      	ldr	r2, [r7, #0]
 80015e8:	4413      	add	r3, r2
 80015ea:	b2ca      	uxtb	r2, r1
 80015ec:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	0c19      	lsrs	r1, r3, #16
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	3302      	adds	r3, #2
 80015f6:	683a      	ldr	r2, [r7, #0]
 80015f8:	4413      	add	r3, r2
 80015fa:	b2ca      	uxtb	r2, r1
 80015fc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	0e19      	lsrs	r1, r3, #24
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	3303      	adds	r3, #3
 8001606:	683a      	ldr	r2, [r7, #0]
 8001608:	4413      	add	r3, r2
 800160a:	b2ca      	uxtb	r2, r1
 800160c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	3304      	adds	r3, #4
 8001612:	61fb      	str	r3, [r7, #28]
      return offset;
 8001614:	69fb      	ldr	r3, [r7, #28]
    }
 8001616:	4618      	mov	r0, r3
 8001618:	3720      	adds	r7, #32
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}

0800161e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800161e:	b580      	push	{r7, lr}
 8001620:	b08a      	sub	sp, #40	; 0x28
 8001622:	af00      	add	r7, sp, #0
 8001624:	6078      	str	r0, [r7, #4]
 8001626:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001628:	2300      	movs	r3, #0
 800162a:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 800162c:	69bb      	ldr	r3, [r7, #24]
 800162e:	683a      	ldr	r2, [r7, #0]
 8001630:	4413      	add	r3, r2
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	b29a      	uxth	r2, r3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	889b      	ldrh	r3, [r3, #4]
 800163e:	b21a      	sxth	r2, r3
 8001640:	69bb      	ldr	r3, [r7, #24]
 8001642:	3301      	adds	r3, #1
 8001644:	6839      	ldr	r1, [r7, #0]
 8001646:	440b      	add	r3, r1
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	021b      	lsls	r3, r3, #8
 800164c:	b21b      	sxth	r3, r3
 800164e:	4313      	orrs	r3, r2
 8001650:	b21b      	sxth	r3, r3
 8001652:	b29a      	uxth	r2, r3
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8001658:	69bb      	ldr	r3, [r7, #24]
 800165a:	3302      	adds	r3, #2
 800165c:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 800165e:	69bb      	ldr	r3, [r7, #24]
 8001660:	683a      	ldr	r2, [r7, #0]
 8001662:	441a      	add	r2, r3
 8001664:	f107 0314 	add.w	r3, r7, #20
 8001668:	4611      	mov	r1, r2
 800166a:	4618      	mov	r0, r3
 800166c:	f001 fef5 	bl	800345a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001670:	69bb      	ldr	r3, [r7, #24]
 8001672:	3304      	adds	r3, #4
 8001674:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001676:	69bb      	ldr	r3, [r7, #24]
 8001678:	627b      	str	r3, [r7, #36]	; 0x24
 800167a:	e00b      	b.n	8001694 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x76>
          inbuffer[k-1]=inbuffer[k];
 800167c:	683a      	ldr	r2, [r7, #0]
 800167e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001680:	441a      	add	r2, r3
 8001682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001684:	3b01      	subs	r3, #1
 8001686:	6839      	ldr	r1, [r7, #0]
 8001688:	440b      	add	r3, r1
 800168a:	7812      	ldrb	r2, [r2, #0]
 800168c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 800168e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001690:	3301      	adds	r3, #1
 8001692:	627b      	str	r3, [r7, #36]	; 0x24
 8001694:	69ba      	ldr	r2, [r7, #24]
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	4413      	add	r3, r2
 800169a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800169c:	429a      	cmp	r2, r3
 800169e:	d3ed      	bcc.n	800167c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5e>
      }
      inbuffer[offset+length_topic_name-1]=0;
 80016a0:	69ba      	ldr	r2, [r7, #24]
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	4413      	add	r3, r2
 80016a6:	3b01      	subs	r3, #1
 80016a8:	683a      	ldr	r2, [r7, #0]
 80016aa:	4413      	add	r3, r2
 80016ac:	2200      	movs	r2, #0
 80016ae:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 80016b0:	69bb      	ldr	r3, [r7, #24]
 80016b2:	3b01      	subs	r3, #1
 80016b4:	683a      	ldr	r2, [r7, #0]
 80016b6:	441a      	add	r2, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 80016bc:	69ba      	ldr	r2, [r7, #24]
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	4413      	add	r3, r2
 80016c2:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 80016c4:	69bb      	ldr	r3, [r7, #24]
 80016c6:	683a      	ldr	r2, [r7, #0]
 80016c8:	441a      	add	r2, r3
 80016ca:	f107 0310 	add.w	r3, r7, #16
 80016ce:	4611      	mov	r1, r2
 80016d0:	4618      	mov	r0, r3
 80016d2:	f001 fec2 	bl	800345a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80016d6:	69bb      	ldr	r3, [r7, #24]
 80016d8:	3304      	adds	r3, #4
 80016da:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80016dc:	69bb      	ldr	r3, [r7, #24]
 80016de:	623b      	str	r3, [r7, #32]
 80016e0:	e00b      	b.n	80016fa <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xdc>
          inbuffer[k-1]=inbuffer[k];
 80016e2:	683a      	ldr	r2, [r7, #0]
 80016e4:	6a3b      	ldr	r3, [r7, #32]
 80016e6:	441a      	add	r2, r3
 80016e8:	6a3b      	ldr	r3, [r7, #32]
 80016ea:	3b01      	subs	r3, #1
 80016ec:	6839      	ldr	r1, [r7, #0]
 80016ee:	440b      	add	r3, r1
 80016f0:	7812      	ldrb	r2, [r2, #0]
 80016f2:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80016f4:	6a3b      	ldr	r3, [r7, #32]
 80016f6:	3301      	adds	r3, #1
 80016f8:	623b      	str	r3, [r7, #32]
 80016fa:	69ba      	ldr	r2, [r7, #24]
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	4413      	add	r3, r2
 8001700:	6a3a      	ldr	r2, [r7, #32]
 8001702:	429a      	cmp	r2, r3
 8001704:	d3ed      	bcc.n	80016e2 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc4>
      }
      inbuffer[offset+length_message_type-1]=0;
 8001706:	69ba      	ldr	r2, [r7, #24]
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	4413      	add	r3, r2
 800170c:	3b01      	subs	r3, #1
 800170e:	683a      	ldr	r2, [r7, #0]
 8001710:	4413      	add	r3, r2
 8001712:	2200      	movs	r2, #0
 8001714:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8001716:	69bb      	ldr	r3, [r7, #24]
 8001718:	3b01      	subs	r3, #1
 800171a:	683a      	ldr	r2, [r7, #0]
 800171c:	441a      	add	r2, r3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8001722:	69ba      	ldr	r2, [r7, #24]
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	4413      	add	r3, r2
 8001728:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 800172a:	69bb      	ldr	r3, [r7, #24]
 800172c:	683a      	ldr	r2, [r7, #0]
 800172e:	441a      	add	r2, r3
 8001730:	f107 030c 	add.w	r3, r7, #12
 8001734:	4611      	mov	r1, r2
 8001736:	4618      	mov	r0, r3
 8001738:	f001 fe8f 	bl	800345a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800173c:	69bb      	ldr	r3, [r7, #24]
 800173e:	3304      	adds	r3, #4
 8001740:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001742:	69bb      	ldr	r3, [r7, #24]
 8001744:	61fb      	str	r3, [r7, #28]
 8001746:	e00b      	b.n	8001760 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x142>
          inbuffer[k-1]=inbuffer[k];
 8001748:	683a      	ldr	r2, [r7, #0]
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	441a      	add	r2, r3
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	3b01      	subs	r3, #1
 8001752:	6839      	ldr	r1, [r7, #0]
 8001754:	440b      	add	r3, r1
 8001756:	7812      	ldrb	r2, [r2, #0]
 8001758:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	3301      	adds	r3, #1
 800175e:	61fb      	str	r3, [r7, #28]
 8001760:	69ba      	ldr	r2, [r7, #24]
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	4413      	add	r3, r2
 8001766:	69fa      	ldr	r2, [r7, #28]
 8001768:	429a      	cmp	r2, r3
 800176a:	d3ed      	bcc.n	8001748 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x12a>
      }
      inbuffer[offset+length_md5sum-1]=0;
 800176c:	69ba      	ldr	r2, [r7, #24]
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	4413      	add	r3, r2
 8001772:	3b01      	subs	r3, #1
 8001774:	683a      	ldr	r2, [r7, #0]
 8001776:	4413      	add	r3, r2
 8001778:	2200      	movs	r2, #0
 800177a:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 800177c:	69bb      	ldr	r3, [r7, #24]
 800177e:	3b01      	subs	r3, #1
 8001780:	683a      	ldr	r2, [r7, #0]
 8001782:	441a      	add	r2, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8001788:	69ba      	ldr	r2, [r7, #24]
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	4413      	add	r3, r2
 800178e:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8001790:	2300      	movs	r3, #0
 8001792:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	69ba      	ldr	r2, [r7, #24]
 8001798:	6839      	ldr	r1, [r7, #0]
 800179a:	440a      	add	r2, r1
 800179c:	7812      	ldrb	r2, [r2, #0]
 800179e:	4313      	orrs	r3, r2
 80017a0:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80017a2:	68ba      	ldr	r2, [r7, #8]
 80017a4:	69bb      	ldr	r3, [r7, #24]
 80017a6:	3301      	adds	r3, #1
 80017a8:	6839      	ldr	r1, [r7, #0]
 80017aa:	440b      	add	r3, r1
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	021b      	lsls	r3, r3, #8
 80017b0:	4313      	orrs	r3, r2
 80017b2:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80017b4:	68ba      	ldr	r2, [r7, #8]
 80017b6:	69bb      	ldr	r3, [r7, #24]
 80017b8:	3302      	adds	r3, #2
 80017ba:	6839      	ldr	r1, [r7, #0]
 80017bc:	440b      	add	r3, r1
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	041b      	lsls	r3, r3, #16
 80017c2:	4313      	orrs	r3, r2
 80017c4:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80017c6:	68ba      	ldr	r2, [r7, #8]
 80017c8:	69bb      	ldr	r3, [r7, #24]
 80017ca:	3303      	adds	r3, #3
 80017cc:	6839      	ldr	r1, [r7, #0]
 80017ce:	440b      	add	r3, r1
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	061b      	lsls	r3, r3, #24
 80017d4:	4313      	orrs	r3, r2
 80017d6:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 80017d8:	68ba      	ldr	r2, [r7, #8]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 80017de:	69bb      	ldr	r3, [r7, #24]
 80017e0:	3304      	adds	r3, #4
 80017e2:	61bb      	str	r3, [r7, #24]
     return offset;
 80017e4:	69bb      	ldr	r3, [r7, #24]
    }
 80017e6:	4618      	mov	r0, r3
 80017e8:	3728      	adds	r7, #40	; 0x28
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
	...

080017f0 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	4b03      	ldr	r3, [pc, #12]	; (8001808 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 80017fa:	4618      	mov	r0, r3
 80017fc:	370c      	adds	r7, #12
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	080087ac 	.word	0x080087ac

0800180c <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	4b03      	ldr	r3, [pc, #12]	; (8001824 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8001816:	4618      	mov	r0, r3
 8001818:	370c      	adds	r7, #12
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	080087c8 	.word	0x080087c8

08001828 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	4618      	mov	r0, r3
 8001834:	f7ff fd34 	bl	80012a0 <_ZN3ros3MsgC1Ev>
 8001838:	4a06      	ldr	r2, [pc, #24]	; (8001854 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	601a      	str	r2, [r3, #0]
      level(0),
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2200      	movs	r2, #0
 8001842:	711a      	strb	r2, [r3, #4]
      msg("")
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	4a04      	ldr	r2, [pc, #16]	; (8001858 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8001848:	609a      	str	r2, [r3, #8]
    {
    }
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4618      	mov	r0, r3
 800184e:	3708      	adds	r7, #8
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	08008a20 	.word	0x08008a20
 8001858:	080087a8 	.word	0x080087a8

0800185c <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 800185c:	b580      	push	{r7, lr}
 800185e:	b084      	sub	sp, #16
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001866:	2300      	movs	r3, #0
 8001868:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	683a      	ldr	r2, [r7, #0]
 800186e:	4413      	add	r3, r2
 8001870:	687a      	ldr	r2, [r7, #4]
 8001872:	7912      	ldrb	r2, [r2, #4]
 8001874:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	3301      	adds	r3, #1
 800187a:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	4618      	mov	r0, r3
 8001882:	f7fe fcc1 	bl	8000208 <strlen>
 8001886:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	683a      	ldr	r2, [r7, #0]
 800188c:	4413      	add	r3, r2
 800188e:	68b9      	ldr	r1, [r7, #8]
 8001890:	4618      	mov	r0, r3
 8001892:	f001 fdc3 	bl	800341c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	3304      	adds	r3, #4
 800189a:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	683a      	ldr	r2, [r7, #0]
 80018a0:	18d0      	adds	r0, r2, r3
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	68ba      	ldr	r2, [r7, #8]
 80018a8:	4619      	mov	r1, r3
 80018aa:	f006 fe39 	bl	8008520 <memcpy>
      offset += length_msg;
 80018ae:	68fa      	ldr	r2, [r7, #12]
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	4413      	add	r3, r2
 80018b4:	60fb      	str	r3, [r7, #12]
      return offset;
 80018b6:	68fb      	ldr	r3, [r7, #12]
    }
 80018b8:	4618      	mov	r0, r3
 80018ba:	3710      	adds	r7, #16
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}

080018c0 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b086      	sub	sp, #24
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80018ca:	2300      	movs	r3, #0
 80018cc:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	683a      	ldr	r2, [r7, #0]
 80018d2:	4413      	add	r3, r2
 80018d4:	781a      	ldrb	r2, [r3, #0]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	3301      	adds	r3, #1
 80018de:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	683a      	ldr	r2, [r7, #0]
 80018e4:	441a      	add	r2, r3
 80018e6:	f107 030c 	add.w	r3, r7, #12
 80018ea:	4611      	mov	r1, r2
 80018ec:	4618      	mov	r0, r3
 80018ee:	f001 fdb4 	bl	800345a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	3304      	adds	r3, #4
 80018f6:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	617b      	str	r3, [r7, #20]
 80018fc:	e00b      	b.n	8001916 <_ZN14rosserial_msgs3Log11deserializeEPh+0x56>
          inbuffer[k-1]=inbuffer[k];
 80018fe:	683a      	ldr	r2, [r7, #0]
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	441a      	add	r2, r3
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	3b01      	subs	r3, #1
 8001908:	6839      	ldr	r1, [r7, #0]
 800190a:	440b      	add	r3, r1
 800190c:	7812      	ldrb	r2, [r2, #0]
 800190e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	3301      	adds	r3, #1
 8001914:	617b      	str	r3, [r7, #20]
 8001916:	693a      	ldr	r2, [r7, #16]
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	4413      	add	r3, r2
 800191c:	697a      	ldr	r2, [r7, #20]
 800191e:	429a      	cmp	r2, r3
 8001920:	d3ed      	bcc.n	80018fe <_ZN14rosserial_msgs3Log11deserializeEPh+0x3e>
      }
      inbuffer[offset+length_msg-1]=0;
 8001922:	693a      	ldr	r2, [r7, #16]
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	4413      	add	r3, r2
 8001928:	3b01      	subs	r3, #1
 800192a:	683a      	ldr	r2, [r7, #0]
 800192c:	4413      	add	r3, r2
 800192e:	2200      	movs	r2, #0
 8001930:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	3b01      	subs	r3, #1
 8001936:	683a      	ldr	r2, [r7, #0]
 8001938:	441a      	add	r2, r3
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 800193e:	693a      	ldr	r2, [r7, #16]
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	4413      	add	r3, r2
 8001944:	613b      	str	r3, [r7, #16]
     return offset;
 8001946:	693b      	ldr	r3, [r7, #16]
    }
 8001948:	4618      	mov	r0, r3
 800194a:	3718      	adds	r7, #24
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}

08001950 <_ZN14rosserial_msgs3Log7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	4b03      	ldr	r3, [pc, #12]	; (8001968 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 800195a:	4618      	mov	r0, r3
 800195c:	370c      	adds	r7, #12
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	080087ec 	.word	0x080087ec

0800196c <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
 8001974:	4b03      	ldr	r3, [pc, #12]	; (8001984 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8001976:	4618      	mov	r0, r3
 8001978:	370c      	adds	r7, #12
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	08008800 	.word	0x08008800

08001988 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	4618      	mov	r0, r3
 8001994:	f7ff fc84 	bl	80012a0 <_ZN3ros3MsgC1Ev>
 8001998:	4a11      	ldr	r2, [pc, #68]	; (80019e0 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	601a      	str	r2, [r3, #0]
      ints_length(0), st_ints(), ints(nullptr),
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2200      	movs	r2, #0
 80019a2:	605a      	str	r2, [r3, #4]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2200      	movs	r2, #0
 80019a8:	609a      	str	r2, [r3, #8]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2200      	movs	r2, #0
 80019ae:	60da      	str	r2, [r3, #12]
      floats_length(0), st_floats(), floats(nullptr),
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2200      	movs	r2, #0
 80019b4:	611a      	str	r2, [r3, #16]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	f04f 0200 	mov.w	r2, #0
 80019bc:	615a      	str	r2, [r3, #20]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2200      	movs	r2, #0
 80019c2:	619a      	str	r2, [r3, #24]
      strings_length(0), st_strings(), strings(nullptr)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2200      	movs	r2, #0
 80019c8:	61da      	str	r2, [r3, #28]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2200      	movs	r2, #0
 80019ce:	621a      	str	r2, [r3, #32]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2200      	movs	r2, #0
 80019d4:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4618      	mov	r0, r3
 80019da:	3708      	adds	r7, #8
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	08008a08 	.word	0x08008a08

080019e4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b08a      	sub	sp, #40	; 0x28
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80019ee:	2300      	movs	r3, #0
 80019f0:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6859      	ldr	r1, [r3, #4]
 80019f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f8:	683a      	ldr	r2, [r7, #0]
 80019fa:	4413      	add	r3, r2
 80019fc:	b2ca      	uxtb	r2, r1
 80019fe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	0a19      	lsrs	r1, r3, #8
 8001a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a08:	3301      	adds	r3, #1
 8001a0a:	683a      	ldr	r2, [r7, #0]
 8001a0c:	4413      	add	r3, r2
 8001a0e:	b2ca      	uxtb	r2, r1
 8001a10:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	0c19      	lsrs	r1, r3, #16
 8001a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1a:	3302      	adds	r3, #2
 8001a1c:	683a      	ldr	r2, [r7, #0]
 8001a1e:	4413      	add	r3, r2
 8001a20:	b2ca      	uxtb	r2, r1
 8001a22:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	0e19      	lsrs	r1, r3, #24
 8001a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2c:	3303      	adds	r3, #3
 8001a2e:	683a      	ldr	r2, [r7, #0]
 8001a30:	4413      	add	r3, r2
 8001a32:	b2ca      	uxtb	r2, r1
 8001a34:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8001a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a38:	3304      	adds	r3, #4
 8001a3a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	623b      	str	r3, [r7, #32]
 8001a40:	e02a      	b.n	8001a98 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xb4>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	68da      	ldr	r2, [r3, #12]
 8001a46:	6a3b      	ldr	r3, [r7, #32]
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	4413      	add	r3, r2
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8001a50:	6939      	ldr	r1, [r7, #16]
 8001a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a54:	683a      	ldr	r2, [r7, #0]
 8001a56:	4413      	add	r3, r2
 8001a58:	b2ca      	uxtb	r2, r1
 8001a5a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	0a19      	lsrs	r1, r3, #8
 8001a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a62:	3301      	adds	r3, #1
 8001a64:	683a      	ldr	r2, [r7, #0]
 8001a66:	4413      	add	r3, r2
 8001a68:	b2ca      	uxtb	r2, r1
 8001a6a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	0c19      	lsrs	r1, r3, #16
 8001a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a72:	3302      	adds	r3, #2
 8001a74:	683a      	ldr	r2, [r7, #0]
 8001a76:	4413      	add	r3, r2
 8001a78:	b2ca      	uxtb	r2, r1
 8001a7a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	0e19      	lsrs	r1, r3, #24
 8001a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a82:	3303      	adds	r3, #3
 8001a84:	683a      	ldr	r2, [r7, #0]
 8001a86:	4413      	add	r3, r2
 8001a88:	b2ca      	uxtb	r2, r1
 8001a8a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8001a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8e:	3304      	adds	r3, #4
 8001a90:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001a92:	6a3b      	ldr	r3, [r7, #32]
 8001a94:	3301      	adds	r3, #1
 8001a96:	623b      	str	r3, [r7, #32]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	6a3a      	ldr	r2, [r7, #32]
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	d3cf      	bcc.n	8001a42 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5e>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6919      	ldr	r1, [r3, #16]
 8001aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa8:	683a      	ldr	r2, [r7, #0]
 8001aaa:	4413      	add	r3, r2
 8001aac:	b2ca      	uxtb	r2, r1
 8001aae:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	691b      	ldr	r3, [r3, #16]
 8001ab4:	0a19      	lsrs	r1, r3, #8
 8001ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab8:	3301      	adds	r3, #1
 8001aba:	683a      	ldr	r2, [r7, #0]
 8001abc:	4413      	add	r3, r2
 8001abe:	b2ca      	uxtb	r2, r1
 8001ac0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	691b      	ldr	r3, [r3, #16]
 8001ac6:	0c19      	lsrs	r1, r3, #16
 8001ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aca:	3302      	adds	r3, #2
 8001acc:	683a      	ldr	r2, [r7, #0]
 8001ace:	4413      	add	r3, r2
 8001ad0:	b2ca      	uxtb	r2, r1
 8001ad2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	691b      	ldr	r3, [r3, #16]
 8001ad8:	0e19      	lsrs	r1, r3, #24
 8001ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001adc:	3303      	adds	r3, #3
 8001ade:	683a      	ldr	r2, [r7, #0]
 8001ae0:	4413      	add	r3, r2
 8001ae2:	b2ca      	uxtb	r2, r1
 8001ae4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8001ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae8:	3304      	adds	r3, #4
 8001aea:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001aec:	2300      	movs	r3, #0
 8001aee:	61fb      	str	r3, [r7, #28]
 8001af0:	e02a      	b.n	8001b48 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x164>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	699a      	ldr	r2, [r3, #24]
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	4413      	add	r3, r2
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8001b00:	68f9      	ldr	r1, [r7, #12]
 8001b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b04:	683a      	ldr	r2, [r7, #0]
 8001b06:	4413      	add	r3, r2
 8001b08:	b2ca      	uxtb	r2, r1
 8001b0a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	0a19      	lsrs	r1, r3, #8
 8001b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b12:	3301      	adds	r3, #1
 8001b14:	683a      	ldr	r2, [r7, #0]
 8001b16:	4413      	add	r3, r2
 8001b18:	b2ca      	uxtb	r2, r1
 8001b1a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	0c19      	lsrs	r1, r3, #16
 8001b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b22:	3302      	adds	r3, #2
 8001b24:	683a      	ldr	r2, [r7, #0]
 8001b26:	4413      	add	r3, r2
 8001b28:	b2ca      	uxtb	r2, r1
 8001b2a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	0e19      	lsrs	r1, r3, #24
 8001b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b32:	3303      	adds	r3, #3
 8001b34:	683a      	ldr	r2, [r7, #0]
 8001b36:	4413      	add	r3, r2
 8001b38:	b2ca      	uxtb	r2, r1
 8001b3a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8001b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b3e:	3304      	adds	r3, #4
 8001b40:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	3301      	adds	r3, #1
 8001b46:	61fb      	str	r3, [r7, #28]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	691b      	ldr	r3, [r3, #16]
 8001b4c:	69fa      	ldr	r2, [r7, #28]
 8001b4e:	429a      	cmp	r2, r3
 8001b50:	d3cf      	bcc.n	8001af2 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10e>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	69d9      	ldr	r1, [r3, #28]
 8001b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b58:	683a      	ldr	r2, [r7, #0]
 8001b5a:	4413      	add	r3, r2
 8001b5c:	b2ca      	uxtb	r2, r1
 8001b5e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	69db      	ldr	r3, [r3, #28]
 8001b64:	0a19      	lsrs	r1, r3, #8
 8001b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b68:	3301      	adds	r3, #1
 8001b6a:	683a      	ldr	r2, [r7, #0]
 8001b6c:	4413      	add	r3, r2
 8001b6e:	b2ca      	uxtb	r2, r1
 8001b70:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	69db      	ldr	r3, [r3, #28]
 8001b76:	0c19      	lsrs	r1, r3, #16
 8001b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7a:	3302      	adds	r3, #2
 8001b7c:	683a      	ldr	r2, [r7, #0]
 8001b7e:	4413      	add	r3, r2
 8001b80:	b2ca      	uxtb	r2, r1
 8001b82:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	69db      	ldr	r3, [r3, #28]
 8001b88:	0e19      	lsrs	r1, r3, #24
 8001b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8c:	3303      	adds	r3, #3
 8001b8e:	683a      	ldr	r2, [r7, #0]
 8001b90:	4413      	add	r3, r2
 8001b92:	b2ca      	uxtb	r2, r1
 8001b94:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8001b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b98:	3304      	adds	r3, #4
 8001b9a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	61bb      	str	r3, [r7, #24]
 8001ba0:	e027      	b.n	8001bf2 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x20e>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ba6:	69bb      	ldr	r3, [r7, #24]
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	4413      	add	r3, r2
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7fe fb2a 	bl	8000208 <strlen>
 8001bb4:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8001bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb8:	683a      	ldr	r2, [r7, #0]
 8001bba:	4413      	add	r3, r2
 8001bbc:	6979      	ldr	r1, [r7, #20]
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f001 fc2c 	bl	800341c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc6:	3304      	adds	r3, #4
 8001bc8:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8001bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bcc:	683a      	ldr	r2, [r7, #0]
 8001bce:	18d0      	adds	r0, r2, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001bd4:	69bb      	ldr	r3, [r7, #24]
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	4413      	add	r3, r2
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	697a      	ldr	r2, [r7, #20]
 8001bde:	4619      	mov	r1, r3
 8001be0:	f006 fc9e 	bl	8008520 <memcpy>
      offset += length_stringsi;
 8001be4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	4413      	add	r3, r2
 8001bea:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001bec:	69bb      	ldr	r3, [r7, #24]
 8001bee:	3301      	adds	r3, #1
 8001bf0:	61bb      	str	r3, [r7, #24]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	69db      	ldr	r3, [r3, #28]
 8001bf6:	69ba      	ldr	r2, [r7, #24]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d3d2      	bcc.n	8001ba2 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1be>
      }
      return offset;
 8001bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3728      	adds	r7, #40	; 0x28
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001c06:	b580      	push	{r7, lr}
 8001c08:	b08e      	sub	sp, #56	; 0x38
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
 8001c0e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001c10:	2300      	movs	r3, #0
 8001c12:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001c14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c16:	683a      	ldr	r2, [r7, #0]
 8001c18:	4413      	add	r3, r2
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001c1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c20:	3301      	adds	r3, #1
 8001c22:	683a      	ldr	r2, [r7, #0]
 8001c24:	4413      	add	r3, r2
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	021b      	lsls	r3, r3, #8
 8001c2a:	6a3a      	ldr	r2, [r7, #32]
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001c30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c32:	3302      	adds	r3, #2
 8001c34:	683a      	ldr	r2, [r7, #0]
 8001c36:	4413      	add	r3, r2
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	041b      	lsls	r3, r3, #16
 8001c3c:	6a3a      	ldr	r2, [r7, #32]
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001c42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c44:	3303      	adds	r3, #3
 8001c46:	683a      	ldr	r2, [r7, #0]
 8001c48:	4413      	add	r3, r2
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	061b      	lsls	r3, r3, #24
 8001c4e:	6a3a      	ldr	r2, [r7, #32]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8001c54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c56:	3304      	adds	r3, #4
 8001c58:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	6a3a      	ldr	r2, [r7, #32]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d90a      	bls.n	8001c7a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	68da      	ldr	r2, [r3, #12]
 8001c68:	6a3b      	ldr	r3, [r7, #32]
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	4610      	mov	r0, r2
 8001c70:	f006 fbea 	bl	8008448 <realloc>
 8001c74:	4602      	mov	r2, r0
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6a3a      	ldr	r2, [r7, #32]
 8001c7e:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8001c80:	2300      	movs	r3, #0
 8001c82:	633b      	str	r3, [r7, #48]	; 0x30
 8001c84:	e035      	b.n	8001cf2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xec>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8001c86:	2300      	movs	r3, #0
 8001c88:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001c8e:	6839      	ldr	r1, [r7, #0]
 8001c90:	440a      	add	r2, r1
 8001c92:	7812      	ldrb	r2, [r2, #0]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001c98:	697a      	ldr	r2, [r7, #20]
 8001c9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	6839      	ldr	r1, [r7, #0]
 8001ca0:	440b      	add	r3, r1
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	021b      	lsls	r3, r3, #8
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001caa:	697a      	ldr	r2, [r7, #20]
 8001cac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cae:	3302      	adds	r3, #2
 8001cb0:	6839      	ldr	r1, [r7, #0]
 8001cb2:	440b      	add	r3, r1
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	041b      	lsls	r3, r3, #16
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001cbc:	697a      	ldr	r2, [r7, #20]
 8001cbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cc0:	3303      	adds	r3, #3
 8001cc2:	6839      	ldr	r1, [r7, #0]
 8001cc4:	440b      	add	r3, r1
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	061b      	lsls	r3, r3, #24
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8001cce:	697a      	ldr	r2, [r7, #20]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8001cd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cd6:	3304      	adds	r3, #4
 8001cd8:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	68da      	ldr	r2, [r3, #12]
 8001cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	4413      	add	r3, r2
 8001ce4:	687a      	ldr	r2, [r7, #4]
 8001ce6:	3208      	adds	r2, #8
 8001ce8:	6812      	ldr	r2, [r2, #0]
 8001cea:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8001cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cee:	3301      	adds	r3, #1
 8001cf0:	633b      	str	r3, [r7, #48]	; 0x30
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d3c4      	bcc.n	8001c86 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x80>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001cfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cfe:	683a      	ldr	r2, [r7, #0]
 8001d00:	4413      	add	r3, r2
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001d06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d08:	3301      	adds	r3, #1
 8001d0a:	683a      	ldr	r2, [r7, #0]
 8001d0c:	4413      	add	r3, r2
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	021b      	lsls	r3, r3, #8
 8001d12:	69fa      	ldr	r2, [r7, #28]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001d18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d1a:	3302      	adds	r3, #2
 8001d1c:	683a      	ldr	r2, [r7, #0]
 8001d1e:	4413      	add	r3, r2
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	041b      	lsls	r3, r3, #16
 8001d24:	69fa      	ldr	r2, [r7, #28]
 8001d26:	4313      	orrs	r3, r2
 8001d28:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001d2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d2c:	3303      	adds	r3, #3
 8001d2e:	683a      	ldr	r2, [r7, #0]
 8001d30:	4413      	add	r3, r2
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	061b      	lsls	r3, r3, #24
 8001d36:	69fa      	ldr	r2, [r7, #28]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8001d3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d3e:	3304      	adds	r3, #4
 8001d40:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	691b      	ldr	r3, [r3, #16]
 8001d46:	69fa      	ldr	r2, [r7, #28]
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d90a      	bls.n	8001d62 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	699a      	ldr	r2, [r3, #24]
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	4619      	mov	r1, r3
 8001d56:	4610      	mov	r0, r2
 8001d58:	f006 fb76 	bl	8008448 <realloc>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	69fa      	ldr	r2, [r7, #28]
 8001d66:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8001d68:	2300      	movs	r3, #0
 8001d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d6c:	e035      	b.n	8001dda <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1d4>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001d76:	6839      	ldr	r1, [r7, #0]
 8001d78:	440a      	add	r2, r1
 8001d7a:	7812      	ldrb	r2, [r2, #0]
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001d80:	693a      	ldr	r2, [r7, #16]
 8001d82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d84:	3301      	adds	r3, #1
 8001d86:	6839      	ldr	r1, [r7, #0]
 8001d88:	440b      	add	r3, r1
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	021b      	lsls	r3, r3, #8
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001d92:	693a      	ldr	r2, [r7, #16]
 8001d94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d96:	3302      	adds	r3, #2
 8001d98:	6839      	ldr	r1, [r7, #0]
 8001d9a:	440b      	add	r3, r1
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	041b      	lsls	r3, r3, #16
 8001da0:	4313      	orrs	r3, r2
 8001da2:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001da4:	693a      	ldr	r2, [r7, #16]
 8001da6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001da8:	3303      	adds	r3, #3
 8001daa:	6839      	ldr	r1, [r7, #0]
 8001dac:	440b      	add	r3, r1
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	061b      	lsls	r3, r3, #24
 8001db2:	4313      	orrs	r3, r2
 8001db4:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8001db6:	693a      	ldr	r2, [r7, #16]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8001dbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dbe:	3304      	adds	r3, #4
 8001dc0:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	699a      	ldr	r2, [r3, #24]
 8001dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	4413      	add	r3, r2
 8001dcc:	687a      	ldr	r2, [r7, #4]
 8001dce:	3214      	adds	r2, #20
 8001dd0:	6812      	ldr	r2, [r2, #0]
 8001dd2:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8001dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	691b      	ldr	r3, [r3, #16]
 8001dde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d3c4      	bcc.n	8001d6e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x168>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001de4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001de6:	683a      	ldr	r2, [r7, #0]
 8001de8:	4413      	add	r3, r2
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001dee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001df0:	3301      	adds	r3, #1
 8001df2:	683a      	ldr	r2, [r7, #0]
 8001df4:	4413      	add	r3, r2
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	021b      	lsls	r3, r3, #8
 8001dfa:	69ba      	ldr	r2, [r7, #24]
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001e00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e02:	3302      	adds	r3, #2
 8001e04:	683a      	ldr	r2, [r7, #0]
 8001e06:	4413      	add	r3, r2
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	041b      	lsls	r3, r3, #16
 8001e0c:	69ba      	ldr	r2, [r7, #24]
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001e12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e14:	3303      	adds	r3, #3
 8001e16:	683a      	ldr	r2, [r7, #0]
 8001e18:	4413      	add	r3, r2
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	061b      	lsls	r3, r3, #24
 8001e1e:	69ba      	ldr	r2, [r7, #24]
 8001e20:	4313      	orrs	r3, r2
 8001e22:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8001e24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e26:	3304      	adds	r3, #4
 8001e28:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	69db      	ldr	r3, [r3, #28]
 8001e2e:	69ba      	ldr	r2, [r7, #24]
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d90a      	bls.n	8001e4a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e38:	69bb      	ldr	r3, [r7, #24]
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	4610      	mov	r0, r2
 8001e40:	f006 fb02 	bl	8008448 <realloc>
 8001e44:	4602      	mov	r2, r0
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	69ba      	ldr	r2, [r7, #24]
 8001e4e:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8001e50:	2300      	movs	r3, #0
 8001e52:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e54:	e03e      	b.n	8001ed4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2ce>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8001e56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e58:	683a      	ldr	r2, [r7, #0]
 8001e5a:	441a      	add	r2, r3
 8001e5c:	f107 030c 	add.w	r3, r7, #12
 8001e60:	4611      	mov	r1, r2
 8001e62:	4618      	mov	r0, r3
 8001e64:	f001 faf9 	bl	800345a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001e68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e6a:	3304      	adds	r3, #4
 8001e6c:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001e6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e70:	627b      	str	r3, [r7, #36]	; 0x24
 8001e72:	e00b      	b.n	8001e8c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x286>
          inbuffer[k-1]=inbuffer[k];
 8001e74:	683a      	ldr	r2, [r7, #0]
 8001e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e78:	441a      	add	r2, r3
 8001e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7c:	3b01      	subs	r3, #1
 8001e7e:	6839      	ldr	r1, [r7, #0]
 8001e80:	440b      	add	r3, r1
 8001e82:	7812      	ldrb	r2, [r2, #0]
 8001e84:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e88:	3301      	adds	r3, #1
 8001e8a:	627b      	str	r3, [r7, #36]	; 0x24
 8001e8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	4413      	add	r3, r2
 8001e92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d3ed      	bcc.n	8001e74 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x26e>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8001e98:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	4413      	add	r3, r2
 8001e9e:	3b01      	subs	r3, #1
 8001ea0:	683a      	ldr	r2, [r7, #0]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8001ea8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001eaa:	3b01      	subs	r3, #1
 8001eac:	683a      	ldr	r2, [r7, #0]
 8001eae:	441a      	add	r2, r3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8001eb4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	4413      	add	r3, r2
 8001eba:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	4413      	add	r3, r2
 8001ec6:	687a      	ldr	r2, [r7, #4]
 8001ec8:	3220      	adds	r2, #32
 8001eca:	6812      	ldr	r2, [r2, #0]
 8001ecc:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8001ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ed0:	3301      	adds	r3, #1
 8001ed2:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	69db      	ldr	r3, [r3, #28]
 8001ed8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d3bb      	bcc.n	8001e56 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x250>
      }
     return offset;
 8001ede:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3738      	adds	r7, #56	; 0x38
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}

08001ee8 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	4b03      	ldr	r3, [pc, #12]	; (8001f00 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	370c      	adds	r7, #12
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	08008944 	.word	0x08008944

08001f04 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	4b03      	ldr	r3, [pc, #12]	; (8001f1c <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8001f0e:	4618      	mov	r0, r3
 8001f10:	370c      	adds	r7, #12
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	08008824 	.word	0x08008824

08001f20 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8001f20:	b480      	push	{r7}
 8001f22:	b085      	sub	sp, #20
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	60f8      	str	r0, [r7, #12]
 8001f28:	60b9      	str	r1, [r7, #8]
 8001f2a:	607a      	str	r2, [r7, #4]
 8001f2c:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	68ba      	ldr	r2, [r7, #8]
 8001f32:	601a      	str	r2, [r3, #0]
    msg_(msg),
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	605a      	str	r2, [r3, #4]
    endpoint_(endpoint) {};
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	683a      	ldr	r2, [r7, #0]
 8001f3e:	611a      	str	r2, [r3, #16]
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	4618      	mov	r0, r3
 8001f44:	3714      	adds	r7, #20
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr

08001f4e <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8001f4e:	b580      	push	{r7, lr}
 8001f50:	b082      	sub	sp, #8
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
 8001f56:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	68d8      	ldr	r0, [r3, #12]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	687a      	ldr	r2, [r7, #4]
 8001f66:	6891      	ldr	r1, [r2, #8]
 8001f68:	683a      	ldr	r2, [r7, #0]
 8001f6a:	4798      	blx	r3
 8001f6c:	4603      	mov	r3, r0
  };
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3708      	adds	r7, #8
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}

08001f76 <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8001f76:	b480      	push	{r7}
 8001f78:	b083      	sub	sp, #12
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	691b      	ldr	r3, [r3, #16]
  }
 8001f82:	4618      	mov	r0, r3
 8001f84:	370c      	adds	r7, #12
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr

08001f8e <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8001f8e:	b480      	push	{r7}
 8001f90:	b083      	sub	sp, #12
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	6078      	str	r0, [r7, #4]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001fa4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fa8:	4618      	mov	r0, r3
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
      huart(&huart2), rind(0), twind(0), tfind(0){
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	4a0a      	ldr	r2, [pc, #40]	; (8001fe8 <_ZN13STM32HardwareC1Ev+0x34>)
 8001fc0:	601a      	str	r2, [r3, #0]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	4618      	mov	r0, r3
 8001fde:	370c      	adds	r7, #12
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr
 8001fe8:	2000010c 	.word	0x2000010c

08001fec <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f000 f804 	bl	8002002 <_ZN13STM32Hardware10reset_rbufEv>
    }
 8001ffa:	bf00      	nop
 8001ffc:	3708      	adds	r7, #8
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}

08002002 <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 8002002:	b580      	push	{r7, lr}
 8002004:	b082      	sub	sp, #8
 8002006:	af00      	add	r7, sp, #0
 8002008:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6818      	ldr	r0, [r3, #0]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	3304      	adds	r3, #4
 8002012:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002016:	4619      	mov	r1, r3
 8002018:	f005 f906 	bl	8007228 <HAL_UART_Receive_DMA>
    }
 800201c:	bf00      	nop
 800201e:	3708      	adds	r7, #8
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}

08002024 <_ZN13STM32Hardware4readEv>:

    int read(){
 8002024:	b590      	push	{r4, r7, lr}
 8002026:	b085      	sub	sp, #20
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
      int c = -1;
 800202c:	f04f 33ff 	mov.w	r3, #4294967295
 8002030:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f7ff ffa8 	bl	8001f8e <_ZN13STM32Hardware10getRdmaIndEv>
 800203e:	4603      	mov	r3, r0
 8002040:	429c      	cmp	r4, r3
 8002042:	bf14      	ite	ne
 8002044:	2301      	movne	r3, #1
 8002046:	2300      	moveq	r3, #0
 8002048:	b2db      	uxtb	r3, r3
 800204a:	2b00      	cmp	r3, #0
 800204c:	d012      	beq.n	8002074 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002054:	1c59      	adds	r1, r3, #1
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	4413      	add	r3, r2
 8002060:	791b      	ldrb	r3, [r3, #4]
 8002062:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800206a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 8002074:	68fb      	ldr	r3, [r7, #12]
    }
 8002076:	4618      	mov	r0, r3
 8002078:	3714      	adds	r7, #20
 800207a:	46bd      	mov	sp, r7
 800207c:	bd90      	pop	{r4, r7, pc}
	...

08002080 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8002080:	b580      	push	{r7, lr}
 8002082:	b084      	sub	sp, #16
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002090:	b2db      	uxtb	r3, r3
 8002092:	2b20      	cmp	r3, #32
 8002094:	d108      	bne.n	80020a8 <_ZN13STM32Hardware5flushEv+0x28>
 8002096:	4b33      	ldr	r3, [pc, #204]	; (8002164 <_ZN13STM32Hardware5flushEv+0xe4>)
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	f083 0301 	eor.w	r3, r3, #1
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d001      	beq.n	80020a8 <_ZN13STM32Hardware5flushEv+0x28>
 80020a4:	2301      	movs	r3, #1
 80020a6:	e000      	b.n	80020aa <_ZN13STM32Hardware5flushEv+0x2a>
 80020a8:	2300      	movs	r3, #0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d055      	beq.n	800215a <_ZN13STM32Hardware5flushEv+0xda>
        mutex = true;
 80020ae:	4b2d      	ldr	r3, [pc, #180]	; (8002164 <_ZN13STM32Hardware5flushEv+0xe4>)
 80020b0:	2201      	movs	r2, #1
 80020b2:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d047      	beq.n	8002154 <_ZN13STM32Hardware5flushEv+0xd4>
          uint16_t len = 0;
 80020c4:	2300      	movs	r3, #0
 80020c6:	81fb      	strh	r3, [r7, #14]
		  if(tfind < twind){
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d217      	bcs.n	8002108 <_ZN13STM32Hardware5flushEv+0x88>
			len = twind - tfind;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80020de:	b29a      	uxth	r2, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	81fb      	strh	r3, [r7, #14]
			HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6818      	ldr	r0, [r3, #0]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80020f6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	4413      	add	r3, r2
 80020fe:	89fa      	ldrh	r2, [r7, #14]
 8002100:	4619      	mov	r1, r3
 8002102:	f005 f813 	bl	800712c <HAL_UART_Transmit_DMA>
 8002106:	e01f      	b.n	8002148 <_ZN13STM32Hardware5flushEv+0xc8>
		  }else{
			len = tbuflen - tfind;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800210e:	b29b      	uxth	r3, r3
 8002110:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8002114:	81fb      	strh	r3, [r7, #14]
			HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6818      	ldr	r0, [r3, #0]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002120:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002124:	687a      	ldr	r2, [r7, #4]
 8002126:	4413      	add	r3, r2
 8002128:	89fa      	ldrh	r2, [r7, #14]
 800212a:	4619      	mov	r1, r3
 800212c:	f004 fffe 	bl	800712c <HAL_UART_Transmit_DMA>
			HAL_UART_Transmit_DMA(huart, (tbuf), twind);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6818      	ldr	r0, [r3, #0]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	f503 7102 	add.w	r1, r3, #520	; 0x208
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002140:	b29b      	uxth	r3, r3
 8002142:	461a      	mov	r2, r3
 8002144:	f004 fff2 	bl	800712c <HAL_UART_Transmit_DMA>
		  }
          tfind = twind;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        }
        mutex = false;
 8002154:	4b03      	ldr	r3, [pc, #12]	; (8002164 <_ZN13STM32Hardware5flushEv+0xe4>)
 8002156:	2200      	movs	r2, #0
 8002158:	701a      	strb	r2, [r3, #0]
      }
    }
 800215a:	bf00      	nop
 800215c:	3710      	adds	r7, #16
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	20000210 	.word	0x20000210

08002168 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8002168:	b580      	push	{r7, lr}
 800216a:	b086      	sub	sp, #24
 800216c:	af00      	add	r7, sp, #0
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	60b9      	str	r1, [r7, #8]
 8002172:	607a      	str	r2, [r7, #4]
      int n = length;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800217e:	bfa8      	it	ge
 8002180:	f44f 7300 	movge.w	r3, #512	; 0x200
 8002184:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800218c:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	4293      	cmp	r3, r2
 8002194:	bf28      	it	cs
 8002196:	4613      	movcs	r3, r2
 8002198:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80021a0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80021a4:	68fa      	ldr	r2, [r7, #12]
 80021a6:	4413      	add	r3, r2
 80021a8:	693a      	ldr	r2, [r7, #16]
 80021aa:	68b9      	ldr	r1, [r7, #8]
 80021ac:	4618      	mov	r0, r3
 80021ae:	f006 f9b7 	bl	8008520 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	4413      	add	r3, r2
 80021bc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

      if(n != n_tail){
 80021c6:	697a      	ldr	r2, [r7, #20]
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d00b      	beq.n	80021e6 <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	f503 7002 	add.w	r0, r3, #520	; 0x208
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	68ba      	ldr	r2, [r7, #8]
 80021d8:	18d1      	adds	r1, r2, r3
 80021da:	697a      	ldr	r2, [r7, #20]
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	461a      	mov	r2, r3
 80021e2:	f006 f99d 	bl	8008520 <memcpy>
      }

      flush();
 80021e6:	68f8      	ldr	r0, [r7, #12]
 80021e8:	f7ff ff4a 	bl	8002080 <_ZN13STM32Hardware5flushEv>
    }
 80021ec:	bf00      	nop
 80021ee:	3718      	adds	r7, #24
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}

080021f4 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	f002 f99a 	bl	8004534 <HAL_GetTick>
 8002200:	4603      	mov	r3, r0
 8002202:	4618      	mov	r0, r3
 8002204:	3708      	adds	r7, #8
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
	...

0800220c <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Vector3():
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	4618      	mov	r0, r3
 8002218:	f7ff f842 	bl	80012a0 <_ZN3ros3MsgC1Ev>
 800221c:	4a0e      	ldr	r2, [pc, #56]	; (8002258 <_ZN13geometry_msgs7Vector3C1Ev+0x4c>)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	601a      	str	r2, [r3, #0]
      x(0),
 8002222:	6879      	ldr	r1, [r7, #4]
 8002224:	f04f 0200 	mov.w	r2, #0
 8002228:	f04f 0300 	mov.w	r3, #0
 800222c:	e9c1 2302 	strd	r2, r3, [r1, #8]
      y(0),
 8002230:	6879      	ldr	r1, [r7, #4]
 8002232:	f04f 0200 	mov.w	r2, #0
 8002236:	f04f 0300 	mov.w	r3, #0
 800223a:	e9c1 2304 	strd	r2, r3, [r1, #16]
      z(0)
 800223e:	6879      	ldr	r1, [r7, #4]
 8002240:	f04f 0200 	mov.w	r2, #0
 8002244:	f04f 0300 	mov.w	r3, #0
 8002248:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	4618      	mov	r0, r3
 8002250:	3708      	adds	r7, #8
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	080089c4 	.word	0x080089c4

0800225c <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 800225c:	b480      	push	{r7}
 800225e:	b08b      	sub	sp, #44	; 0x2c
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002266:	2300      	movs	r3, #0
 8002268:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002270:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 8002274:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002278:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800227a:	6838      	ldr	r0, [r7, #0]
 800227c:	4401      	add	r1, r0
 800227e:	b2d3      	uxtb	r3, r2
 8002280:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 8002282:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002286:	f04f 0200 	mov.w	r2, #0
 800228a:	f04f 0300 	mov.w	r3, #0
 800228e:	0a02      	lsrs	r2, r0, #8
 8002290:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002294:	0a0b      	lsrs	r3, r1, #8
 8002296:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002298:	3101      	adds	r1, #1
 800229a:	6838      	ldr	r0, [r7, #0]
 800229c:	4401      	add	r1, r0
 800229e:	b2d3      	uxtb	r3, r2
 80022a0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 80022a2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80022a6:	f04f 0200 	mov.w	r2, #0
 80022aa:	f04f 0300 	mov.w	r3, #0
 80022ae:	0c02      	lsrs	r2, r0, #16
 80022b0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80022b4:	0c0b      	lsrs	r3, r1, #16
 80022b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022b8:	3102      	adds	r1, #2
 80022ba:	6838      	ldr	r0, [r7, #0]
 80022bc:	4401      	add	r1, r0
 80022be:	b2d3      	uxtb	r3, r2
 80022c0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 80022c2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80022c6:	f04f 0200 	mov.w	r2, #0
 80022ca:	f04f 0300 	mov.w	r3, #0
 80022ce:	0e02      	lsrs	r2, r0, #24
 80022d0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80022d4:	0e0b      	lsrs	r3, r1, #24
 80022d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022d8:	3103      	adds	r1, #3
 80022da:	6838      	ldr	r0, [r7, #0]
 80022dc:	4401      	add	r1, r0
 80022de:	b2d3      	uxtb	r3, r2
 80022e0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 80022e2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80022e6:	f04f 0200 	mov.w	r2, #0
 80022ea:	f04f 0300 	mov.w	r3, #0
 80022ee:	000a      	movs	r2, r1
 80022f0:	2300      	movs	r3, #0
 80022f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022f4:	3104      	adds	r1, #4
 80022f6:	6838      	ldr	r0, [r7, #0]
 80022f8:	4401      	add	r1, r0
 80022fa:	b2d3      	uxtb	r3, r2
 80022fc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 80022fe:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002302:	f04f 0200 	mov.w	r2, #0
 8002306:	f04f 0300 	mov.w	r3, #0
 800230a:	0a0a      	lsrs	r2, r1, #8
 800230c:	2300      	movs	r3, #0
 800230e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002310:	3105      	adds	r1, #5
 8002312:	6838      	ldr	r0, [r7, #0]
 8002314:	4401      	add	r1, r0
 8002316:	b2d3      	uxtb	r3, r2
 8002318:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 800231a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800231e:	f04f 0200 	mov.w	r2, #0
 8002322:	f04f 0300 	mov.w	r3, #0
 8002326:	0c0a      	lsrs	r2, r1, #16
 8002328:	2300      	movs	r3, #0
 800232a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800232c:	3106      	adds	r1, #6
 800232e:	6838      	ldr	r0, [r7, #0]
 8002330:	4401      	add	r1, r0
 8002332:	b2d3      	uxtb	r3, r2
 8002334:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 8002336:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800233a:	f04f 0200 	mov.w	r2, #0
 800233e:	f04f 0300 	mov.w	r3, #0
 8002342:	0e0a      	lsrs	r2, r1, #24
 8002344:	2300      	movs	r3, #0
 8002346:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002348:	3107      	adds	r1, #7
 800234a:	6838      	ldr	r0, [r7, #0]
 800234c:	4401      	add	r1, r0
 800234e:	b2d3      	uxtb	r3, r2
 8002350:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 8002352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002354:	3308      	adds	r3, #8
 8002356:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800235e:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 8002362:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002366:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002368:	6838      	ldr	r0, [r7, #0]
 800236a:	4401      	add	r1, r0
 800236c:	b2d3      	uxtb	r3, r2
 800236e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 8002370:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002374:	f04f 0200 	mov.w	r2, #0
 8002378:	f04f 0300 	mov.w	r3, #0
 800237c:	0a02      	lsrs	r2, r0, #8
 800237e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002382:	0a0b      	lsrs	r3, r1, #8
 8002384:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002386:	3101      	adds	r1, #1
 8002388:	6838      	ldr	r0, [r7, #0]
 800238a:	4401      	add	r1, r0
 800238c:	b2d3      	uxtb	r3, r2
 800238e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 8002390:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002394:	f04f 0200 	mov.w	r2, #0
 8002398:	f04f 0300 	mov.w	r3, #0
 800239c:	0c02      	lsrs	r2, r0, #16
 800239e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80023a2:	0c0b      	lsrs	r3, r1, #16
 80023a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023a6:	3102      	adds	r1, #2
 80023a8:	6838      	ldr	r0, [r7, #0]
 80023aa:	4401      	add	r1, r0
 80023ac:	b2d3      	uxtb	r3, r2
 80023ae:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 80023b0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80023b4:	f04f 0200 	mov.w	r2, #0
 80023b8:	f04f 0300 	mov.w	r3, #0
 80023bc:	0e02      	lsrs	r2, r0, #24
 80023be:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80023c2:	0e0b      	lsrs	r3, r1, #24
 80023c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023c6:	3103      	adds	r1, #3
 80023c8:	6838      	ldr	r0, [r7, #0]
 80023ca:	4401      	add	r1, r0
 80023cc:	b2d3      	uxtb	r3, r2
 80023ce:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 80023d0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80023d4:	f04f 0200 	mov.w	r2, #0
 80023d8:	f04f 0300 	mov.w	r3, #0
 80023dc:	000a      	movs	r2, r1
 80023de:	2300      	movs	r3, #0
 80023e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023e2:	3104      	adds	r1, #4
 80023e4:	6838      	ldr	r0, [r7, #0]
 80023e6:	4401      	add	r1, r0
 80023e8:	b2d3      	uxtb	r3, r2
 80023ea:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 80023ec:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80023f0:	f04f 0200 	mov.w	r2, #0
 80023f4:	f04f 0300 	mov.w	r3, #0
 80023f8:	0a0a      	lsrs	r2, r1, #8
 80023fa:	2300      	movs	r3, #0
 80023fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023fe:	3105      	adds	r1, #5
 8002400:	6838      	ldr	r0, [r7, #0]
 8002402:	4401      	add	r1, r0
 8002404:	b2d3      	uxtb	r3, r2
 8002406:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8002408:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800240c:	f04f 0200 	mov.w	r2, #0
 8002410:	f04f 0300 	mov.w	r3, #0
 8002414:	0c0a      	lsrs	r2, r1, #16
 8002416:	2300      	movs	r3, #0
 8002418:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800241a:	3106      	adds	r1, #6
 800241c:	6838      	ldr	r0, [r7, #0]
 800241e:	4401      	add	r1, r0
 8002420:	b2d3      	uxtb	r3, r2
 8002422:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8002424:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002428:	f04f 0200 	mov.w	r2, #0
 800242c:	f04f 0300 	mov.w	r3, #0
 8002430:	0e0a      	lsrs	r2, r1, #24
 8002432:	2300      	movs	r3, #0
 8002434:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002436:	3107      	adds	r1, #7
 8002438:	6838      	ldr	r0, [r7, #0]
 800243a:	4401      	add	r1, r0
 800243c:	b2d3      	uxtb	r3, r2
 800243e:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 8002440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002442:	3308      	adds	r3, #8
 8002444:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800244c:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 8002450:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002454:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002456:	6838      	ldr	r0, [r7, #0]
 8002458:	4401      	add	r1, r0
 800245a:	b2d3      	uxtb	r3, r2
 800245c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 800245e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002462:	f04f 0200 	mov.w	r2, #0
 8002466:	f04f 0300 	mov.w	r3, #0
 800246a:	0a02      	lsrs	r2, r0, #8
 800246c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002470:	0a0b      	lsrs	r3, r1, #8
 8002472:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002474:	3101      	adds	r1, #1
 8002476:	6838      	ldr	r0, [r7, #0]
 8002478:	4401      	add	r1, r0
 800247a:	b2d3      	uxtb	r3, r2
 800247c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 800247e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002482:	f04f 0200 	mov.w	r2, #0
 8002486:	f04f 0300 	mov.w	r3, #0
 800248a:	0c02      	lsrs	r2, r0, #16
 800248c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002490:	0c0b      	lsrs	r3, r1, #16
 8002492:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002494:	3102      	adds	r1, #2
 8002496:	6838      	ldr	r0, [r7, #0]
 8002498:	4401      	add	r1, r0
 800249a:	b2d3      	uxtb	r3, r2
 800249c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 800249e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80024a2:	f04f 0200 	mov.w	r2, #0
 80024a6:	f04f 0300 	mov.w	r3, #0
 80024aa:	0e02      	lsrs	r2, r0, #24
 80024ac:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80024b0:	0e0b      	lsrs	r3, r1, #24
 80024b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024b4:	3103      	adds	r1, #3
 80024b6:	6838      	ldr	r0, [r7, #0]
 80024b8:	4401      	add	r1, r0
 80024ba:	b2d3      	uxtb	r3, r2
 80024bc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 80024be:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80024c2:	f04f 0200 	mov.w	r2, #0
 80024c6:	f04f 0300 	mov.w	r3, #0
 80024ca:	000a      	movs	r2, r1
 80024cc:	2300      	movs	r3, #0
 80024ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024d0:	3104      	adds	r1, #4
 80024d2:	6838      	ldr	r0, [r7, #0]
 80024d4:	4401      	add	r1, r0
 80024d6:	b2d3      	uxtb	r3, r2
 80024d8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 80024da:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80024de:	f04f 0200 	mov.w	r2, #0
 80024e2:	f04f 0300 	mov.w	r3, #0
 80024e6:	0a0a      	lsrs	r2, r1, #8
 80024e8:	2300      	movs	r3, #0
 80024ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024ec:	3105      	adds	r1, #5
 80024ee:	6838      	ldr	r0, [r7, #0]
 80024f0:	4401      	add	r1, r0
 80024f2:	b2d3      	uxtb	r3, r2
 80024f4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 80024f6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80024fa:	f04f 0200 	mov.w	r2, #0
 80024fe:	f04f 0300 	mov.w	r3, #0
 8002502:	0c0a      	lsrs	r2, r1, #16
 8002504:	2300      	movs	r3, #0
 8002506:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002508:	3106      	adds	r1, #6
 800250a:	6838      	ldr	r0, [r7, #0]
 800250c:	4401      	add	r1, r0
 800250e:	b2d3      	uxtb	r3, r2
 8002510:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 8002512:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002516:	f04f 0200 	mov.w	r2, #0
 800251a:	f04f 0300 	mov.w	r3, #0
 800251e:	0e0a      	lsrs	r2, r1, #24
 8002520:	2300      	movs	r3, #0
 8002522:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002524:	3107      	adds	r1, #7
 8002526:	6838      	ldr	r0, [r7, #0]
 8002528:	4401      	add	r1, r0
 800252a:	b2d3      	uxtb	r3, r2
 800252c:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 800252e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002530:	3308      	adds	r3, #8
 8002532:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 8002534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8002536:	4618      	mov	r0, r3
 8002538:	372c      	adds	r7, #44	; 0x2c
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr

08002542 <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002542:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002546:	b0eb      	sub	sp, #428	; 0x1ac
 8002548:	af00      	add	r7, sp, #0
 800254a:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 800254e:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
    {
      int offset = 0;
 8002552:	2300      	movs	r3, #0
 8002554:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 8002558:	f04f 0200 	mov.w	r2, #0
 800255c:	f04f 0300 	mov.w	r3, #0
 8002560:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002564:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002568:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 800256c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002570:	4413      	add	r3, r2
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	b2db      	uxtb	r3, r3
 8002576:	2200      	movs	r2, #0
 8002578:	461c      	mov	r4, r3
 800257a:	4615      	mov	r5, r2
 800257c:	ea40 0804 	orr.w	r8, r0, r4
 8002580:	ea41 0905 	orr.w	r9, r1, r5
 8002584:	e9c7 8966 	strd	r8, r9, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002588:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800258c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002590:	1c5a      	adds	r2, r3, #1
 8002592:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002596:	4413      	add	r3, r2
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	b2db      	uxtb	r3, r3
 800259c:	2200      	movs	r2, #0
 800259e:	469a      	mov	sl, r3
 80025a0:	4693      	mov	fp, r2
 80025a2:	f04f 0200 	mov.w	r2, #0
 80025a6:	f04f 0300 	mov.w	r3, #0
 80025aa:	ea4f 230b 	mov.w	r3, fp, lsl #8
 80025ae:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 80025b2:	ea4f 220a 	mov.w	r2, sl, lsl #8
 80025b6:	ea40 0402 	orr.w	r4, r0, r2
 80025ba:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 80025be:	430b      	orrs	r3, r1
 80025c0:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80025c4:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 80025c8:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80025cc:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80025d0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80025d4:	1c9a      	adds	r2, r3, #2
 80025d6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80025da:	4413      	add	r3, r2
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	2200      	movs	r2, #0
 80025e2:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 80025e6:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 80025ea:	f04f 0200 	mov.w	r2, #0
 80025ee:	f04f 0300 	mov.w	r3, #0
 80025f2:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	; 0x170
 80025f6:	464c      	mov	r4, r9
 80025f8:	0423      	lsls	r3, r4, #16
 80025fa:	4644      	mov	r4, r8
 80025fc:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8002600:	4644      	mov	r4, r8
 8002602:	0422      	lsls	r2, r4, #16
 8002604:	ea40 0402 	orr.w	r4, r0, r2
 8002608:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 800260c:	430b      	orrs	r3, r1
 800260e:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8002612:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 8002616:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800261a:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800261e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002622:	1cda      	adds	r2, r3, #3
 8002624:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002628:	4413      	add	r3, r2
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	b2db      	uxtb	r3, r3
 800262e:	2200      	movs	r2, #0
 8002630:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8002634:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8002638:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 800263c:	4623      	mov	r3, r4
 800263e:	0a1b      	lsrs	r3, r3, #8
 8002640:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8002644:	4623      	mov	r3, r4
 8002646:	061b      	lsls	r3, r3, #24
 8002648:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 800264c:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 8002650:	4623      	mov	r3, r4
 8002652:	4303      	orrs	r3, r0
 8002654:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002658:	462b      	mov	r3, r5
 800265a:	430b      	orrs	r3, r1
 800265c:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002660:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 8002664:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002668:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800266c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002670:	1d1a      	adds	r2, r3, #4
 8002672:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002676:	4413      	add	r3, r2
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	b2db      	uxtb	r3, r3
 800267c:	2200      	movs	r2, #0
 800267e:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8002682:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8002686:	f04f 0200 	mov.w	r2, #0
 800268a:	f04f 0300 	mov.w	r3, #0
 800268e:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 8002692:	0023      	movs	r3, r4
 8002694:	2200      	movs	r2, #0
 8002696:	ea40 0402 	orr.w	r4, r0, r2
 800269a:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 800269e:	430b      	orrs	r3, r1
 80026a0:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 80026a4:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 80026a8:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80026ac:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80026b0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80026b4:	1d5a      	adds	r2, r3, #5
 80026b6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80026ba:	4413      	add	r3, r2
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	2200      	movs	r2, #0
 80026c2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 80026c6:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 80026ca:	f04f 0200 	mov.w	r2, #0
 80026ce:	f04f 0300 	mov.w	r3, #0
 80026d2:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 80026d6:	0223      	lsls	r3, r4, #8
 80026d8:	2200      	movs	r2, #0
 80026da:	ea40 0402 	orr.w	r4, r0, r2
 80026de:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 80026e2:	430b      	orrs	r3, r1
 80026e4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80026e8:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 80026ec:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80026f0:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80026f4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80026f8:	1d9a      	adds	r2, r3, #6
 80026fa:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80026fe:	4413      	add	r3, r2
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	b2db      	uxtb	r3, r3
 8002704:	2200      	movs	r2, #0
 8002706:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800270a:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 800270e:	f04f 0200 	mov.w	r2, #0
 8002712:	f04f 0300 	mov.w	r3, #0
 8002716:	f8d7 4128 	ldr.w	r4, [r7, #296]	; 0x128
 800271a:	0423      	lsls	r3, r4, #16
 800271c:	2200      	movs	r2, #0
 800271e:	ea40 0402 	orr.w	r4, r0, r2
 8002722:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 8002726:	430b      	orrs	r3, r1
 8002728:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800272c:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 8002730:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002734:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002738:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800273c:	1dda      	adds	r2, r3, #7
 800273e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002742:	4413      	add	r3, r2
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	b2db      	uxtb	r3, r3
 8002748:	2200      	movs	r2, #0
 800274a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800274e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002752:	f04f 0200 	mov.w	r2, #0
 8002756:	f04f 0300 	mov.w	r3, #0
 800275a:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 800275e:	0623      	lsls	r3, r4, #24
 8002760:	2200      	movs	r2, #0
 8002762:	ea40 0402 	orr.w	r4, r0, r2
 8002766:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 800276a:	430b      	orrs	r3, r1
 800276c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002770:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 8002774:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      this->x = u_x.real;
 8002778:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800277c:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002780:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 8002784:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002788:	3308      	adds	r3, #8
 800278a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 800278e:	f04f 0200 	mov.w	r2, #0
 8002792:	f04f 0300 	mov.w	r3, #0
 8002796:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800279a:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800279e:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 80027a2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80027a6:	4413      	add	r3, r2
 80027a8:	781b      	ldrb	r3, [r3, #0]
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	2200      	movs	r2, #0
 80027ae:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80027b2:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 80027b6:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 80027ba:	4623      	mov	r3, r4
 80027bc:	4303      	orrs	r3, r0
 80027be:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80027c2:	462b      	mov	r3, r5
 80027c4:	430b      	orrs	r3, r1
 80027c6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80027ca:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 80027ce:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80027d2:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80027d6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80027da:	1c5a      	adds	r2, r3, #1
 80027dc:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80027e0:	4413      	add	r3, r2
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	2200      	movs	r2, #0
 80027e8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80027ec:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 80027f0:	f04f 0200 	mov.w	r2, #0
 80027f4:	f04f 0300 	mov.w	r3, #0
 80027f8:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 80027fc:	464c      	mov	r4, r9
 80027fe:	0223      	lsls	r3, r4, #8
 8002800:	4644      	mov	r4, r8
 8002802:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002806:	4644      	mov	r4, r8
 8002808:	0222      	lsls	r2, r4, #8
 800280a:	ea40 0402 	orr.w	r4, r0, r2
 800280e:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 8002812:	430b      	orrs	r3, r1
 8002814:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002818:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 800281c:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002820:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002824:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002828:	1c9a      	adds	r2, r3, #2
 800282a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800282e:	4413      	add	r3, r2
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	b2db      	uxtb	r3, r3
 8002834:	2200      	movs	r2, #0
 8002836:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800283a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800283e:	f04f 0200 	mov.w	r2, #0
 8002842:	f04f 0300 	mov.w	r3, #0
 8002846:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 800284a:	464c      	mov	r4, r9
 800284c:	0423      	lsls	r3, r4, #16
 800284e:	4644      	mov	r4, r8
 8002850:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8002854:	4644      	mov	r4, r8
 8002856:	0422      	lsls	r2, r4, #16
 8002858:	ea40 0402 	orr.w	r4, r0, r2
 800285c:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 8002860:	430b      	orrs	r3, r1
 8002862:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002866:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 800286a:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800286e:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002872:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002876:	1cda      	adds	r2, r3, #3
 8002878:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800287c:	4413      	add	r3, r2
 800287e:	781b      	ldrb	r3, [r3, #0]
 8002880:	b2db      	uxtb	r3, r3
 8002882:	2200      	movs	r2, #0
 8002884:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002888:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800288c:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8002890:	4623      	mov	r3, r4
 8002892:	0a1b      	lsrs	r3, r3, #8
 8002894:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002898:	4623      	mov	r3, r4
 800289a:	061b      	lsls	r3, r3, #24
 800289c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80028a0:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80028a4:	4623      	mov	r3, r4
 80028a6:	4303      	orrs	r3, r0
 80028a8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80028ac:	462b      	mov	r3, r5
 80028ae:	430b      	orrs	r3, r1
 80028b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80028b4:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 80028b8:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80028bc:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80028c0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80028c4:	1d1a      	adds	r2, r3, #4
 80028c6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80028ca:	4413      	add	r3, r2
 80028cc:	781b      	ldrb	r3, [r3, #0]
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	2200      	movs	r2, #0
 80028d2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80028d6:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80028da:	f04f 0200 	mov.w	r2, #0
 80028de:	f04f 0300 	mov.w	r3, #0
 80028e2:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 80028e6:	0023      	movs	r3, r4
 80028e8:	2200      	movs	r2, #0
 80028ea:	ea40 0402 	orr.w	r4, r0, r2
 80028ee:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 80028f2:	430b      	orrs	r3, r1
 80028f4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80028f8:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 80028fc:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002900:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002904:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002908:	1d5a      	adds	r2, r3, #5
 800290a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800290e:	4413      	add	r3, r2
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	b2db      	uxtb	r3, r3
 8002914:	2200      	movs	r2, #0
 8002916:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800291a:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800291e:	f04f 0200 	mov.w	r2, #0
 8002922:	f04f 0300 	mov.w	r3, #0
 8002926:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 800292a:	0223      	lsls	r3, r4, #8
 800292c:	2200      	movs	r2, #0
 800292e:	ea40 0402 	orr.w	r4, r0, r2
 8002932:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8002936:	430b      	orrs	r3, r1
 8002938:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800293c:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8002940:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002944:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002948:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800294c:	1d9a      	adds	r2, r3, #6
 800294e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002952:	4413      	add	r3, r2
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	b2db      	uxtb	r3, r3
 8002958:	2200      	movs	r2, #0
 800295a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800295e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002962:	f04f 0200 	mov.w	r2, #0
 8002966:	f04f 0300 	mov.w	r3, #0
 800296a:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 800296e:	0423      	lsls	r3, r4, #16
 8002970:	2200      	movs	r2, #0
 8002972:	ea40 0402 	orr.w	r4, r0, r2
 8002976:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 800297a:	430b      	orrs	r3, r1
 800297c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002980:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8002984:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002988:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800298c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002990:	1dda      	adds	r2, r3, #7
 8002992:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002996:	4413      	add	r3, r2
 8002998:	781b      	ldrb	r3, [r3, #0]
 800299a:	b2db      	uxtb	r3, r3
 800299c:	2200      	movs	r2, #0
 800299e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80029a2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80029a6:	f04f 0200 	mov.w	r2, #0
 80029aa:	f04f 0300 	mov.w	r3, #0
 80029ae:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 80029b2:	0623      	lsls	r3, r4, #24
 80029b4:	2200      	movs	r2, #0
 80029b6:	ea40 0402 	orr.w	r4, r0, r2
 80029ba:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 80029be:	430b      	orrs	r3, r1
 80029c0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80029c4:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 80029c8:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      this->y = u_y.real;
 80029cc:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80029d0:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80029d4:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 80029d8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80029dc:	3308      	adds	r3, #8
 80029de:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 80029e2:	f04f 0200 	mov.w	r2, #0
 80029e6:	f04f 0300 	mov.w	r3, #0
 80029ea:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80029ee:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80029f2:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 80029f6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80029fa:	4413      	add	r3, r2
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	2200      	movs	r2, #0
 8002a02:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002a06:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002a0a:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8002a0e:	4623      	mov	r3, r4
 8002a10:	4303      	orrs	r3, r0
 8002a12:	67bb      	str	r3, [r7, #120]	; 0x78
 8002a14:	462b      	mov	r3, r5
 8002a16:	430b      	orrs	r3, r1
 8002a18:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002a1a:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8002a1e:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002a22:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002a26:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002a2a:	1c5a      	adds	r2, r3, #1
 8002a2c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002a30:	4413      	add	r3, r2
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	2200      	movs	r2, #0
 8002a38:	673b      	str	r3, [r7, #112]	; 0x70
 8002a3a:	677a      	str	r2, [r7, #116]	; 0x74
 8002a3c:	f04f 0200 	mov.w	r2, #0
 8002a40:	f04f 0300 	mov.w	r3, #0
 8002a44:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002a48:	464c      	mov	r4, r9
 8002a4a:	0223      	lsls	r3, r4, #8
 8002a4c:	4644      	mov	r4, r8
 8002a4e:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002a52:	4644      	mov	r4, r8
 8002a54:	0222      	lsls	r2, r4, #8
 8002a56:	ea40 0402 	orr.w	r4, r0, r2
 8002a5a:	66bc      	str	r4, [r7, #104]	; 0x68
 8002a5c:	430b      	orrs	r3, r1
 8002a5e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002a60:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8002a64:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002a68:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002a6c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002a70:	1c9a      	adds	r2, r3, #2
 8002a72:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002a76:	4413      	add	r3, r2
 8002a78:	781b      	ldrb	r3, [r3, #0]
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	663b      	str	r3, [r7, #96]	; 0x60
 8002a80:	667a      	str	r2, [r7, #100]	; 0x64
 8002a82:	f04f 0200 	mov.w	r2, #0
 8002a86:	f04f 0300 	mov.w	r3, #0
 8002a8a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002a8e:	464c      	mov	r4, r9
 8002a90:	0423      	lsls	r3, r4, #16
 8002a92:	4644      	mov	r4, r8
 8002a94:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8002a98:	4644      	mov	r4, r8
 8002a9a:	0422      	lsls	r2, r4, #16
 8002a9c:	ea40 0402 	orr.w	r4, r0, r2
 8002aa0:	65bc      	str	r4, [r7, #88]	; 0x58
 8002aa2:	430b      	orrs	r3, r1
 8002aa4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002aa6:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8002aaa:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002aae:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002ab2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002ab6:	1cda      	adds	r2, r3, #3
 8002ab8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002abc:	4413      	add	r3, r2
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	653b      	str	r3, [r7, #80]	; 0x50
 8002ac6:	657a      	str	r2, [r7, #84]	; 0x54
 8002ac8:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8002acc:	4623      	mov	r3, r4
 8002ace:	0a1b      	lsrs	r3, r3, #8
 8002ad0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ad2:	4623      	mov	r3, r4
 8002ad4:	061b      	lsls	r3, r3, #24
 8002ad6:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ad8:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8002adc:	4623      	mov	r3, r4
 8002ade:	4303      	orrs	r3, r0
 8002ae0:	643b      	str	r3, [r7, #64]	; 0x40
 8002ae2:	462b      	mov	r3, r5
 8002ae4:	430b      	orrs	r3, r1
 8002ae6:	647b      	str	r3, [r7, #68]	; 0x44
 8002ae8:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8002aec:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002af0:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002af4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002af8:	1d1a      	adds	r2, r3, #4
 8002afa:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002afe:	4413      	add	r3, r2
 8002b00:	781b      	ldrb	r3, [r3, #0]
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	2200      	movs	r2, #0
 8002b06:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b08:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002b0a:	f04f 0200 	mov.w	r2, #0
 8002b0e:	f04f 0300 	mov.w	r3, #0
 8002b12:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8002b14:	0023      	movs	r3, r4
 8002b16:	2200      	movs	r2, #0
 8002b18:	ea40 0402 	orr.w	r4, r0, r2
 8002b1c:	633c      	str	r4, [r7, #48]	; 0x30
 8002b1e:	430b      	orrs	r3, r1
 8002b20:	637b      	str	r3, [r7, #52]	; 0x34
 8002b22:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8002b26:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002b2a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002b2e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002b32:	1d5a      	adds	r2, r3, #5
 8002b34:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002b38:	4413      	add	r3, r2
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	2200      	movs	r2, #0
 8002b40:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b42:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002b44:	f04f 0200 	mov.w	r2, #0
 8002b48:	f04f 0300 	mov.w	r3, #0
 8002b4c:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8002b4e:	0223      	lsls	r3, r4, #8
 8002b50:	2200      	movs	r2, #0
 8002b52:	ea40 0402 	orr.w	r4, r0, r2
 8002b56:	623c      	str	r4, [r7, #32]
 8002b58:	430b      	orrs	r3, r1
 8002b5a:	627b      	str	r3, [r7, #36]	; 0x24
 8002b5c:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8002b60:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002b64:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002b68:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002b6c:	3306      	adds	r3, #6
 8002b6e:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8002b72:	4413      	add	r3, r2
 8002b74:	781b      	ldrb	r3, [r3, #0]
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	2200      	movs	r2, #0
 8002b7a:	61bb      	str	r3, [r7, #24]
 8002b7c:	61fa      	str	r2, [r7, #28]
 8002b7e:	f04f 0200 	mov.w	r2, #0
 8002b82:	f04f 0300 	mov.w	r3, #0
 8002b86:	69bc      	ldr	r4, [r7, #24]
 8002b88:	0423      	lsls	r3, r4, #16
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	ea40 0402 	orr.w	r4, r0, r2
 8002b90:	613c      	str	r4, [r7, #16]
 8002b92:	430b      	orrs	r3, r1
 8002b94:	617b      	str	r3, [r7, #20]
 8002b96:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002b9a:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002b9e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002ba2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002ba6:	3307      	adds	r3, #7
 8002ba8:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8002bac:	4413      	add	r3, r2
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	60bb      	str	r3, [r7, #8]
 8002bb6:	60fa      	str	r2, [r7, #12]
 8002bb8:	f04f 0200 	mov.w	r2, #0
 8002bbc:	f04f 0300 	mov.w	r3, #0
 8002bc0:	68bc      	ldr	r4, [r7, #8]
 8002bc2:	0623      	lsls	r3, r4, #24
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	ea40 0402 	orr.w	r4, r0, r2
 8002bca:	603c      	str	r4, [r7, #0]
 8002bcc:	430b      	orrs	r3, r1
 8002bce:	607b      	str	r3, [r7, #4]
 8002bd0:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002bd4:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      this->z = u_z.real;
 8002bd8:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8002bdc:	f8d7 1184 	ldr.w	r1, [r7, #388]	; 0x184
 8002be0:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 8002be4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002be8:	3308      	adds	r3, #8
 8002bea:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
     return offset;
 8002bee:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
    }
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f507 77d6 	add.w	r7, r7, #428	; 0x1ac
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002bfe:	4770      	bx	lr

08002c00 <_ZN13geometry_msgs7Vector37getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Vector3"; };
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	4b03      	ldr	r3, [pc, #12]	; (8002c18 <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	370c      	adds	r7, #12
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr
 8002c16:	bf00      	nop
 8002c18:	08008848 	.word	0x08008848

08002c1c <_ZN13geometry_msgs7Vector36getMD5Ev>:
    virtual const char * getMD5() override { return "4a842b65f413084dc2b10fb484ea7f17"; };
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	4b03      	ldr	r3, [pc, #12]	; (8002c34 <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 8002c26:	4618      	mov	r0, r3
 8002c28:	370c      	adds	r7, #12
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr
 8002c32:	bf00      	nop
 8002c34:	08008860 	.word	0x08008860

08002c38 <_ZN13geometry_msgs5TwistC1Ev>:
      typedef geometry_msgs::Vector3 _linear_type;
      _linear_type linear;
      typedef geometry_msgs::Vector3 _angular_type;
      _angular_type angular;

    Twist():
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b082      	sub	sp, #8
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
      linear(),
      angular()
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	4618      	mov	r0, r3
 8002c44:	f7fe fb2c 	bl	80012a0 <_ZN3ros3MsgC1Ev>
 8002c48:	4a08      	ldr	r2, [pc, #32]	; (8002c6c <_ZN13geometry_msgs5TwistC1Ev+0x34>)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	601a      	str	r2, [r3, #0]
      linear(),
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	3308      	adds	r3, #8
 8002c52:	4618      	mov	r0, r3
 8002c54:	f7ff fada 	bl	800220c <_ZN13geometry_msgs7Vector3C1Ev>
      angular()
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	3328      	adds	r3, #40	; 0x28
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f7ff fad5 	bl	800220c <_ZN13geometry_msgs7Vector3C1Ev>
    {
    }
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4618      	mov	r0, r3
 8002c66:	3708      	adds	r7, #8
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	080089ac 	.word	0x080089ac

08002c70 <_ZNK13geometry_msgs5Twist9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	60fb      	str	r3, [r7, #12]
      offset += this->linear.serialize(outbuffer + offset);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f103 0008 	add.w	r0, r3, #8
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	683a      	ldr	r2, [r7, #0]
 8002c88:	4413      	add	r3, r2
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	f7ff fae6 	bl	800225c <_ZNK13geometry_msgs7Vector39serializeEPh>
 8002c90:	4602      	mov	r2, r0
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	4413      	add	r3, r2
 8002c96:	60fb      	str	r3, [r7, #12]
      offset += this->angular.serialize(outbuffer + offset);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	683a      	ldr	r2, [r7, #0]
 8002ca2:	4413      	add	r3, r2
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	f7ff fad9 	bl	800225c <_ZNK13geometry_msgs7Vector39serializeEPh>
 8002caa:	4602      	mov	r2, r0
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	4413      	add	r3, r2
 8002cb0:	60fb      	str	r3, [r7, #12]
      return offset;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
    }
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3710      	adds	r7, #16
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <_ZN13geometry_msgs5Twist11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b084      	sub	sp, #16
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	60fb      	str	r3, [r7, #12]
      offset += this->linear.deserialize(inbuffer + offset);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	f103 0008 	add.w	r0, r3, #8
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	683a      	ldr	r2, [r7, #0]
 8002cd4:	4413      	add	r3, r2
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	f7ff fc33 	bl	8002542 <_ZN13geometry_msgs7Vector311deserializeEPh>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	4413      	add	r3, r2
 8002ce2:	60fb      	str	r3, [r7, #12]
      offset += this->angular.deserialize(inbuffer + offset);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	683a      	ldr	r2, [r7, #0]
 8002cee:	4413      	add	r3, r2
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	f7ff fc26 	bl	8002542 <_ZN13geometry_msgs7Vector311deserializeEPh>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	4413      	add	r3, r2
 8002cfc:	60fb      	str	r3, [r7, #12]
     return offset;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
    }
 8002d00:	4618      	mov	r0, r3
 8002d02:	3710      	adds	r7, #16
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <_ZN13geometry_msgs5Twist7getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Twist"; };
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	4b03      	ldr	r3, [pc, #12]	; (8002d20 <_ZN13geometry_msgs5Twist7getTypeEv+0x18>)
 8002d12:	4618      	mov	r0, r3
 8002d14:	370c      	adds	r7, #12
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr
 8002d1e:	bf00      	nop
 8002d20:	08008884 	.word	0x08008884

08002d24 <_ZN13geometry_msgs5Twist6getMD5Ev>:
    virtual const char * getMD5() override { return "9f195f881246fdfa2798d1d3eebca84a"; };
 8002d24:	b480      	push	{r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	4b03      	ldr	r3, [pc, #12]	; (8002d3c <_ZN13geometry_msgs5Twist6getMD5Ev+0x18>)
 8002d2e:	4618      	mov	r0, r3
 8002d30:	370c      	adds	r7, #12
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr
 8002d3a:	bf00      	nop
 8002d3c:	08008898 	.word	0x08008898

08002d40 <_ZN8std_msgs5Int16C1Ev>:
  {
    public:
      typedef int16_t _data_type;
      _data_type data;

    Int16():
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
      data(0)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f7fe faa8 	bl	80012a0 <_ZN3ros3MsgC1Ev>
 8002d50:	4a05      	ldr	r2, [pc, #20]	; (8002d68 <_ZN8std_msgs5Int16C1Ev+0x28>)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	601a      	str	r2, [r3, #0]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	809a      	strh	r2, [r3, #4]
    {
    }
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3708      	adds	r7, #8
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	08008994 	.word	0x08008994

08002d6c <_ZNK8std_msgs5Int169serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002d6c:	b480      	push	{r7}
 8002d6e:	b085      	sub	sp, #20
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
 8002d74:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002d76:	2300      	movs	r3, #0
 8002d78:	60fb      	str	r3, [r7, #12]
      union {
        int16_t real;
        uint16_t base;
      } u_data;
      u_data.real = this->data;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002d80:	813b      	strh	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 8002d82:	8939      	ldrh	r1, [r7, #8]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	683a      	ldr	r2, [r7, #0]
 8002d88:	4413      	add	r3, r2
 8002d8a:	b2ca      	uxtb	r2, r1
 8002d8c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_data.base >> (8 * 1)) & 0xFF;
 8002d8e:	893b      	ldrh	r3, [r7, #8]
 8002d90:	0a1b      	lsrs	r3, r3, #8
 8002d92:	b299      	uxth	r1, r3
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	3301      	adds	r3, #1
 8002d98:	683a      	ldr	r2, [r7, #0]
 8002d9a:	4413      	add	r3, r2
 8002d9c:	b2ca      	uxtb	r2, r1
 8002d9e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	3302      	adds	r3, #2
 8002da4:	60fb      	str	r3, [r7, #12]
      return offset;
 8002da6:	68fb      	ldr	r3, [r7, #12]
    }
 8002da8:	4618      	mov	r0, r3
 8002daa:	3714      	adds	r7, #20
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr

08002db4 <_ZN8std_msgs5Int1611deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002db4:	b480      	push	{r7}
 8002db6:	b085      	sub	sp, #20
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	60fb      	str	r3, [r7, #12]
      union {
        int16_t real;
        uint16_t base;
      } u_data;
      u_data.base = 0;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	813b      	strh	r3, [r7, #8]
      u_data.base |= ((uint16_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002dc6:	893a      	ldrh	r2, [r7, #8]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6839      	ldr	r1, [r7, #0]
 8002dcc:	440b      	add	r3, r1
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	b29b      	uxth	r3, r3
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	813b      	strh	r3, [r7, #8]
      u_data.base |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002dd8:	893b      	ldrh	r3, [r7, #8]
 8002dda:	b21a      	sxth	r2, r3
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	3301      	adds	r3, #1
 8002de0:	6839      	ldr	r1, [r7, #0]
 8002de2:	440b      	add	r3, r1
 8002de4:	781b      	ldrb	r3, [r3, #0]
 8002de6:	021b      	lsls	r3, r3, #8
 8002de8:	b21b      	sxth	r3, r3
 8002dea:	4313      	orrs	r3, r2
 8002dec:	b21b      	sxth	r3, r3
 8002dee:	b29b      	uxth	r3, r3
 8002df0:	813b      	strh	r3, [r7, #8]
      this->data = u_data.real;
 8002df2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->data);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	3302      	adds	r3, #2
 8002dfe:	60fb      	str	r3, [r7, #12]
     return offset;
 8002e00:	68fb      	ldr	r3, [r7, #12]
    }
 8002e02:	4618      	mov	r0, r3
 8002e04:	3714      	adds	r7, #20
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr
	...

08002e10 <_ZN8std_msgs5Int167getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Int16"; };
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
 8002e18:	4b03      	ldr	r3, [pc, #12]	; (8002e28 <_ZN8std_msgs5Int167getTypeEv+0x18>)
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	370c      	adds	r7, #12
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr
 8002e26:	bf00      	nop
 8002e28:	080088bc 	.word	0x080088bc

08002e2c <_ZN8std_msgs5Int166getMD5Ev>:
    virtual const char * getMD5() override { return "8524586e34fbd7cb1c08c5f5f1ca0e57"; };
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	4b03      	ldr	r3, [pc, #12]	; (8002e44 <_ZN8std_msgs5Int166getMD5Ev+0x18>)
 8002e36:	4618      	mov	r0, r3
 8002e38:	370c      	adds	r7, #12
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr
 8002e42:	bf00      	nop
 8002e44:	080088cc 	.word	0x080088cc

08002e48 <_Z10cmd_vel_cbRKN13geometry_msgs5TwistE>:
 float demandz=0;
 float temp = 0.0;
 double demand_speed_left;
 double demand_speed_right;

 void cmd_vel_cb( const geometry_msgs::Twist& twist){
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b082      	sub	sp, #8
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
   demandx = twist.linear.x;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002e56:	4610      	mov	r0, r2
 8002e58:	4619      	mov	r1, r3
 8002e5a:	f7fd fdd3 	bl	8000a04 <__aeabi_d2f>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	4a07      	ldr	r2, [pc, #28]	; (8002e80 <_Z10cmd_vel_cbRKN13geometry_msgs5TwistE+0x38>)
 8002e62:	6013      	str	r3, [r2, #0]
   demandz = twist.angular.z;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8002e6a:	4610      	mov	r0, r2
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	f7fd fdc9 	bl	8000a04 <__aeabi_d2f>
 8002e72:	4603      	mov	r3, r0
 8002e74:	4a03      	ldr	r2, [pc, #12]	; (8002e84 <_Z10cmd_vel_cbRKN13geometry_msgs5TwistE+0x3c>)
 8002e76:	6013      	str	r3, [r2, #0]
 }
 8002e78:	bf00      	nop
 8002e7a:	3708      	adds	r7, #8
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	20000234 	.word	0x20000234
 8002e84:	20000238 	.word	0x20000238

08002e88 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8002e88:	b480      	push	{r7}
 8002e8a:	b083      	sub	sp, #12
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	4a04      	ldr	r2, [pc, #16]	; (8002ea4 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	601a      	str	r2, [r3, #0]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4618      	mov	r0, r3
 8002e9a:	370c      	adds	r7, #12
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr
 8002ea4:	080089f4 	.word	0x080089f4

08002ea8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 512,
         int OUTPUT_SIZE = 512>
class NodeHandle_ : public NodeHandleBase_
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b082      	sub	sp, #8
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f7ff ffe8 	bl	8002e88 <_ZN3ros15NodeHandleBase_C1Ev>
 8002eb8:	4a36      	ldr	r2, [pc, #216]	; (8002f94 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xec>)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	601a      	str	r2, [r3, #0]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	3304      	adds	r3, #4
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f7ff f876 	bl	8001fb4 <_ZN13STM32HardwareC1Ev>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2200      	movs	r2, #0
 8002edc:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8002eee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ef2:	2100      	movs	r1, #0
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f005 fade 	bl	80084b6 <memset>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8002f00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f04:	2100      	movs	r1, #0
 8002f06:	4618      	mov	r0, r3
 8002f08:	f005 fad5 	bl	80084b6 <memset>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	f603 0324 	addw	r3, r3, #2084	; 0x824
 8002f12:	2264      	movs	r2, #100	; 0x64
 8002f14:	2100      	movs	r1, #0
 8002f16:	4618      	mov	r0, r3
 8002f18:	f005 facd 	bl	80084b6 <memset>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f603 0388 	addw	r3, r3, #2184	; 0x888
 8002f22:	2264      	movs	r2, #100	; 0x64
 8002f24:	2100      	movs	r1, #0
 8002f26:	4618      	mov	r0, r3
 8002f28:	f005 fac5 	bl	80084b6 <memset>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2200      	movs	r2, #0
 8002f38:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2200      	movs	r2, #0
 8002f48:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2200      	movs	r2, #0
 8002f58:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2200      	movs	r2, #0
 8002f68:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2200      	movs	r2, #0
 8002f78:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	f603 1314 	addw	r3, r3, #2324	; 0x914
 8002f82:	4618      	mov	r0, r3
 8002f84:	f7fe fd00 	bl	8001988 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3708      	adds	r7, #8
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	08008980 	.word	0x08008980

08002f98 <_Z10publishPosv>:
ros::Publisher right_wheel_pub("rwheel", &right_wheel_msg);

ros::Subscriber<geometry_msgs::Twist> sub("cmd_vel", cmd_vel_cb );

void publishPos()
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	af00      	add	r7, sp, #0
  left_wheel_msg.data = pos_act_left;
 8002f9c:	4b09      	ldr	r3, [pc, #36]	; (8002fc4 <_Z10publishPosv+0x2c>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	b21a      	sxth	r2, r3
 8002fa2:	4b09      	ldr	r3, [pc, #36]	; (8002fc8 <_Z10publishPosv+0x30>)
 8002fa4:	809a      	strh	r2, [r3, #4]
  right_wheel_msg.data = pos_act_right;
 8002fa6:	4b09      	ldr	r3, [pc, #36]	; (8002fcc <_Z10publishPosv+0x34>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	b21a      	sxth	r2, r3
 8002fac:	4b08      	ldr	r3, [pc, #32]	; (8002fd0 <_Z10publishPosv+0x38>)
 8002fae:	809a      	strh	r2, [r3, #4]
  left_wheel_pub.publish(&left_wheel_msg);
 8002fb0:	4905      	ldr	r1, [pc, #20]	; (8002fc8 <_Z10publishPosv+0x30>)
 8002fb2:	4808      	ldr	r0, [pc, #32]	; (8002fd4 <_Z10publishPosv+0x3c>)
 8002fb4:	f7fe ffcb 	bl	8001f4e <_ZN3ros9Publisher7publishEPKNS_3MsgE>
  right_wheel_pub.publish(&right_wheel_msg);
 8002fb8:	4905      	ldr	r1, [pc, #20]	; (8002fd0 <_Z10publishPosv+0x38>)
 8002fba:	4807      	ldr	r0, [pc, #28]	; (8002fd8 <_Z10publishPosv+0x40>)
 8002fbc:	f7fe ffc7 	bl	8001f4e <_ZN3ros9Publisher7publishEPKNS_3MsgE>
}
 8002fc0:	bf00      	nop
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	20000224 	.word	0x20000224
 8002fc8:	20000b8c 	.word	0x20000b8c
 8002fcc:	20000228 	.word	0x20000228
 8002fd0:	20000ba8 	.word	0x20000ba8
 8002fd4:	20000b94 	.word	0x20000b94
 8002fd8:	20000bb0 	.word	0x20000bb0
 8002fdc:	00000000 	.word	0x00000000

08002fe0 <HAL_TIM_PeriodElapsedCallback>:



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b082      	sub	sp, #8
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]

	rpm = (int)((rightenc - rightenco)*0.6); //(No. of ticks Now - No. of Ticks Old)*60/(50*10^-3) (old calc)
 8002fe8:	4b2b      	ldr	r3, [pc, #172]	; (8003098 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	4b2b      	ldr	r3, [pc, #172]	; (800309c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f7fd fa62 	bl	80004bc <__aeabi_i2d>
 8002ff8:	a323      	add	r3, pc, #140	; (adr r3, 8003088 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8002ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ffe:	f7fd fac7 	bl	8000590 <__aeabi_dmul>
 8003002:	4602      	mov	r2, r0
 8003004:	460b      	mov	r3, r1
 8003006:	4610      	mov	r0, r2
 8003008:	4619      	mov	r1, r3
 800300a:	f7fd fcd3 	bl	80009b4 <__aeabi_d2iz>
 800300e:	4603      	mov	r3, r0
 8003010:	4a23      	ldr	r2, [pc, #140]	; (80030a0 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8003012:	6013      	str	r3, [r2, #0]
	rightvel = (int)((rpm * 6.28 * 7.5)/(60));
 8003014:	4b22      	ldr	r3, [pc, #136]	; (80030a0 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4618      	mov	r0, r3
 800301a:	f7fd fa4f 	bl	80004bc <__aeabi_i2d>
 800301e:	a31c      	add	r3, pc, #112	; (adr r3, 8003090 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8003020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003024:	f7fd fab4 	bl	8000590 <__aeabi_dmul>
 8003028:	4602      	mov	r2, r0
 800302a:	460b      	mov	r3, r1
 800302c:	4610      	mov	r0, r2
 800302e:	4619      	mov	r1, r3
 8003030:	f04f 0200 	mov.w	r2, #0
 8003034:	4b1b      	ldr	r3, [pc, #108]	; (80030a4 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8003036:	f7fd faab 	bl	8000590 <__aeabi_dmul>
 800303a:	4602      	mov	r2, r0
 800303c:	460b      	mov	r3, r1
 800303e:	4610      	mov	r0, r2
 8003040:	4619      	mov	r1, r3
 8003042:	f04f 0200 	mov.w	r2, #0
 8003046:	4b18      	ldr	r3, [pc, #96]	; (80030a8 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8003048:	f7fd fbcc 	bl	80007e4 <__aeabi_ddiv>
 800304c:	4602      	mov	r2, r0
 800304e:	460b      	mov	r3, r1
 8003050:	4610      	mov	r0, r2
 8003052:	4619      	mov	r1, r3
 8003054:	f7fd fcae 	bl	80009b4 <__aeabi_d2iz>
 8003058:	4603      	mov	r3, r0
 800305a:	4a14      	ldr	r2, [pc, #80]	; (80030ac <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800305c:	6013      	str	r3, [r2, #0]
	rightenco = rightenc;
 800305e:	4b0e      	ldr	r3, [pc, #56]	; (8003098 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a0e      	ldr	r2, [pc, #56]	; (800309c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8003064:	6013      	str	r3, [r2, #0]
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8003066:	2120      	movs	r1, #32
 8003068:	4811      	ldr	r0, [pc, #68]	; (80030b0 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 800306a:	f002 f953 	bl	8005314 <HAL_GPIO_TogglePin>
	pos_act_left = leftenc;
 800306e:	4b11      	ldr	r3, [pc, #68]	; (80030b4 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a11      	ldr	r2, [pc, #68]	; (80030b8 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8003074:	6013      	str	r3, [r2, #0]
	pos_act_right = rightenc;
 8003076:	4b08      	ldr	r3, [pc, #32]	; (8003098 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a10      	ldr	r2, [pc, #64]	; (80030bc <HAL_TIM_PeriodElapsedCallback+0xdc>)
 800307c:	6013      	str	r3, [r2, #0]

}
 800307e:	bf00      	nop
 8003080:	3708      	adds	r7, #8
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	33333333 	.word	0x33333333
 800308c:	3fe33333 	.word	0x3fe33333
 8003090:	51eb851f 	.word	0x51eb851f
 8003094:	40191eb8 	.word	0x40191eb8
 8003098:	2000021c 	.word	0x2000021c
 800309c:	20000220 	.word	0x20000220
 80030a0:	20000230 	.word	0x20000230
 80030a4:	401e0000 	.word	0x401e0000
 80030a8:	404e0000 	.word	0x404e0000
 80030ac:	2000022c 	.word	0x2000022c
 80030b0:	40020000 	.word	0x40020000
 80030b4:	20000218 	.word	0x20000218
 80030b8:	20000224 	.word	0x20000224
 80030bc:	20000228 	.word	0x20000228

080030c0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_PIN)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b082      	sub	sp, #8
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	4603      	mov	r3, r0
 80030c8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_PIN == LeftEncoderA_Pin)
 80030ca:	88fb      	ldrh	r3, [r7, #6]
 80030cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030d0:	d167      	bne.n	80031a2 <HAL_GPIO_EXTI_Callback+0xe2>
	{
		if(HAL_GPIO_ReadPin(LeftEncoderA_GPIO_Port, LeftEncoderA_Pin) == 1)
 80030d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80030d6:	4869      	ldr	r0, [pc, #420]	; (800327c <HAL_GPIO_EXTI_Callback+0x1bc>)
 80030d8:	f002 f904 	bl	80052e4 <HAL_GPIO_ReadPin>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b01      	cmp	r3, #1
 80030e0:	bf0c      	ite	eq
 80030e2:	2301      	moveq	r3, #1
 80030e4:	2300      	movne	r3, #0
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d026      	beq.n	800313a <HAL_GPIO_EXTI_Callback+0x7a>
		{
			if(HAL_GPIO_ReadPin(GPIOA, LeftEncoderB_Pin) == 1) leftenc++;
 80030ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80030f0:	4863      	ldr	r0, [pc, #396]	; (8003280 <HAL_GPIO_EXTI_Callback+0x1c0>)
 80030f2:	f002 f8f7 	bl	80052e4 <HAL_GPIO_ReadPin>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	bf0c      	ite	eq
 80030fc:	2301      	moveq	r3, #1
 80030fe:	2300      	movne	r3, #0
 8003100:	b2db      	uxtb	r3, r3
 8003102:	2b00      	cmp	r3, #0
 8003104:	d005      	beq.n	8003112 <HAL_GPIO_EXTI_Callback+0x52>
 8003106:	4b5f      	ldr	r3, [pc, #380]	; (8003284 <HAL_GPIO_EXTI_Callback+0x1c4>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	3301      	adds	r3, #1
 800310c:	4a5d      	ldr	r2, [pc, #372]	; (8003284 <HAL_GPIO_EXTI_Callback+0x1c4>)
 800310e:	6013      	str	r3, [r2, #0]
 8003110:	e0ad      	b.n	800326e <HAL_GPIO_EXTI_Callback+0x1ae>
			else if(HAL_GPIO_ReadPin(GPIOA, LeftEncoderB_Pin) == 0) leftenc--;
 8003112:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003116:	485a      	ldr	r0, [pc, #360]	; (8003280 <HAL_GPIO_EXTI_Callback+0x1c0>)
 8003118:	f002 f8e4 	bl	80052e4 <HAL_GPIO_ReadPin>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	bf0c      	ite	eq
 8003122:	2301      	moveq	r3, #1
 8003124:	2300      	movne	r3, #0
 8003126:	b2db      	uxtb	r3, r3
 8003128:	2b00      	cmp	r3, #0
 800312a:	f000 80a0 	beq.w	800326e <HAL_GPIO_EXTI_Callback+0x1ae>
 800312e:	4b55      	ldr	r3, [pc, #340]	; (8003284 <HAL_GPIO_EXTI_Callback+0x1c4>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	3b01      	subs	r3, #1
 8003134:	4a53      	ldr	r2, [pc, #332]	; (8003284 <HAL_GPIO_EXTI_Callback+0x1c4>)
 8003136:	6013      	str	r3, [r2, #0]
 8003138:	e099      	b.n	800326e <HAL_GPIO_EXTI_Callback+0x1ae>
		}
		else if(HAL_GPIO_ReadPin(LeftEncoderA_GPIO_Port, LeftEncoderA_Pin) == 0)
 800313a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800313e:	484f      	ldr	r0, [pc, #316]	; (800327c <HAL_GPIO_EXTI_Callback+0x1bc>)
 8003140:	f002 f8d0 	bl	80052e4 <HAL_GPIO_ReadPin>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	bf0c      	ite	eq
 800314a:	2301      	moveq	r3, #1
 800314c:	2300      	movne	r3, #0
 800314e:	b2db      	uxtb	r3, r3
 8003150:	2b00      	cmp	r3, #0
 8003152:	f000 808c 	beq.w	800326e <HAL_GPIO_EXTI_Callback+0x1ae>
		{
			if(HAL_GPIO_ReadPin(GPIOA, LeftEncoderB_Pin) == 0) leftenc++;
 8003156:	f44f 7180 	mov.w	r1, #256	; 0x100
 800315a:	4849      	ldr	r0, [pc, #292]	; (8003280 <HAL_GPIO_EXTI_Callback+0x1c0>)
 800315c:	f002 f8c2 	bl	80052e4 <HAL_GPIO_ReadPin>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	bf0c      	ite	eq
 8003166:	2301      	moveq	r3, #1
 8003168:	2300      	movne	r3, #0
 800316a:	b2db      	uxtb	r3, r3
 800316c:	2b00      	cmp	r3, #0
 800316e:	d005      	beq.n	800317c <HAL_GPIO_EXTI_Callback+0xbc>
 8003170:	4b44      	ldr	r3, [pc, #272]	; (8003284 <HAL_GPIO_EXTI_Callback+0x1c4>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	3301      	adds	r3, #1
 8003176:	4a43      	ldr	r2, [pc, #268]	; (8003284 <HAL_GPIO_EXTI_Callback+0x1c4>)
 8003178:	6013      	str	r3, [r2, #0]
 800317a:	e078      	b.n	800326e <HAL_GPIO_EXTI_Callback+0x1ae>
			else if(HAL_GPIO_ReadPin(GPIOA, LeftEncoderB_Pin) == 1) leftenc--;
 800317c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003180:	483f      	ldr	r0, [pc, #252]	; (8003280 <HAL_GPIO_EXTI_Callback+0x1c0>)
 8003182:	f002 f8af 	bl	80052e4 <HAL_GPIO_ReadPin>
 8003186:	4603      	mov	r3, r0
 8003188:	2b01      	cmp	r3, #1
 800318a:	bf0c      	ite	eq
 800318c:	2301      	moveq	r3, #1
 800318e:	2300      	movne	r3, #0
 8003190:	b2db      	uxtb	r3, r3
 8003192:	2b00      	cmp	r3, #0
 8003194:	d06b      	beq.n	800326e <HAL_GPIO_EXTI_Callback+0x1ae>
 8003196:	4b3b      	ldr	r3, [pc, #236]	; (8003284 <HAL_GPIO_EXTI_Callback+0x1c4>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	3b01      	subs	r3, #1
 800319c:	4a39      	ldr	r2, [pc, #228]	; (8003284 <HAL_GPIO_EXTI_Callback+0x1c4>)
 800319e:	6013      	str	r3, [r2, #0]
 80031a0:	e065      	b.n	800326e <HAL_GPIO_EXTI_Callback+0x1ae>
		}
	}
	else if(GPIO_PIN == RightEncoderA_Pin)
 80031a2:	88fb      	ldrh	r3, [r7, #6]
 80031a4:	2b40      	cmp	r3, #64	; 0x40
 80031a6:	d162      	bne.n	800326e <HAL_GPIO_EXTI_Callback+0x1ae>
	{
		if(HAL_GPIO_ReadPin(RightEncoderA_GPIO_Port, RightEncoderA_Pin) == 1)
 80031a8:	2140      	movs	r1, #64	; 0x40
 80031aa:	4837      	ldr	r0, [pc, #220]	; (8003288 <HAL_GPIO_EXTI_Callback+0x1c8>)
 80031ac:	f002 f89a 	bl	80052e4 <HAL_GPIO_ReadPin>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	bf0c      	ite	eq
 80031b6:	2301      	moveq	r3, #1
 80031b8:	2300      	movne	r3, #0
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d025      	beq.n	800320c <HAL_GPIO_EXTI_Callback+0x14c>
		{
			if(HAL_GPIO_ReadPin(GPIOB, RightEncoderB_Pin) == 0) rightenc++;
 80031c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80031c4:	482d      	ldr	r0, [pc, #180]	; (800327c <HAL_GPIO_EXTI_Callback+0x1bc>)
 80031c6:	f002 f88d 	bl	80052e4 <HAL_GPIO_ReadPin>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	bf0c      	ite	eq
 80031d0:	2301      	moveq	r3, #1
 80031d2:	2300      	movne	r3, #0
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d005      	beq.n	80031e6 <HAL_GPIO_EXTI_Callback+0x126>
 80031da:	4b2c      	ldr	r3, [pc, #176]	; (800328c <HAL_GPIO_EXTI_Callback+0x1cc>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	3301      	adds	r3, #1
 80031e0:	4a2a      	ldr	r2, [pc, #168]	; (800328c <HAL_GPIO_EXTI_Callback+0x1cc>)
 80031e2:	6013      	str	r3, [r2, #0]
 80031e4:	e043      	b.n	800326e <HAL_GPIO_EXTI_Callback+0x1ae>
			else if(HAL_GPIO_ReadPin(GPIOB, RightEncoderB_Pin) == 1) rightenc--;
 80031e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80031ea:	4824      	ldr	r0, [pc, #144]	; (800327c <HAL_GPIO_EXTI_Callback+0x1bc>)
 80031ec:	f002 f87a 	bl	80052e4 <HAL_GPIO_ReadPin>
 80031f0:	4603      	mov	r3, r0
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	bf0c      	ite	eq
 80031f6:	2301      	moveq	r3, #1
 80031f8:	2300      	movne	r3, #0
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d036      	beq.n	800326e <HAL_GPIO_EXTI_Callback+0x1ae>
 8003200:	4b22      	ldr	r3, [pc, #136]	; (800328c <HAL_GPIO_EXTI_Callback+0x1cc>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	3b01      	subs	r3, #1
 8003206:	4a21      	ldr	r2, [pc, #132]	; (800328c <HAL_GPIO_EXTI_Callback+0x1cc>)
 8003208:	6013      	str	r3, [r2, #0]
 800320a:	e030      	b.n	800326e <HAL_GPIO_EXTI_Callback+0x1ae>
		}
		else if(HAL_GPIO_ReadPin(RightEncoderA_GPIO_Port, RightEncoderA_Pin) == 0)
 800320c:	2140      	movs	r1, #64	; 0x40
 800320e:	481e      	ldr	r0, [pc, #120]	; (8003288 <HAL_GPIO_EXTI_Callback+0x1c8>)
 8003210:	f002 f868 	bl	80052e4 <HAL_GPIO_ReadPin>
 8003214:	4603      	mov	r3, r0
 8003216:	2b00      	cmp	r3, #0
 8003218:	bf0c      	ite	eq
 800321a:	2301      	moveq	r3, #1
 800321c:	2300      	movne	r3, #0
 800321e:	b2db      	uxtb	r3, r3
 8003220:	2b00      	cmp	r3, #0
 8003222:	d024      	beq.n	800326e <HAL_GPIO_EXTI_Callback+0x1ae>
		{
			if(HAL_GPIO_ReadPin(GPIOB, RightEncoderB_Pin) == 1) rightenc++;
 8003224:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003228:	4814      	ldr	r0, [pc, #80]	; (800327c <HAL_GPIO_EXTI_Callback+0x1bc>)
 800322a:	f002 f85b 	bl	80052e4 <HAL_GPIO_ReadPin>
 800322e:	4603      	mov	r3, r0
 8003230:	2b01      	cmp	r3, #1
 8003232:	bf0c      	ite	eq
 8003234:	2301      	moveq	r3, #1
 8003236:	2300      	movne	r3, #0
 8003238:	b2db      	uxtb	r3, r3
 800323a:	2b00      	cmp	r3, #0
 800323c:	d005      	beq.n	800324a <HAL_GPIO_EXTI_Callback+0x18a>
 800323e:	4b13      	ldr	r3, [pc, #76]	; (800328c <HAL_GPIO_EXTI_Callback+0x1cc>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	3301      	adds	r3, #1
 8003244:	4a11      	ldr	r2, [pc, #68]	; (800328c <HAL_GPIO_EXTI_Callback+0x1cc>)
 8003246:	6013      	str	r3, [r2, #0]
 8003248:	e011      	b.n	800326e <HAL_GPIO_EXTI_Callback+0x1ae>
			else if(HAL_GPIO_ReadPin(GPIOB, RightEncoderB_Pin) == 0) rightenc--;
 800324a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800324e:	480b      	ldr	r0, [pc, #44]	; (800327c <HAL_GPIO_EXTI_Callback+0x1bc>)
 8003250:	f002 f848 	bl	80052e4 <HAL_GPIO_ReadPin>
 8003254:	4603      	mov	r3, r0
 8003256:	2b00      	cmp	r3, #0
 8003258:	bf0c      	ite	eq
 800325a:	2301      	moveq	r3, #1
 800325c:	2300      	movne	r3, #0
 800325e:	b2db      	uxtb	r3, r3
 8003260:	2b00      	cmp	r3, #0
 8003262:	d004      	beq.n	800326e <HAL_GPIO_EXTI_Callback+0x1ae>
 8003264:	4b09      	ldr	r3, [pc, #36]	; (800328c <HAL_GPIO_EXTI_Callback+0x1cc>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	3b01      	subs	r3, #1
 800326a:	4a08      	ldr	r2, [pc, #32]	; (800328c <HAL_GPIO_EXTI_Callback+0x1cc>)
 800326c:	6013      	str	r3, [r2, #0]
		}
	}
	flag = 1;
 800326e:	4b08      	ldr	r3, [pc, #32]	; (8003290 <HAL_GPIO_EXTI_Callback+0x1d0>)
 8003270:	2201      	movs	r2, #1
 8003272:	601a      	str	r2, [r3, #0]
}
 8003274:	bf00      	nop
 8003276:	3708      	adds	r7, #8
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}
 800327c:	40020400 	.word	0x40020400
 8003280:	40020000 	.word	0x40020000
 8003284:	20000218 	.word	0x20000218
 8003288:	40020800 	.word	0x40020800
 800328c:	2000021c 	.word	0x2000021c
 8003290:	20000214 	.word	0x20000214

08003294 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8003294:	b580      	push	{r7, lr}
 8003296:	b082      	sub	sp, #8
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  nh.getHardware()->flush();
 800329c:	4805      	ldr	r0, [pc, #20]	; (80032b4 <HAL_UART_TxCpltCallback+0x20>)
 800329e:	f000 f937 	bl	8003510 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 80032a2:	4603      	mov	r3, r0
 80032a4:	4618      	mov	r0, r3
 80032a6:	f7fe feeb 	bl	8002080 <_ZN13STM32Hardware5flushEv>
}
 80032aa:	bf00      	nop
 80032ac:	3708      	adds	r7, #8
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	20000250 	.word	0x20000250

080032b8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b082      	sub	sp, #8
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  nh.getHardware()->reset_rbuf();
 80032c0:	4805      	ldr	r0, [pc, #20]	; (80032d8 <HAL_UART_RxCpltCallback+0x20>)
 80032c2:	f000 f925 	bl	8003510 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 80032c6:	4603      	mov	r3, r0
 80032c8:	4618      	mov	r0, r3
 80032ca:	f7fe fe9a 	bl	8002002 <_ZN13STM32Hardware10reset_rbufEv>
}
 80032ce:	bf00      	nop
 80032d0:	3708      	adds	r7, #8
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	20000250 	.word	0x20000250

080032dc <setup>:

void setup()
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	af00      	add	r7, sp, #0
	nh.initNode();
 80032e0:	4808      	ldr	r0, [pc, #32]	; (8003304 <setup+0x28>)
 80032e2:	f000 f921 	bl	8003528 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
	nh.advertise(left_wheel_pub);
 80032e6:	4908      	ldr	r1, [pc, #32]	; (8003308 <setup+0x2c>)
 80032e8:	4806      	ldr	r0, [pc, #24]	; (8003304 <setup+0x28>)
 80032ea:	f000 f93a 	bl	8003562 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
	nh.advertise(right_wheel_pub);
 80032ee:	4907      	ldr	r1, [pc, #28]	; (800330c <setup+0x30>)
 80032f0:	4804      	ldr	r0, [pc, #16]	; (8003304 <setup+0x28>)
 80032f2:	f000 f936 	bl	8003562 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
	nh.subscribe(sub);
 80032f6:	4906      	ldr	r1, [pc, #24]	; (8003310 <setup+0x34>)
 80032f8:	4802      	ldr	r0, [pc, #8]	; (8003304 <setup+0x28>)
 80032fa:	f000 f962 	bl	80035c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>


}
 80032fe:	bf00      	nop
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	20000250 	.word	0x20000250
 8003308:	20000b94 	.word	0x20000b94
 800330c:	20000bb0 	.word	0x20000bb0
 8003310:	20000bc8 	.word	0x20000bc8

08003314 <loop>:
void loop()
{
 8003314:	b580      	push	{r7, lr}
 8003316:	af00      	add	r7, sp, #0
	publishPos();
 8003318:	f7ff fe3e 	bl	8002f98 <_Z10publishPosv>
	nh.spinOnce();
 800331c:	4838      	ldr	r0, [pc, #224]	; (8003400 <loop+0xec>)
 800331e:	f000 f97b 	bl	8003618 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>

	demand_speed_left = demandx - (demandz*temp);
 8003322:	4b38      	ldr	r3, [pc, #224]	; (8003404 <loop+0xf0>)
 8003324:	ed93 7a00 	vldr	s14, [r3]
 8003328:	4b37      	ldr	r3, [pc, #220]	; (8003408 <loop+0xf4>)
 800332a:	edd3 6a00 	vldr	s13, [r3]
 800332e:	4b37      	ldr	r3, [pc, #220]	; (800340c <loop+0xf8>)
 8003330:	edd3 7a00 	vldr	s15, [r3]
 8003334:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003338:	ee77 7a67 	vsub.f32	s15, s14, s15
 800333c:	ee17 0a90 	vmov	r0, s15
 8003340:	f7fd f8ce 	bl	80004e0 <__aeabi_f2d>
 8003344:	4602      	mov	r2, r0
 8003346:	460b      	mov	r3, r1
 8003348:	4931      	ldr	r1, [pc, #196]	; (8003410 <loop+0xfc>)
 800334a:	e9c1 2300 	strd	r2, r3, [r1]
	demand_speed_right = demandx + (demandz*temp);
 800334e:	4b2e      	ldr	r3, [pc, #184]	; (8003408 <loop+0xf4>)
 8003350:	ed93 7a00 	vldr	s14, [r3]
 8003354:	4b2d      	ldr	r3, [pc, #180]	; (800340c <loop+0xf8>)
 8003356:	edd3 7a00 	vldr	s15, [r3]
 800335a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800335e:	4b29      	ldr	r3, [pc, #164]	; (8003404 <loop+0xf0>)
 8003360:	edd3 7a00 	vldr	s15, [r3]
 8003364:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003368:	ee17 0a90 	vmov	r0, s15
 800336c:	f7fd f8b8 	bl	80004e0 <__aeabi_f2d>
 8003370:	4602      	mov	r2, r0
 8003372:	460b      	mov	r3, r1
 8003374:	4927      	ldr	r1, [pc, #156]	; (8003414 <loop+0x100>)
 8003376:	e9c1 2300 	strd	r2, r3, [r1]
	if(demandx > 0)
 800337a:	4b22      	ldr	r3, [pc, #136]	; (8003404 <loop+0xf0>)
 800337c:	edd3 7a00 	vldr	s15, [r3]
 8003380:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003388:	dd0c      	ble.n	80033a4 <loop+0x90>
	{
		TIM3->CCR1 = 50;
 800338a:	4b23      	ldr	r3, [pc, #140]	; (8003418 <loop+0x104>)
 800338c:	2232      	movs	r2, #50	; 0x32
 800338e:	635a      	str	r2, [r3, #52]	; 0x34
		TIM3->CCR2 = 50;
 8003390:	4b21      	ldr	r3, [pc, #132]	; (8003418 <loop+0x104>)
 8003392:	2232      	movs	r2, #50	; 0x32
 8003394:	639a      	str	r2, [r3, #56]	; 0x38
		TIM3->CCR3 = 0;
 8003396:	4b20      	ldr	r3, [pc, #128]	; (8003418 <loop+0x104>)
 8003398:	2200      	movs	r2, #0
 800339a:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM3->CCR4 = 0;
 800339c:	4b1e      	ldr	r3, [pc, #120]	; (8003418 <loop+0x104>)
 800339e:	2200      	movs	r2, #0
 80033a0:	641a      	str	r2, [r3, #64]	; 0x40
 80033a2:	e028      	b.n	80033f6 <loop+0xe2>
	}
	else if(demandx < 0)
 80033a4:	4b17      	ldr	r3, [pc, #92]	; (8003404 <loop+0xf0>)
 80033a6:	edd3 7a00 	vldr	s15, [r3]
 80033aa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80033ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033b2:	d50c      	bpl.n	80033ce <loop+0xba>
	{
		TIM3->CCR1 = 0;
 80033b4:	4b18      	ldr	r3, [pc, #96]	; (8003418 <loop+0x104>)
 80033b6:	2200      	movs	r2, #0
 80033b8:	635a      	str	r2, [r3, #52]	; 0x34
        TIM3->CCR2 = 0;
 80033ba:	4b17      	ldr	r3, [pc, #92]	; (8003418 <loop+0x104>)
 80033bc:	2200      	movs	r2, #0
 80033be:	639a      	str	r2, [r3, #56]	; 0x38
		TIM3->CCR3 = 50;
 80033c0:	4b15      	ldr	r3, [pc, #84]	; (8003418 <loop+0x104>)
 80033c2:	2232      	movs	r2, #50	; 0x32
 80033c4:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM3->CCR4 = 50;
 80033c6:	4b14      	ldr	r3, [pc, #80]	; (8003418 <loop+0x104>)
 80033c8:	2232      	movs	r2, #50	; 0x32
 80033ca:	641a      	str	r2, [r3, #64]	; 0x40
 80033cc:	e013      	b.n	80033f6 <loop+0xe2>
	}
	else if (demandx == 0)
 80033ce:	4b0d      	ldr	r3, [pc, #52]	; (8003404 <loop+0xf0>)
 80033d0:	edd3 7a00 	vldr	s15, [r3]
 80033d4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80033d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033dc:	d10b      	bne.n	80033f6 <loop+0xe2>
	{
		TIM3->CCR1 = 0;
 80033de:	4b0e      	ldr	r3, [pc, #56]	; (8003418 <loop+0x104>)
 80033e0:	2200      	movs	r2, #0
 80033e2:	635a      	str	r2, [r3, #52]	; 0x34
		TIM3->CCR2 = 0;
 80033e4:	4b0c      	ldr	r3, [pc, #48]	; (8003418 <loop+0x104>)
 80033e6:	2200      	movs	r2, #0
 80033e8:	639a      	str	r2, [r3, #56]	; 0x38
		TIM3->CCR3 = 0;
 80033ea:	4b0b      	ldr	r3, [pc, #44]	; (8003418 <loop+0x104>)
 80033ec:	2200      	movs	r2, #0
 80033ee:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM3->CCR4 = 0;
 80033f0:	4b09      	ldr	r3, [pc, #36]	; (8003418 <loop+0x104>)
 80033f2:	2200      	movs	r2, #0
 80033f4:	641a      	str	r2, [r3, #64]	; 0x40
	}
	HAL_Delay(10);
 80033f6:	200a      	movs	r0, #10
 80033f8:	f001 f8a8 	bl	800454c <HAL_Delay>
}
 80033fc:	bf00      	nop
 80033fe:	bd80      	pop	{r7, pc}
 8003400:	20000250 	.word	0x20000250
 8003404:	20000234 	.word	0x20000234
 8003408:	20000238 	.word	0x20000238
 800340c:	2000023c 	.word	0x2000023c
 8003410:	20000240 	.word	0x20000240
 8003414:	20000248 	.word	0x20000248
 8003418:	40000400 	.word	0x40000400

0800341c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 800341c:	b480      	push	{r7}
 800341e:	b085      	sub	sp, #20
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8003426:	2300      	movs	r3, #0
 8003428:	60fb      	str	r3, [r7, #12]
 800342a:	e00c      	b.n	8003446 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x2a>
      arr[i] = (var >> (8 * i));
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	00db      	lsls	r3, r3, #3
 8003430:	683a      	ldr	r2, [r7, #0]
 8003432:	fa22 f103 	lsr.w	r1, r2, r3
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	4413      	add	r3, r2
 800343c:	b2ca      	uxtb	r2, r1
 800343e:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	3301      	adds	r3, #1
 8003444:	60fb      	str	r3, [r7, #12]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2b03      	cmp	r3, #3
 800344a:	d9ef      	bls.n	800342c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x10>
  }
 800344c:	bf00      	nop
 800344e:	bf00      	nop
 8003450:	3714      	adds	r7, #20
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr

0800345a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 800345a:	b480      	push	{r7}
 800345c:	b085      	sub	sp, #20
 800345e:	af00      	add	r7, sp, #0
 8003460:	6078      	str	r0, [r7, #4]
 8003462:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800346a:	2300      	movs	r3, #0
 800346c:	60fb      	str	r3, [r7, #12]
 800346e:	e010      	b.n	8003492 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x38>
      var |= (arr[i] << (8 * i));
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	6839      	ldr	r1, [r7, #0]
 8003476:	68fa      	ldr	r2, [r7, #12]
 8003478:	440a      	add	r2, r1
 800347a:	7812      	ldrb	r2, [r2, #0]
 800347c:	4611      	mov	r1, r2
 800347e:	68fa      	ldr	r2, [r7, #12]
 8003480:	00d2      	lsls	r2, r2, #3
 8003482:	fa01 f202 	lsl.w	r2, r1, r2
 8003486:	431a      	orrs	r2, r3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	3301      	adds	r3, #1
 8003490:	60fb      	str	r3, [r7, #12]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2b03      	cmp	r3, #3
 8003496:	d9eb      	bls.n	8003470 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x16>
  }
 8003498:	bf00      	nop
 800349a:	bf00      	nop
 800349c:	3714      	adds	r7, #20
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr
	...

080034a8 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	4a04      	ldr	r2, [pc, #16]	; (80034c4 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	601a      	str	r2, [r3, #0]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4618      	mov	r0, r3
 80034ba:	370c      	adds	r7, #12
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr
 80034c4:	080089dc 	.word	0x080089dc

080034c8 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b084      	sub	sp, #16
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	60f8      	str	r0, [r7, #12]
 80034d0:	60b9      	str	r1, [r7, #8]
 80034d2:	607a      	str	r2, [r7, #4]
 80034d4:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	4618      	mov	r0, r3
 80034da:	f7ff ffe5 	bl	80034a8 <_ZN3ros11Subscriber_C1Ev>
 80034de:	4a0b      	ldr	r2, [pc, #44]	; (800350c <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei+0x44>)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	601a      	str	r2, [r3, #0]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	3310      	adds	r3, #16
 80034e8:	4618      	mov	r0, r3
 80034ea:	f7ff fba5 	bl	8002c38 <_ZN13geometry_msgs5TwistC1Ev>
    cb_(cb),
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	687a      	ldr	r2, [r7, #4]
 80034f2:	659a      	str	r2, [r3, #88]	; 0x58
    endpoint_(endpoint)
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	683a      	ldr	r2, [r7, #0]
 80034f8:	65da      	str	r2, [r3, #92]	; 0x5c
  {
    topic_ = topic_name;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	68ba      	ldr	r2, [r7, #8]
 80034fe:	609a      	str	r2, [r3, #8]
  };
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	4618      	mov	r0, r3
 8003504:	3710      	adds	r7, #16
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	08008968 	.word	0x08008968

08003510 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  /*
   * Setup Functions
   */
public:
  Hardware* getHardware()
 8003510:	b480      	push	{r7}
 8003512:	b083      	sub	sp, #12
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	3304      	adds	r3, #4
  }
 800351c:	4618      	mov	r0, r3
 800351e:	370c      	adds	r7, #12
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr

08003528 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 8003528:	b580      	push	{r7, lr}
 800352a:	b082      	sub	sp, #8
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	3304      	adds	r3, #4
 8003534:	4618      	mov	r0, r3
 8003536:	f7fe fd59 	bl	8001fec <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
    bytes_ = 0;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
    index_ = 0;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
    topic_ = 0;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2200      	movs	r2, #0
 8003556:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
  };
 800355a:	bf00      	nop
 800355c:	3708      	adds	r7, #8
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}

08003562 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 8003562:	b480      	push	{r7}
 8003564:	b085      	sub	sp, #20
 8003566:	af00      	add	r7, sp, #0
 8003568:	6078      	str	r0, [r7, #4]
 800356a:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 800356c:	2300      	movs	r3, #0
 800356e:	60fb      	str	r3, [r7, #12]
 8003570:	e01d      	b.n	80035ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4c>
    {
      if (publishers[i] == 0) // empty slot
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	4413      	add	r3, r2
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d111      	bne.n	80035a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x46>
      {
        publishers[i] = &p;
 8003584:	687a      	ldr	r2, [r7, #4]
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	4413      	add	r3, r2
 8003590:	683a      	ldr	r2, [r7, #0]
 8003592:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	60da      	str	r2, [r3, #12]
        return true;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e006      	b.n	80035b6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	3301      	adds	r3, #1
 80035ac:	60fb      	str	r3, [r7, #12]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2b18      	cmp	r3, #24
 80035b2:	ddde      	ble.n	8003572 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x10>
      }
    }
    return false;
 80035b4:	2300      	movs	r3, #0
  }
 80035b6:	4618      	mov	r0, r3
 80035b8:	3714      	adds	r7, #20
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr

080035c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>:

  /* Register a new subscriber */
  bool subscribe(Subscriber_& s)
 80035c2:	b480      	push	{r7}
 80035c4:	b085      	sub	sp, #20
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	6078      	str	r0, [r7, #4]
 80035ca:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80035cc:	2300      	movs	r3, #0
 80035ce:	60fb      	str	r3, [r7, #12]
 80035d0:	e018      	b.n	8003604 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x42>
    {
      if (subscribers[i] == 0) // empty slot
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	68fa      	ldr	r2, [r7, #12]
 80035d6:	f202 2222 	addw	r2, r2, #546	; 0x222
 80035da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d10d      	bne.n	80035fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x3c>
      {
        subscribers[i] = &s;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	68fa      	ldr	r2, [r7, #12]
 80035e6:	f202 2222 	addw	r2, r2, #546	; 0x222
 80035ea:	6839      	ldr	r1, [r7, #0]
 80035ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f103 0264 	add.w	r2, r3, #100	; 0x64
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	605a      	str	r2, [r3, #4]
        return true;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e006      	b.n	800360c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	3301      	adds	r3, #1
 8003602:	60fb      	str	r3, [r7, #12]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2b18      	cmp	r3, #24
 8003608:	dde3      	ble.n	80035d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x10>
      }
    }
    return false;
 800360a:	2300      	movs	r3, #0
  }
 800360c:	4618      	mov	r0, r3
 800360e:	3714      	adds	r7, #20
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr

08003618 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce() override
 8003618:	b580      	push	{r7, lr}
 800361a:	b084      	sub	sp, #16
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	3304      	adds	r3, #4
 8003624:	4618      	mov	r0, r3
 8003626:	f7fe fde5 	bl	80021f4 <_ZN13STM32Hardware4timeEv>
 800362a:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 8003632:	68fa      	ldr	r2, [r7, #12]
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	f642 22f8 	movw	r2, #11000	; 0x2af8
 800363a:	4293      	cmp	r3, r2
 800363c:	d903      	bls.n	8003646 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    if (mode_ != MODE_FIRST_FF)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800364c:	2b00      	cmp	r3, #0
 800364e:	d009      	beq.n	8003664 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 8003656:	68fa      	ldr	r2, [r7, #12]
 8003658:	429a      	cmp	r2, r3
 800365a:	d903      	bls.n	8003664 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2200      	movs	r2, #0
 8003660:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
      if (spin_timeout_ > 0)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 800366a:	2b00      	cmp	r3, #0
 800366c:	d014      	beq.n	8003698 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	3304      	adds	r3, #4
 8003672:	4618      	mov	r0, r3
 8003674:	f7fe fdbe 	bl	80021f4 <_ZN13STM32Hardware4timeEv>
 8003678:	4602      	mov	r2, r0
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	1ad2      	subs	r2, r2, r3
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8003684:	429a      	cmp	r2, r3
 8003686:	bf8c      	ite	hi
 8003688:	2301      	movhi	r3, #1
 800368a:	2300      	movls	r3, #0
 800368c:	b2db      	uxtb	r3, r3
 800368e:	2b00      	cmp	r3, #0
 8003690:	d002      	beq.n	8003698 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 8003692:	f06f 0301 	mvn.w	r3, #1
 8003696:	e194      	b.n	80039c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      int data = hardware_.read();
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	3304      	adds	r3, #4
 800369c:	4618      	mov	r0, r3
 800369e:	f7fe fcc1 	bl	8002024 <_ZN13STM32Hardware4readEv>
 80036a2:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	f2c0 8174 	blt.w	8003994 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x37c>
      checksum_ += data;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	441a      	add	r2, r3
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80036c2:	2b07      	cmp	r3, #7
 80036c4:	d11e      	bne.n	8003704 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 80036cc:	1c59      	adds	r1, r3, #1
 80036ce:	687a      	ldr	r2, [r7, #4]
 80036d0:	f8c2 18f8 	str.w	r1, [r2, #2296]	; 0x8f8
 80036d4:	68ba      	ldr	r2, [r7, #8]
 80036d6:	b2d1      	uxtb	r1, r2
 80036d8:	687a      	ldr	r2, [r7, #4]
 80036da:	4413      	add	r3, r2
 80036dc:	460a      	mov	r2, r1
 80036de:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 80036e8:	1e5a      	subs	r2, r3, #1
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d1b4      	bne.n	8003664 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2208      	movs	r2, #8
 80036fe:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003702:	e7af      	b.n	8003664 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800370a:	2b00      	cmp	r3, #0
 800370c:	d128      	bne.n	8003760 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	2bff      	cmp	r3, #255	; 0xff
 8003712:	d10d      	bne.n	8003730 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800371a:	1c5a      	adds	r2, r3, #1
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	f103 0214 	add.w	r2, r3, #20
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 800372e:	e799      	b.n	8003664 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	3304      	adds	r3, #4
 8003734:	4618      	mov	r0, r3
 8003736:	f7fe fd5d 	bl	80021f4 <_ZN13STM32Hardware4timeEv>
 800373a:	4602      	mov	r2, r0
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	1ad3      	subs	r3, r2, r3
 8003740:	f241 3288 	movw	r2, #5000	; 0x1388
 8003744:	4293      	cmp	r3, r2
 8003746:	bf8c      	ite	hi
 8003748:	2301      	movhi	r3, #1
 800374a:	2300      	movls	r3, #0
 800374c:	b2db      	uxtb	r3, r3
 800374e:	2b00      	cmp	r3, #0
 8003750:	d088      	beq.n	8003664 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 800375a:	f06f 0301 	mvn.w	r3, #1
 800375e:	e130      	b.n	80039c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      else if (mode_ == MODE_PROTOCOL_VER)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003766:	2b01      	cmp	r3, #1
 8003768:	d118      	bne.n	800379c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
        if (data == PROTOCOL_VER)
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	2bfe      	cmp	r3, #254	; 0xfe
 800376e:	d107      	bne.n	8003780 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003776:	1c5a      	adds	r2, r3, #1
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 800377e:	e771      	b.n	8003664 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          if (configured_ == false)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 800378e:	2b00      	cmp	r3, #0
 8003790:	f47f af68 	bne.w	8003664 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	f000 f918 	bl	80039ca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 800379a:	e763      	b.n	8003664 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d113      	bne.n	80037ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
        bytes_ = data;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	68ba      	ldr	r2, [r7, #8]
 80037aa:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        index_ = 0;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
        mode_++;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80037bc:	1c5a      	adds	r2, r3, #1
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	68ba      	ldr	r2, [r7, #8]
 80037c8:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 80037cc:	e74a      	b.n	8003664 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80037d4:	2b03      	cmp	r3, #3
 80037d6:	d110      	bne.n	80037fa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e2>
        bytes_ += data << 8;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	021b      	lsls	r3, r3, #8
 80037e2:	441a      	add	r2, r3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        mode_++;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80037f0:	1c5a      	adds	r2, r3, #1
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80037f8:	e734      	b.n	8003664 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003800:	2b04      	cmp	r3, #4
 8003802:	d116      	bne.n	8003832 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
        if ((checksum_ % 256) == 255)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 800380a:	425a      	negs	r2, r3
 800380c:	b2db      	uxtb	r3, r3
 800380e:	b2d2      	uxtb	r2, r2
 8003810:	bf58      	it	pl
 8003812:	4253      	negpl	r3, r2
 8003814:	2bff      	cmp	r3, #255	; 0xff
 8003816:	d107      	bne.n	8003828 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
          mode_++;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800381e:	1c5a      	adds	r2, r3, #1
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003826:	e71d      	b.n	8003664 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2200      	movs	r2, #0
 800382c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003830:	e718      	b.n	8003664 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003838:	2b05      	cmp	r3, #5
 800383a:	d10f      	bne.n	800385c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
        topic_ = data;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	68ba      	ldr	r2, [r7, #8]
 8003840:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_++;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800384a:	1c5a      	adds	r2, r3, #1
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	68ba      	ldr	r2, [r7, #8]
 8003856:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 800385a:	e703      	b.n	8003664 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003862:	2b06      	cmp	r3, #6
 8003864:	d117      	bne.n	8003896 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27e>
        topic_ += data << 8;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	021b      	lsls	r3, r3, #8
 8003870:	441a      	add	r2, r3
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2207      	movs	r2, #7
 800387c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if (bytes_ == 0)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8003886:	2b00      	cmp	r3, #0
 8003888:	f47f aeec 	bne.w	8003664 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2208      	movs	r2, #8
 8003890:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003894:	e6e6      	b.n	8003664 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800389c:	2b08      	cmp	r3, #8
 800389e:	f47f aee1 	bne.w	8003664 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 80038b0:	425a      	negs	r2, r3
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	b2d2      	uxtb	r2, r2
 80038b6:	bf58      	it	pl
 80038b8:	4253      	negpl	r3, r2
 80038ba:	2bff      	cmp	r3, #255	; 0xff
 80038bc:	f47f aed2 	bne.w	8003664 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d110      	bne.n	80038ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
            requestSyncTime();
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f000 f87d 	bl	80039ca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	f000 f898 	bl	8003a06 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	68fa      	ldr	r2, [r7, #12]
 80038da:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            last_sync_receive_time = c_time;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	68fa      	ldr	r2, [r7, #12]
 80038e2:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
            return SPIN_ERR;
 80038e6:	f04f 33ff 	mov.w	r3, #4294967295
 80038ea:	e06a      	b.n	80039c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
          else if (topic_ == TopicInfo::ID_TIME)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80038f2:	2b0a      	cmp	r3, #10
 80038f4:	d107      	bne.n	8003906 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ee>
            syncTime(message_in);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80038fc:	4619      	mov	r1, r3
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f000 f960 	bl	8003bc4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8003904:	e6ae      	b.n	8003664 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800390c:	2b06      	cmp	r3, #6
 800390e:	d10e      	bne.n	800392e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x316>
            req_param_resp.deserialize(message_in);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	f603 1214 	addw	r2, r3, #2324	; 0x914
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f203 4324 	addw	r3, r3, #1060	; 0x424
 800391c:	4619      	mov	r1, r3
 800391e:	4610      	mov	r0, r2
 8003920:	f7fe f971 	bl	8001c06 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2201      	movs	r2, #1
 8003928:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 800392c:	e69a      	b.n	8003664 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003934:	2b0b      	cmp	r3, #11
 8003936:	d104      	bne.n	8003942 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x32a>
            configured_ = false;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2200      	movs	r2, #0
 800393c:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8003940:	e690      	b.n	8003664 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003948:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003952:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003956:	2b00      	cmp	r3, #0
 8003958:	f43f ae84 	beq.w	8003664 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003962:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	f202 2222 	addw	r2, r2, #546	; 0x222
 800396c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003976:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003980:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	687a      	ldr	r2, [r7, #4]
 800398a:	f202 4224 	addw	r2, r2, #1060	; 0x424
 800398e:	4611      	mov	r1, r2
 8003990:	4798      	blx	r3
    while (true)
 8003992:	e667      	b.n	8003664 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 8003994:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 800399c:	2b00      	cmp	r3, #0
 800399e:	d00f      	beq.n	80039c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 80039a6:	68fa      	ldr	r2, [r7, #12]
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d906      	bls.n	80039c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
      requestSyncTime();
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f000 f809 	bl	80039ca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	68fa      	ldr	r2, [r7, #12]
 80039bc:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    return SPIN_OK;
 80039c0:	2300      	movs	r3, #0
  }
 80039c2:	4618      	mov	r0, r3
 80039c4:	3710      	adds	r7, #16
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}

080039ca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 80039ca:	b580      	push	{r7, lr}
 80039cc:	b086      	sub	sp, #24
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 80039d2:	f107 030c 	add.w	r3, r7, #12
 80039d6:	4618      	mov	r0, r3
 80039d8:	f7fd fc72 	bl	80012c0 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f107 020c 	add.w	r2, r7, #12
 80039e6:	210a      	movs	r1, #10
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	4798      	blx	r3
    rt_time = hardware_.time();
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	3304      	adds	r3, #4
 80039f0:	4618      	mov	r0, r3
 80039f2:	f7fe fbff 	bl	80021f4 <_ZN13STM32Hardware4timeEv>
 80039f6:	4602      	mov	r2, r0
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 80039fe:	bf00      	nop
 8003a00:	3718      	adds	r7, #24
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}

08003a06 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
    bool v = advertise(srv.pub);
    bool w = subscribe(srv);
    return v && w;
  }

  void negotiateTopics()
 8003a06:	b590      	push	{r4, r7, lr}
 8003a08:	b08b      	sub	sp, #44	; 0x2c
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8003a0e:	f107 030c 	add.w	r3, r7, #12
 8003a12:	4618      	mov	r0, r3
 8003a14:	f7fd fd44 	bl	80014a0 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8003a18:	2300      	movs	r3, #0
 8003a1a:	627b      	str	r3, [r7, #36]	; 0x24
 8003a1c:	e062      	b.n	8003ae4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xde>
    {
      if (publishers[i] != 0) // non-empty slot
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a22:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	4413      	add	r3, r2
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d056      	beq.n	8003ade <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xd8>
      {
        ti.topic_id = publishers[i]->id_;
 8003a30:	687a      	ldr	r2, [r7, #4]
 8003a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a34:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003a38:	009b      	lsls	r3, r3, #2
 8003a3a:	4413      	add	r3, r2
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8003a44:	687a      	ldr	r2, [r7, #4]
 8003a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a48:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003a4c:	009b      	lsls	r3, r3, #2
 8003a4e:	4413      	add	r3, r2
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	4413      	add	r3, r2
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	6859      	ldr	r1, [r3, #4]
 8003a66:	687a      	ldr	r2, [r7, #4]
 8003a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	4413      	add	r3, r2
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	3308      	adds	r3, #8
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4608      	mov	r0, r1
 8003a7e:	4798      	blx	r3
 8003a80:	4603      	mov	r3, r0
 8003a82:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a88:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003a8c:	009b      	lsls	r3, r3, #2
 8003a8e:	4413      	add	r3, r2
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	6859      	ldr	r1, [r3, #4]
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a98:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	4413      	add	r3, r2
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	330c      	adds	r3, #12
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4608      	mov	r0, r1
 8003aac:	4798      	blx	r3
 8003aae:	4603      	mov	r3, r0
 8003ab0:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8003ab2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003ab6:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681c      	ldr	r4, [r3, #0]
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	4413      	add	r3, r2
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	4618      	mov	r0, r3
 8003ace:	f7fe fa52 	bl	8001f76 <_ZN3ros9Publisher15getEndpointTypeEv>
 8003ad2:	4601      	mov	r1, r0
 8003ad4:	f107 030c 	add.w	r3, r7, #12
 8003ad8:	461a      	mov	r2, r3
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8003ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae0:	3301      	adds	r3, #1
 8003ae2:	627b      	str	r3, [r7, #36]	; 0x24
 8003ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae6:	2b18      	cmp	r3, #24
 8003ae8:	dd99      	ble.n	8003a1e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x18>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8003aea:	2300      	movs	r3, #0
 8003aec:	627b      	str	r3, [r7, #36]	; 0x24
 8003aee:	e05e      	b.n	8003bae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a8>
    {
      if (subscribers[i] != 0) // non-empty slot
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003af4:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003af8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d053      	beq.n	8003ba8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a2>
      {
        ti.topic_id = subscribers[i]->id_;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b04:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003b08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	b29b      	uxth	r3, r3
 8003b10:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b16:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003b1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b26:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003b2a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b32:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003b36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	3308      	adds	r3, #8
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4608      	mov	r0, r1
 8003b42:	4798      	blx	r3
 8003b44:	4603      	mov	r3, r0
 8003b46:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b4c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003b50:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b58:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003b5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	330c      	adds	r3, #12
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4608      	mov	r0, r1
 8003b68:	4798      	blx	r3
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8003b6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b72:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681c      	ldr	r4, [r3, #0]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b7e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003b82:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b8a:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003b8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	3304      	adds	r3, #4
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4608      	mov	r0, r1
 8003b9a:	4798      	blx	r3
 8003b9c:	4601      	mov	r1, r0
 8003b9e:	f107 030c 	add.w	r3, r7, #12
 8003ba2:	461a      	mov	r2, r3
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8003ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003baa:	3301      	adds	r3, #1
 8003bac:	627b      	str	r3, [r7, #36]	; 0x24
 8003bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb0:	2b18      	cmp	r3, #24
 8003bb2:	dd9d      	ble.n	8003af0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xea>
      }
    }
    configured_ = true;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 8003bbc:	bf00      	nop
 8003bbe:	372c      	adds	r7, #44	; 0x2c
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd90      	pop	{r4, r7, pc}

08003bc4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b086      	sub	sp, #24
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
 8003bcc:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8003bce:	f107 0308 	add.w	r3, r7, #8
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f7fd fb74 	bl	80012c0 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	3304      	adds	r3, #4
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f7fe fb09 	bl	80021f4 <_ZN13STM32Hardware4timeEv>
 8003be2:	4602      	mov	r2, r0
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8003bea:	1ad3      	subs	r3, r2, r3
 8003bec:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8003bee:	f107 0308 	add.w	r3, r7, #8
 8003bf2:	6839      	ldr	r1, [r7, #0]
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f7fd fbd3 	bl	80013a0 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8003bfa:	68fa      	ldr	r2, [r7, #12]
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	4915      	ldr	r1, [pc, #84]	; (8003c54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8003c00:	fba1 1303 	umull	r1, r3, r1, r3
 8003c04:	099b      	lsrs	r3, r3, #6
 8003c06:	4413      	add	r3, r2
 8003c08:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8003c0a:	6939      	ldr	r1, [r7, #16]
 8003c0c:	697a      	ldr	r2, [r7, #20]
 8003c0e:	4b11      	ldr	r3, [pc, #68]	; (8003c54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8003c10:	fba3 0302 	umull	r0, r3, r3, r2
 8003c14:	099b      	lsrs	r3, r3, #6
 8003c16:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003c1a:	fb00 f303 	mul.w	r3, r0, r3
 8003c1e:	1ad3      	subs	r3, r2, r3
 8003c20:	4a0d      	ldr	r2, [pc, #52]	; (8003c58 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8003c22:	fb02 f303 	mul.w	r3, r2, r3
 8003c26:	440b      	add	r3, r1
 8003c28:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8003c2a:	f107 0308 	add.w	r3, r7, #8
 8003c2e:	3304      	adds	r3, #4
 8003c30:	4619      	mov	r1, r3
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f000 f8a6 	bl	8003d84 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	3304      	adds	r3, #4
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f7fe fad9 	bl	80021f4 <_ZN13STM32Hardware4timeEv>
 8003c42:	4602      	mov	r2, r0
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 8003c4a:	bf00      	nop
 8003c4c:	3718      	adds	r7, #24
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	10624dd3 	.word	0x10624dd3
 8003c58:	000f4240 	.word	0x000f4240

08003c5c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg) override
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b088      	sub	sp, #32
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	60f8      	str	r0, [r7, #12]
 8003c64:	60b9      	str	r1, [r7, #8]
 8003c66:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	2b63      	cmp	r3, #99	; 0x63
 8003c6c:	dd09      	ble.n	8003c82 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8003c74:	f083 0301 	eor.w	r3, r3, #1
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d001      	beq.n	8003c82 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	e079      	b.n	8003d76 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	68fa      	ldr	r2, [r7, #12]
 8003c8a:	f202 6224 	addw	r2, r2, #1572	; 0x624
 8003c8e:	3207      	adds	r2, #7
 8003c90:	4611      	mov	r1, r2
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	4798      	blx	r3
 8003c96:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	22ff      	movs	r2, #255	; 0xff
 8003c9c:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    message_out[1] = PROTOCOL_VER;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	22fe      	movs	r2, #254	; 0xfe
 8003ca4:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	b2da      	uxtb	r2, r3
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	0a1b      	lsrs	r3, r3, #8
 8003cb8:	b29b      	uxth	r3, r3
 8003cba:	b2da      	uxtb	r2, r3
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f893 3627 	ldrb.w	r3, [r3, #1575]	; 0x627
 8003cce:	4413      	add	r3, r2
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	43db      	mvns	r3, r3
 8003cd4:	b2da      	uxtb	r2, r3
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	b2da      	uxtb	r2, r3
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	b21b      	sxth	r3, r3
 8003cea:	121b      	asrs	r3, r3, #8
 8003cec:	b21b      	sxth	r3, r3
 8003cee:	b2da      	uxtb	r2, r3
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a

    /* calculate checksum */
    int chk = 0;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003cfa:	2305      	movs	r3, #5
 8003cfc:	61bb      	str	r3, [r7, #24]
 8003cfe:	e00c      	b.n	8003d1a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xbe>
      chk += message_out[i];
 8003d00:	68fa      	ldr	r2, [r7, #12]
 8003d02:	69bb      	ldr	r3, [r7, #24]
 8003d04:	4413      	add	r3, r2
 8003d06:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	69fb      	ldr	r3, [r7, #28]
 8003d10:	4413      	add	r3, r2
 8003d12:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003d14:	69bb      	ldr	r3, [r7, #24]
 8003d16:	3301      	adds	r3, #1
 8003d18:	61bb      	str	r3, [r7, #24]
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	3306      	adds	r3, #6
 8003d1e:	69ba      	ldr	r2, [r7, #24]
 8003d20:	429a      	cmp	r2, r3
 8003d22:	dded      	ble.n	8003d00 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa4>
    l += 7;
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	3307      	adds	r3, #7
 8003d28:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8003d2a:	69fb      	ldr	r3, [r7, #28]
 8003d2c:	425a      	negs	r2, r3
 8003d2e:	b2db      	uxtb	r3, r3
 8003d30:	b2d2      	uxtb	r2, r2
 8003d32:	bf58      	it	pl
 8003d34:	4253      	negpl	r3, r2
 8003d36:	b2da      	uxtb	r2, r3
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	1c59      	adds	r1, r3, #1
 8003d3c:	6179      	str	r1, [r7, #20]
 8003d3e:	43d2      	mvns	r2, r2
 8003d40:	b2d1      	uxtb	r1, r2
 8003d42:	68fa      	ldr	r2, [r7, #12]
 8003d44:	4413      	add	r3, r2
 8003d46:	460a      	mov	r2, r1
 8003d48:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624

    if (l <= OUTPUT_SIZE)
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d52:	dc0a      	bgt.n	8003d6a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	1d18      	adds	r0, r3, #4
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8003d5e:	697a      	ldr	r2, [r7, #20]
 8003d60:	4619      	mov	r1, r3
 8003d62:	f7fe fa01 	bl	8002168 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	e005      	b.n	8003d76 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8003d6a:	4905      	ldr	r1, [pc, #20]	; (8003d80 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 8003d6c:	68f8      	ldr	r0, [r7, #12]
 8003d6e:	f000 f849 	bl	8003e04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8003d72:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 8003d76:	4618      	mov	r0, r3
 8003d78:	3720      	adds	r7, #32
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	080088f0 	.word	0x080088f0

08003d84 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b084      	sub	sp, #16
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	3304      	adds	r3, #4
 8003d92:	4618      	mov	r0, r3
 8003d94:	f7fe fa2e 	bl	80021f4 <_ZN13STM32Hardware4timeEv>
 8003d98:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	4915      	ldr	r1, [pc, #84]	; (8003df8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 8003da2:	fba1 1303 	umull	r1, r3, r1, r3
 8003da6:	099b      	lsrs	r3, r3, #6
 8003da8:	1ad3      	subs	r3, r2, r3
 8003daa:	1e5a      	subs	r2, r3, #1
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	6859      	ldr	r1, [r3, #4]
 8003db6:	68fa      	ldr	r2, [r7, #12]
 8003db8:	4b0f      	ldr	r3, [pc, #60]	; (8003df8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 8003dba:	fba3 0302 	umull	r0, r3, r3, r2
 8003dbe:	099b      	lsrs	r3, r3, #6
 8003dc0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003dc4:	fb00 f303 	mul.w	r3, r0, r3
 8003dc8:	1ad3      	subs	r3, r2, r3
 8003dca:	4a0c      	ldr	r2, [pc, #48]	; (8003dfc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x78>)
 8003dcc:	fb02 f303 	mul.w	r3, r2, r3
 8003dd0:	1aca      	subs	r2, r1, r3
 8003dd2:	4b0b      	ldr	r3, [pc, #44]	; (8003e00 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x7c>)
 8003dd4:	4413      	add	r3, r2
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8003de8:	4619      	mov	r1, r3
 8003dea:	4610      	mov	r0, r2
 8003dec:	f000 fae6 	bl	80043bc <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8003df0:	bf00      	nop
 8003df2:	3710      	adds	r7, #16
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}
 8003df8:	10624dd3 	.word	0x10624dd3
 8003dfc:	000f4240 	.word	0x000f4240
 8003e00:	3b9aca00 	.word	0x3b9aca00

08003e04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b082      	sub	sp, #8
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
 8003e0c:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8003e0e:	683a      	ldr	r2, [r7, #0]
 8003e10:	2103      	movs	r1, #3
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f000 f804 	bl	8003e20 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8003e18:	bf00      	nop
 8003e1a:	3708      	adds	r7, #8
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}

08003e20 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b088      	sub	sp, #32
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	60f8      	str	r0, [r7, #12]
 8003e28:	460b      	mov	r3, r1
 8003e2a:	607a      	str	r2, [r7, #4]
 8003e2c:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8003e2e:	f107 0314 	add.w	r3, r7, #20
 8003e32:	4618      	mov	r0, r3
 8003e34:	f7fd fcf8 	bl	8001828 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8003e38:	7afb      	ldrb	r3, [r7, #11]
 8003e3a:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f107 0214 	add.w	r2, r7, #20
 8003e4a:	2107      	movs	r1, #7
 8003e4c:	68f8      	ldr	r0, [r7, #12]
 8003e4e:	4798      	blx	r3
  }
 8003e50:	bf00      	nop
 8003e52:	3720      	adds	r7, #32
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}

08003e58 <_Z41__static_initialization_and_destruction_0ii>:
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b082      	sub	sp, #8
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	6039      	str	r1, [r7, #0]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d11f      	bne.n	8003ea8 <_Z41__static_initialization_and_destruction_0ii+0x50>
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d11a      	bne.n	8003ea8 <_Z41__static_initialization_and_destruction_0ii+0x50>
ros::NodeHandle nh;
 8003e72:	480f      	ldr	r0, [pc, #60]	; (8003eb0 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8003e74:	f7ff f818 	bl	8002ea8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
std_msgs::Int16 left_wheel_msg;
 8003e78:	480e      	ldr	r0, [pc, #56]	; (8003eb4 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8003e7a:	f7fe ff61 	bl	8002d40 <_ZN8std_msgs5Int16C1Ev>
ros::Publisher left_wheel_pub("lwheel", &left_wheel_msg);
 8003e7e:	2300      	movs	r3, #0
 8003e80:	4a0c      	ldr	r2, [pc, #48]	; (8003eb4 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8003e82:	490d      	ldr	r1, [pc, #52]	; (8003eb8 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8003e84:	480d      	ldr	r0, [pc, #52]	; (8003ebc <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8003e86:	f7fe f84b 	bl	8001f20 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
std_msgs::Int16 right_wheel_msg;
 8003e8a:	480d      	ldr	r0, [pc, #52]	; (8003ec0 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8003e8c:	f7fe ff58 	bl	8002d40 <_ZN8std_msgs5Int16C1Ev>
ros::Publisher right_wheel_pub("rwheel", &right_wheel_msg);
 8003e90:	2300      	movs	r3, #0
 8003e92:	4a0b      	ldr	r2, [pc, #44]	; (8003ec0 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8003e94:	490b      	ldr	r1, [pc, #44]	; (8003ec4 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8003e96:	480c      	ldr	r0, [pc, #48]	; (8003ec8 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8003e98:	f7fe f842 	bl	8001f20 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Subscriber<geometry_msgs::Twist> sub("cmd_vel", cmd_vel_cb );
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	4a0b      	ldr	r2, [pc, #44]	; (8003ecc <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8003ea0:	490b      	ldr	r1, [pc, #44]	; (8003ed0 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8003ea2:	480c      	ldr	r0, [pc, #48]	; (8003ed4 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8003ea4:	f7ff fb10 	bl	80034c8 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>
}
 8003ea8:	bf00      	nop
 8003eaa:	3708      	adds	r7, #8
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}
 8003eb0:	20000250 	.word	0x20000250
 8003eb4:	20000b8c 	.word	0x20000b8c
 8003eb8:	0800892c 	.word	0x0800892c
 8003ebc:	20000b94 	.word	0x20000b94
 8003ec0:	20000ba8 	.word	0x20000ba8
 8003ec4:	08008934 	.word	0x08008934
 8003ec8:	20000bb0 	.word	0x20000bb0
 8003ecc:	08002e49 	.word	0x08002e49
 8003ed0:	0800893c 	.word	0x0800893c
 8003ed4:	20000bc8 	.word	0x20000bc8

08003ed8 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE8callbackEPh>:

  virtual void callback(unsigned char* data) override
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b082      	sub	sp, #8
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	3310      	adds	r3, #16
 8003ee6:	6839      	ldr	r1, [r7, #0]
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f7fe fee7 	bl	8002cbc <_ZN13geometry_msgs5Twist11deserializeEPh>
    this->cb_(msg);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	3210      	adds	r2, #16
 8003ef6:	4610      	mov	r0, r2
 8003ef8:	4798      	blx	r3
  }
 8003efa:	bf00      	nop
 8003efc:	3708      	adds	r7, #8
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}

08003f02 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5() override
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType() override
 8003f02:	b480      	push	{r7}
 8003f04:	b083      	sub	sp, #12
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  }
 8003f0e:	4618      	mov	r0, r3
 8003f10:	370c      	adds	r7, #12
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr

08003f1a <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE10getMsgTypeEv>:
  virtual const char * getMsgType() override
 8003f1a:	b580      	push	{r7, lr}
 8003f1c:	b082      	sub	sp, #8
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	3310      	adds	r3, #16
 8003f26:	4618      	mov	r0, r3
 8003f28:	f7fe feee 	bl	8002d08 <_ZN13geometry_msgs5Twist7getTypeEv>
 8003f2c:	4603      	mov	r3, r0
  }
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3708      	adds	r7, #8
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}

08003f36 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5() override
 8003f36:	b580      	push	{r7, lr}
 8003f38:	b082      	sub	sp, #8
 8003f3a:	af00      	add	r7, sp, #0
 8003f3c:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	3310      	adds	r3, #16
 8003f42:	4618      	mov	r0, r3
 8003f44:	f7fe feee 	bl	8002d24 <_ZN13geometry_msgs5Twist6getMD5Ev>
 8003f48:	4603      	mov	r3, r0
  }
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3708      	adds	r7, #8
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}

08003f52 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected() override
 8003f52:	b480      	push	{r7}
 8003f54:	b083      	sub	sp, #12
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	6078      	str	r0, [r7, #4]
    return configured_;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 8003f60:	4618      	mov	r0, r3
 8003f62:	370c      	adds	r7, #12
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr

08003f6c <_GLOBAL__sub_I_flag>:
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003f74:	2001      	movs	r0, #1
 8003f76:	f7ff ff6f 	bl	8003e58 <_Z41__static_initialization_and_destruction_0ii>
 8003f7a:	bd80      	pop	{r7, pc}

08003f7c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b082      	sub	sp, #8
 8003f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f82:	2300      	movs	r3, #0
 8003f84:	607b      	str	r3, [r7, #4]
 8003f86:	4b10      	ldr	r3, [pc, #64]	; (8003fc8 <HAL_MspInit+0x4c>)
 8003f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f8a:	4a0f      	ldr	r2, [pc, #60]	; (8003fc8 <HAL_MspInit+0x4c>)
 8003f8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f90:	6453      	str	r3, [r2, #68]	; 0x44
 8003f92:	4b0d      	ldr	r3, [pc, #52]	; (8003fc8 <HAL_MspInit+0x4c>)
 8003f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f9a:	607b      	str	r3, [r7, #4]
 8003f9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	603b      	str	r3, [r7, #0]
 8003fa2:	4b09      	ldr	r3, [pc, #36]	; (8003fc8 <HAL_MspInit+0x4c>)
 8003fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa6:	4a08      	ldr	r2, [pc, #32]	; (8003fc8 <HAL_MspInit+0x4c>)
 8003fa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fac:	6413      	str	r3, [r2, #64]	; 0x40
 8003fae:	4b06      	ldr	r3, [pc, #24]	; (8003fc8 <HAL_MspInit+0x4c>)
 8003fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fb6:	603b      	str	r3, [r7, #0]
 8003fb8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003fba:	2007      	movs	r0, #7
 8003fbc:	f000 fbba 	bl	8004734 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003fc0:	bf00      	nop
 8003fc2:	3708      	adds	r7, #8
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}
 8003fc8:	40023800 	.word	0x40023800

08003fcc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b084      	sub	sp, #16
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fdc:	d116      	bne.n	800400c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003fde:	2300      	movs	r3, #0
 8003fe0:	60fb      	str	r3, [r7, #12]
 8003fe2:	4b16      	ldr	r3, [pc, #88]	; (800403c <HAL_TIM_Base_MspInit+0x70>)
 8003fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe6:	4a15      	ldr	r2, [pc, #84]	; (800403c <HAL_TIM_Base_MspInit+0x70>)
 8003fe8:	f043 0301 	orr.w	r3, r3, #1
 8003fec:	6413      	str	r3, [r2, #64]	; 0x40
 8003fee:	4b13      	ldr	r3, [pc, #76]	; (800403c <HAL_TIM_Base_MspInit+0x70>)
 8003ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff2:	f003 0301 	and.w	r3, r3, #1
 8003ff6:	60fb      	str	r3, [r7, #12]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	2100      	movs	r1, #0
 8003ffe:	201c      	movs	r0, #28
 8004000:	f000 fba3 	bl	800474a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004004:	201c      	movs	r0, #28
 8004006:	f000 fbbc 	bl	8004782 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800400a:	e012      	b.n	8004032 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a0b      	ldr	r2, [pc, #44]	; (8004040 <HAL_TIM_Base_MspInit+0x74>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d10d      	bne.n	8004032 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004016:	2300      	movs	r3, #0
 8004018:	60bb      	str	r3, [r7, #8]
 800401a:	4b08      	ldr	r3, [pc, #32]	; (800403c <HAL_TIM_Base_MspInit+0x70>)
 800401c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401e:	4a07      	ldr	r2, [pc, #28]	; (800403c <HAL_TIM_Base_MspInit+0x70>)
 8004020:	f043 0302 	orr.w	r3, r3, #2
 8004024:	6413      	str	r3, [r2, #64]	; 0x40
 8004026:	4b05      	ldr	r3, [pc, #20]	; (800403c <HAL_TIM_Base_MspInit+0x70>)
 8004028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402a:	f003 0302 	and.w	r3, r3, #2
 800402e:	60bb      	str	r3, [r7, #8]
 8004030:	68bb      	ldr	r3, [r7, #8]
}
 8004032:	bf00      	nop
 8004034:	3710      	adds	r7, #16
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}
 800403a:	bf00      	nop
 800403c:	40023800 	.word	0x40023800
 8004040:	40000400 	.word	0x40000400

08004044 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b08a      	sub	sp, #40	; 0x28
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800404c:	f107 0314 	add.w	r3, r7, #20
 8004050:	2200      	movs	r2, #0
 8004052:	601a      	str	r2, [r3, #0]
 8004054:	605a      	str	r2, [r3, #4]
 8004056:	609a      	str	r2, [r3, #8]
 8004058:	60da      	str	r2, [r3, #12]
 800405a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a21      	ldr	r2, [pc, #132]	; (80040e8 <HAL_TIM_MspPostInit+0xa4>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d13b      	bne.n	80040de <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004066:	2300      	movs	r3, #0
 8004068:	613b      	str	r3, [r7, #16]
 800406a:	4b20      	ldr	r3, [pc, #128]	; (80040ec <HAL_TIM_MspPostInit+0xa8>)
 800406c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800406e:	4a1f      	ldr	r2, [pc, #124]	; (80040ec <HAL_TIM_MspPostInit+0xa8>)
 8004070:	f043 0301 	orr.w	r3, r3, #1
 8004074:	6313      	str	r3, [r2, #48]	; 0x30
 8004076:	4b1d      	ldr	r3, [pc, #116]	; (80040ec <HAL_TIM_MspPostInit+0xa8>)
 8004078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800407a:	f003 0301 	and.w	r3, r3, #1
 800407e:	613b      	str	r3, [r7, #16]
 8004080:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004082:	2300      	movs	r3, #0
 8004084:	60fb      	str	r3, [r7, #12]
 8004086:	4b19      	ldr	r3, [pc, #100]	; (80040ec <HAL_TIM_MspPostInit+0xa8>)
 8004088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800408a:	4a18      	ldr	r2, [pc, #96]	; (80040ec <HAL_TIM_MspPostInit+0xa8>)
 800408c:	f043 0302 	orr.w	r3, r3, #2
 8004090:	6313      	str	r3, [r2, #48]	; 0x30
 8004092:	4b16      	ldr	r3, [pc, #88]	; (80040ec <HAL_TIM_MspPostInit+0xa8>)
 8004094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004096:	f003 0302 	and.w	r3, r3, #2
 800409a:	60fb      	str	r3, [r7, #12]
 800409c:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800409e:	23c0      	movs	r3, #192	; 0xc0
 80040a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040a2:	2302      	movs	r3, #2
 80040a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040a6:	2300      	movs	r3, #0
 80040a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040aa:	2300      	movs	r3, #0
 80040ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80040ae:	2302      	movs	r3, #2
 80040b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040b2:	f107 0314 	add.w	r3, r7, #20
 80040b6:	4619      	mov	r1, r3
 80040b8:	480d      	ldr	r0, [pc, #52]	; (80040f0 <HAL_TIM_MspPostInit+0xac>)
 80040ba:	f000 ff7f 	bl	8004fbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80040be:	2303      	movs	r3, #3
 80040c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040c2:	2302      	movs	r3, #2
 80040c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040c6:	2300      	movs	r3, #0
 80040c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040ca:	2300      	movs	r3, #0
 80040cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80040ce:	2302      	movs	r3, #2
 80040d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040d2:	f107 0314 	add.w	r3, r7, #20
 80040d6:	4619      	mov	r1, r3
 80040d8:	4806      	ldr	r0, [pc, #24]	; (80040f4 <HAL_TIM_MspPostInit+0xb0>)
 80040da:	f000 ff6f 	bl	8004fbc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80040de:	bf00      	nop
 80040e0:	3728      	adds	r7, #40	; 0x28
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	bf00      	nop
 80040e8:	40000400 	.word	0x40000400
 80040ec:	40023800 	.word	0x40023800
 80040f0:	40020000 	.word	0x40020000
 80040f4:	40020400 	.word	0x40020400

080040f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b08a      	sub	sp, #40	; 0x28
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004100:	f107 0314 	add.w	r3, r7, #20
 8004104:	2200      	movs	r2, #0
 8004106:	601a      	str	r2, [r3, #0]
 8004108:	605a      	str	r2, [r3, #4]
 800410a:	609a      	str	r2, [r3, #8]
 800410c:	60da      	str	r2, [r3, #12]
 800410e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a4d      	ldr	r2, [pc, #308]	; (800424c <HAL_UART_MspInit+0x154>)
 8004116:	4293      	cmp	r3, r2
 8004118:	f040 8093 	bne.w	8004242 <HAL_UART_MspInit+0x14a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800411c:	2300      	movs	r3, #0
 800411e:	613b      	str	r3, [r7, #16]
 8004120:	4b4b      	ldr	r3, [pc, #300]	; (8004250 <HAL_UART_MspInit+0x158>)
 8004122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004124:	4a4a      	ldr	r2, [pc, #296]	; (8004250 <HAL_UART_MspInit+0x158>)
 8004126:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800412a:	6413      	str	r3, [r2, #64]	; 0x40
 800412c:	4b48      	ldr	r3, [pc, #288]	; (8004250 <HAL_UART_MspInit+0x158>)
 800412e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004130:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004134:	613b      	str	r3, [r7, #16]
 8004136:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004138:	2300      	movs	r3, #0
 800413a:	60fb      	str	r3, [r7, #12]
 800413c:	4b44      	ldr	r3, [pc, #272]	; (8004250 <HAL_UART_MspInit+0x158>)
 800413e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004140:	4a43      	ldr	r2, [pc, #268]	; (8004250 <HAL_UART_MspInit+0x158>)
 8004142:	f043 0301 	orr.w	r3, r3, #1
 8004146:	6313      	str	r3, [r2, #48]	; 0x30
 8004148:	4b41      	ldr	r3, [pc, #260]	; (8004250 <HAL_UART_MspInit+0x158>)
 800414a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800414c:	f003 0301 	and.w	r3, r3, #1
 8004150:	60fb      	str	r3, [r7, #12]
 8004152:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004154:	230c      	movs	r3, #12
 8004156:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004158:	2302      	movs	r3, #2
 800415a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800415c:	2300      	movs	r3, #0
 800415e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004160:	2303      	movs	r3, #3
 8004162:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004164:	2307      	movs	r3, #7
 8004166:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004168:	f107 0314 	add.w	r3, r7, #20
 800416c:	4619      	mov	r1, r3
 800416e:	4839      	ldr	r0, [pc, #228]	; (8004254 <HAL_UART_MspInit+0x15c>)
 8004170:	f000 ff24 	bl	8004fbc <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8004174:	4b38      	ldr	r3, [pc, #224]	; (8004258 <HAL_UART_MspInit+0x160>)
 8004176:	4a39      	ldr	r2, [pc, #228]	; (800425c <HAL_UART_MspInit+0x164>)
 8004178:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800417a:	4b37      	ldr	r3, [pc, #220]	; (8004258 <HAL_UART_MspInit+0x160>)
 800417c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004180:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004182:	4b35      	ldr	r3, [pc, #212]	; (8004258 <HAL_UART_MspInit+0x160>)
 8004184:	2240      	movs	r2, #64	; 0x40
 8004186:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004188:	4b33      	ldr	r3, [pc, #204]	; (8004258 <HAL_UART_MspInit+0x160>)
 800418a:	2200      	movs	r2, #0
 800418c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800418e:	4b32      	ldr	r3, [pc, #200]	; (8004258 <HAL_UART_MspInit+0x160>)
 8004190:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004194:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004196:	4b30      	ldr	r3, [pc, #192]	; (8004258 <HAL_UART_MspInit+0x160>)
 8004198:	2200      	movs	r2, #0
 800419a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800419c:	4b2e      	ldr	r3, [pc, #184]	; (8004258 <HAL_UART_MspInit+0x160>)
 800419e:	2200      	movs	r2, #0
 80041a0:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80041a2:	4b2d      	ldr	r3, [pc, #180]	; (8004258 <HAL_UART_MspInit+0x160>)
 80041a4:	2200      	movs	r2, #0
 80041a6:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80041a8:	4b2b      	ldr	r3, [pc, #172]	; (8004258 <HAL_UART_MspInit+0x160>)
 80041aa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80041ae:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80041b0:	4b29      	ldr	r3, [pc, #164]	; (8004258 <HAL_UART_MspInit+0x160>)
 80041b2:	2200      	movs	r2, #0
 80041b4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80041b6:	4828      	ldr	r0, [pc, #160]	; (8004258 <HAL_UART_MspInit+0x160>)
 80041b8:	f000 fafe 	bl	80047b8 <HAL_DMA_Init>
 80041bc:	4603      	mov	r3, r0
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d001      	beq.n	80041c6 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80041c2:	f7fd f857 	bl	8001274 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	4a23      	ldr	r2, [pc, #140]	; (8004258 <HAL_UART_MspInit+0x160>)
 80041ca:	635a      	str	r2, [r3, #52]	; 0x34
 80041cc:	4a22      	ldr	r2, [pc, #136]	; (8004258 <HAL_UART_MspInit+0x160>)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80041d2:	4b23      	ldr	r3, [pc, #140]	; (8004260 <HAL_UART_MspInit+0x168>)
 80041d4:	4a23      	ldr	r2, [pc, #140]	; (8004264 <HAL_UART_MspInit+0x16c>)
 80041d6:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80041d8:	4b21      	ldr	r3, [pc, #132]	; (8004260 <HAL_UART_MspInit+0x168>)
 80041da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80041de:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80041e0:	4b1f      	ldr	r3, [pc, #124]	; (8004260 <HAL_UART_MspInit+0x168>)
 80041e2:	2200      	movs	r2, #0
 80041e4:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80041e6:	4b1e      	ldr	r3, [pc, #120]	; (8004260 <HAL_UART_MspInit+0x168>)
 80041e8:	2200      	movs	r2, #0
 80041ea:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80041ec:	4b1c      	ldr	r3, [pc, #112]	; (8004260 <HAL_UART_MspInit+0x168>)
 80041ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80041f2:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80041f4:	4b1a      	ldr	r3, [pc, #104]	; (8004260 <HAL_UART_MspInit+0x168>)
 80041f6:	2200      	movs	r2, #0
 80041f8:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80041fa:	4b19      	ldr	r3, [pc, #100]	; (8004260 <HAL_UART_MspInit+0x168>)
 80041fc:	2200      	movs	r2, #0
 80041fe:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8004200:	4b17      	ldr	r3, [pc, #92]	; (8004260 <HAL_UART_MspInit+0x168>)
 8004202:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004206:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8004208:	4b15      	ldr	r3, [pc, #84]	; (8004260 <HAL_UART_MspInit+0x168>)
 800420a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800420e:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004210:	4b13      	ldr	r3, [pc, #76]	; (8004260 <HAL_UART_MspInit+0x168>)
 8004212:	2200      	movs	r2, #0
 8004214:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004216:	4812      	ldr	r0, [pc, #72]	; (8004260 <HAL_UART_MspInit+0x168>)
 8004218:	f000 face 	bl	80047b8 <HAL_DMA_Init>
 800421c:	4603      	mov	r3, r0
 800421e:	2b00      	cmp	r3, #0
 8004220:	d001      	beq.n	8004226 <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 8004222:	f7fd f827 	bl	8001274 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	4a0d      	ldr	r2, [pc, #52]	; (8004260 <HAL_UART_MspInit+0x168>)
 800422a:	639a      	str	r2, [r3, #56]	; 0x38
 800422c:	4a0c      	ldr	r2, [pc, #48]	; (8004260 <HAL_UART_MspInit+0x168>)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004232:	2200      	movs	r2, #0
 8004234:	2100      	movs	r1, #0
 8004236:	2026      	movs	r0, #38	; 0x26
 8004238:	f000 fa87 	bl	800474a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800423c:	2026      	movs	r0, #38	; 0x26
 800423e:	f000 faa0 	bl	8004782 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004242:	bf00      	nop
 8004244:	3728      	adds	r7, #40	; 0x28
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}
 800424a:	bf00      	nop
 800424c:	40004400 	.word	0x40004400
 8004250:	40023800 	.word	0x40023800
 8004254:	40020000 	.word	0x40020000
 8004258:	20000150 	.word	0x20000150
 800425c:	400260a0 	.word	0x400260a0
 8004260:	200001b0 	.word	0x200001b0
 8004264:	40026088 	.word	0x40026088

08004268 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004268:	b480      	push	{r7}
 800426a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800426c:	e7fe      	b.n	800426c <NMI_Handler+0x4>

0800426e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800426e:	b480      	push	{r7}
 8004270:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004272:	e7fe      	b.n	8004272 <HardFault_Handler+0x4>

08004274 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004274:	b480      	push	{r7}
 8004276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004278:	e7fe      	b.n	8004278 <MemManage_Handler+0x4>

0800427a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800427a:	b480      	push	{r7}
 800427c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800427e:	e7fe      	b.n	800427e <BusFault_Handler+0x4>

08004280 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004280:	b480      	push	{r7}
 8004282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004284:	e7fe      	b.n	8004284 <UsageFault_Handler+0x4>

08004286 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004286:	b480      	push	{r7}
 8004288:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800428a:	bf00      	nop
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr

08004294 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004294:	b480      	push	{r7}
 8004296:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004298:	bf00      	nop
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr

080042a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80042a2:	b480      	push	{r7}
 80042a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80042a6:	bf00      	nop
 80042a8:	46bd      	mov	sp, r7
 80042aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ae:	4770      	bx	lr

080042b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80042b4:	f000 f92a 	bl	800450c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80042b8:	bf00      	nop
 80042ba:	bd80      	pop	{r7, pc}

080042bc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80042c0:	4802      	ldr	r0, [pc, #8]	; (80042cc <DMA1_Stream5_IRQHandler+0x10>)
 80042c2:	f000 fc11 	bl	8004ae8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80042c6:	bf00      	nop
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	bf00      	nop
 80042cc:	200001b0 	.word	0x200001b0

080042d0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80042d4:	4802      	ldr	r0, [pc, #8]	; (80042e0 <DMA1_Stream6_IRQHandler+0x10>)
 80042d6:	f000 fc07 	bl	8004ae8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80042da:	bf00      	nop
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	bf00      	nop
 80042e0:	20000150 	.word	0x20000150

080042e4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RightEncoderA_Pin);
 80042e8:	2040      	movs	r0, #64	; 0x40
 80042ea:	f001 f82d 	bl	8005348 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80042ee:	bf00      	nop
 80042f0:	bd80      	pop	{r7, pc}
	...

080042f4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80042f8:	4802      	ldr	r0, [pc, #8]	; (8004304 <TIM2_IRQHandler+0x10>)
 80042fa:	f002 f86f 	bl	80063dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80042fe:	bf00      	nop
 8004300:	bd80      	pop	{r7, pc}
 8004302:	bf00      	nop
 8004304:	2000007c 	.word	0x2000007c

08004308 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800430c:	4802      	ldr	r0, [pc, #8]	; (8004318 <USART2_IRQHandler+0x10>)
 800430e:	f002 ffbb 	bl	8007288 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004312:	bf00      	nop
 8004314:	bd80      	pop	{r7, pc}
 8004316:	bf00      	nop
 8004318:	2000010c 	.word	0x2000010c

0800431c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LeftEncoderA_Pin);
 8004320:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8004324:	f001 f810 	bl	8005348 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004328:	bf00      	nop
 800432a:	bd80      	pop	{r7, pc}

0800432c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b086      	sub	sp, #24
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004334:	4a14      	ldr	r2, [pc, #80]	; (8004388 <_sbrk+0x5c>)
 8004336:	4b15      	ldr	r3, [pc, #84]	; (800438c <_sbrk+0x60>)
 8004338:	1ad3      	subs	r3, r2, r3
 800433a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004340:	4b13      	ldr	r3, [pc, #76]	; (8004390 <_sbrk+0x64>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d102      	bne.n	800434e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004348:	4b11      	ldr	r3, [pc, #68]	; (8004390 <_sbrk+0x64>)
 800434a:	4a12      	ldr	r2, [pc, #72]	; (8004394 <_sbrk+0x68>)
 800434c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800434e:	4b10      	ldr	r3, [pc, #64]	; (8004390 <_sbrk+0x64>)
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	4413      	add	r3, r2
 8004356:	693a      	ldr	r2, [r7, #16]
 8004358:	429a      	cmp	r2, r3
 800435a:	d207      	bcs.n	800436c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800435c:	f004 f8b4 	bl	80084c8 <__errno>
 8004360:	4603      	mov	r3, r0
 8004362:	220c      	movs	r2, #12
 8004364:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004366:	f04f 33ff 	mov.w	r3, #4294967295
 800436a:	e009      	b.n	8004380 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800436c:	4b08      	ldr	r3, [pc, #32]	; (8004390 <_sbrk+0x64>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004372:	4b07      	ldr	r3, [pc, #28]	; (8004390 <_sbrk+0x64>)
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	4413      	add	r3, r2
 800437a:	4a05      	ldr	r2, [pc, #20]	; (8004390 <_sbrk+0x64>)
 800437c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800437e:	68fb      	ldr	r3, [r7, #12]
}
 8004380:	4618      	mov	r0, r3
 8004382:	3718      	adds	r7, #24
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}
 8004388:	20020000 	.word	0x20020000
 800438c:	00000400 	.word	0x00000400
 8004390:	20000c28 	.word	0x20000c28
 8004394:	20000d78 	.word	0x20000d78

08004398 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004398:	b480      	push	{r7}
 800439a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800439c:	4b06      	ldr	r3, [pc, #24]	; (80043b8 <SystemInit+0x20>)
 800439e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043a2:	4a05      	ldr	r2, [pc, #20]	; (80043b8 <SystemInit+0x20>)
 80043a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80043a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80043ac:	bf00      	nop
 80043ae:	46bd      	mov	sp, r7
 80043b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b4:	4770      	bx	lr
 80043b6:	bf00      	nop
 80043b8:	e000ed00 	.word	0xe000ed00

080043bc <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 80043bc:	b480      	push	{r7}
 80043be:	b085      	sub	sp, #20
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
 80043c4:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	0a5a      	lsrs	r2, r3, #9
 80043cc:	490f      	ldr	r1, [pc, #60]	; (800440c <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 80043ce:	fba1 1202 	umull	r1, r2, r1, r2
 80043d2:	09d2      	lsrs	r2, r2, #7
 80043d4:	490e      	ldr	r1, [pc, #56]	; (8004410 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 80043d6:	fb01 f202 	mul.w	r2, r1, r2
 80043da:	1a9b      	subs	r3, r3, r2
 80043dc:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	0a5b      	lsrs	r3, r3, #9
 80043e4:	4a09      	ldr	r2, [pc, #36]	; (800440c <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 80043e6:	fba2 2303 	umull	r2, r3, r2, r3
 80043ea:	09db      	lsrs	r3, r3, #7
 80043ec:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	441a      	add	r2, r3
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	68fa      	ldr	r2, [r7, #12]
 80043fe:	601a      	str	r2, [r3, #0]
}
 8004400:	bf00      	nop
 8004402:	3714      	adds	r7, #20
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr
 800440c:	00044b83 	.word	0x00044b83
 8004410:	3b9aca00 	.word	0x3b9aca00

08004414 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004414:	f8df d034 	ldr.w	sp, [pc, #52]	; 800444c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004418:	480d      	ldr	r0, [pc, #52]	; (8004450 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800441a:	490e      	ldr	r1, [pc, #56]	; (8004454 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800441c:	4a0e      	ldr	r2, [pc, #56]	; (8004458 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800441e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004420:	e002      	b.n	8004428 <LoopCopyDataInit>

08004422 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004422:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004424:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004426:	3304      	adds	r3, #4

08004428 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004428:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800442a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800442c:	d3f9      	bcc.n	8004422 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800442e:	4a0b      	ldr	r2, [pc, #44]	; (800445c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004430:	4c0b      	ldr	r4, [pc, #44]	; (8004460 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004432:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004434:	e001      	b.n	800443a <LoopFillZerobss>

08004436 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004436:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004438:	3204      	adds	r2, #4

0800443a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800443a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800443c:	d3fb      	bcc.n	8004436 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800443e:	f7ff ffab 	bl	8004398 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004442:	f004 f847 	bl	80084d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004446:	f7fc fcab 	bl	8000da0 <main>
  bx  lr    
 800444a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800444c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004450:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004454:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8004458:	08008aac 	.word	0x08008aac
  ldr r2, =_sbss
 800445c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8004460:	20000d78 	.word	0x20000d78

08004464 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004464:	e7fe      	b.n	8004464 <ADC_IRQHandler>
	...

08004468 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800446c:	4b0e      	ldr	r3, [pc, #56]	; (80044a8 <HAL_Init+0x40>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a0d      	ldr	r2, [pc, #52]	; (80044a8 <HAL_Init+0x40>)
 8004472:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004476:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004478:	4b0b      	ldr	r3, [pc, #44]	; (80044a8 <HAL_Init+0x40>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a0a      	ldr	r2, [pc, #40]	; (80044a8 <HAL_Init+0x40>)
 800447e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004482:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004484:	4b08      	ldr	r3, [pc, #32]	; (80044a8 <HAL_Init+0x40>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a07      	ldr	r2, [pc, #28]	; (80044a8 <HAL_Init+0x40>)
 800448a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800448e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004490:	2003      	movs	r0, #3
 8004492:	f000 f94f 	bl	8004734 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004496:	2000      	movs	r0, #0
 8004498:	f000 f808 	bl	80044ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800449c:	f7ff fd6e 	bl	8003f7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80044a0:	2300      	movs	r3, #0
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	bf00      	nop
 80044a8:	40023c00 	.word	0x40023c00

080044ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b082      	sub	sp, #8
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80044b4:	4b12      	ldr	r3, [pc, #72]	; (8004500 <HAL_InitTick+0x54>)
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	4b12      	ldr	r3, [pc, #72]	; (8004504 <HAL_InitTick+0x58>)
 80044ba:	781b      	ldrb	r3, [r3, #0]
 80044bc:	4619      	mov	r1, r3
 80044be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80044c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80044c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80044ca:	4618      	mov	r0, r3
 80044cc:	f000 f967 	bl	800479e <HAL_SYSTICK_Config>
 80044d0:	4603      	mov	r3, r0
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d001      	beq.n	80044da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	e00e      	b.n	80044f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2b0f      	cmp	r3, #15
 80044de:	d80a      	bhi.n	80044f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80044e0:	2200      	movs	r2, #0
 80044e2:	6879      	ldr	r1, [r7, #4]
 80044e4:	f04f 30ff 	mov.w	r0, #4294967295
 80044e8:	f000 f92f 	bl	800474a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80044ec:	4a06      	ldr	r2, [pc, #24]	; (8004508 <HAL_InitTick+0x5c>)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80044f2:	2300      	movs	r3, #0
 80044f4:	e000      	b.n	80044f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3708      	adds	r7, #8
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}
 8004500:	20000000 	.word	0x20000000
 8004504:	20000008 	.word	0x20000008
 8004508:	20000004 	.word	0x20000004

0800450c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800450c:	b480      	push	{r7}
 800450e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004510:	4b06      	ldr	r3, [pc, #24]	; (800452c <HAL_IncTick+0x20>)
 8004512:	781b      	ldrb	r3, [r3, #0]
 8004514:	461a      	mov	r2, r3
 8004516:	4b06      	ldr	r3, [pc, #24]	; (8004530 <HAL_IncTick+0x24>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4413      	add	r3, r2
 800451c:	4a04      	ldr	r2, [pc, #16]	; (8004530 <HAL_IncTick+0x24>)
 800451e:	6013      	str	r3, [r2, #0]
}
 8004520:	bf00      	nop
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr
 800452a:	bf00      	nop
 800452c:	20000008 	.word	0x20000008
 8004530:	20000c2c 	.word	0x20000c2c

08004534 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004534:	b480      	push	{r7}
 8004536:	af00      	add	r7, sp, #0
  return uwTick;
 8004538:	4b03      	ldr	r3, [pc, #12]	; (8004548 <HAL_GetTick+0x14>)
 800453a:	681b      	ldr	r3, [r3, #0]
}
 800453c:	4618      	mov	r0, r3
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr
 8004546:	bf00      	nop
 8004548:	20000c2c 	.word	0x20000c2c

0800454c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b084      	sub	sp, #16
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004554:	f7ff ffee 	bl	8004534 <HAL_GetTick>
 8004558:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004564:	d005      	beq.n	8004572 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004566:	4b0a      	ldr	r3, [pc, #40]	; (8004590 <HAL_Delay+0x44>)
 8004568:	781b      	ldrb	r3, [r3, #0]
 800456a:	461a      	mov	r2, r3
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	4413      	add	r3, r2
 8004570:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004572:	bf00      	nop
 8004574:	f7ff ffde 	bl	8004534 <HAL_GetTick>
 8004578:	4602      	mov	r2, r0
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	1ad3      	subs	r3, r2, r3
 800457e:	68fa      	ldr	r2, [r7, #12]
 8004580:	429a      	cmp	r2, r3
 8004582:	d8f7      	bhi.n	8004574 <HAL_Delay+0x28>
  {
  }
}
 8004584:	bf00      	nop
 8004586:	bf00      	nop
 8004588:	3710      	adds	r7, #16
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}
 800458e:	bf00      	nop
 8004590:	20000008 	.word	0x20000008

08004594 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004594:	b480      	push	{r7}
 8004596:	b085      	sub	sp, #20
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	f003 0307 	and.w	r3, r3, #7
 80045a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80045a4:	4b0c      	ldr	r3, [pc, #48]	; (80045d8 <__NVIC_SetPriorityGrouping+0x44>)
 80045a6:	68db      	ldr	r3, [r3, #12]
 80045a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80045aa:	68ba      	ldr	r2, [r7, #8]
 80045ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80045b0:	4013      	ands	r3, r2
 80045b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80045bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80045c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80045c6:	4a04      	ldr	r2, [pc, #16]	; (80045d8 <__NVIC_SetPriorityGrouping+0x44>)
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	60d3      	str	r3, [r2, #12]
}
 80045cc:	bf00      	nop
 80045ce:	3714      	adds	r7, #20
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr
 80045d8:	e000ed00 	.word	0xe000ed00

080045dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80045dc:	b480      	push	{r7}
 80045de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80045e0:	4b04      	ldr	r3, [pc, #16]	; (80045f4 <__NVIC_GetPriorityGrouping+0x18>)
 80045e2:	68db      	ldr	r3, [r3, #12]
 80045e4:	0a1b      	lsrs	r3, r3, #8
 80045e6:	f003 0307 	and.w	r3, r3, #7
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	46bd      	mov	sp, r7
 80045ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f2:	4770      	bx	lr
 80045f4:	e000ed00 	.word	0xe000ed00

080045f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b083      	sub	sp, #12
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	4603      	mov	r3, r0
 8004600:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004606:	2b00      	cmp	r3, #0
 8004608:	db0b      	blt.n	8004622 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800460a:	79fb      	ldrb	r3, [r7, #7]
 800460c:	f003 021f 	and.w	r2, r3, #31
 8004610:	4907      	ldr	r1, [pc, #28]	; (8004630 <__NVIC_EnableIRQ+0x38>)
 8004612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004616:	095b      	lsrs	r3, r3, #5
 8004618:	2001      	movs	r0, #1
 800461a:	fa00 f202 	lsl.w	r2, r0, r2
 800461e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004622:	bf00      	nop
 8004624:	370c      	adds	r7, #12
 8004626:	46bd      	mov	sp, r7
 8004628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462c:	4770      	bx	lr
 800462e:	bf00      	nop
 8004630:	e000e100 	.word	0xe000e100

08004634 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004634:	b480      	push	{r7}
 8004636:	b083      	sub	sp, #12
 8004638:	af00      	add	r7, sp, #0
 800463a:	4603      	mov	r3, r0
 800463c:	6039      	str	r1, [r7, #0]
 800463e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004640:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004644:	2b00      	cmp	r3, #0
 8004646:	db0a      	blt.n	800465e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	b2da      	uxtb	r2, r3
 800464c:	490c      	ldr	r1, [pc, #48]	; (8004680 <__NVIC_SetPriority+0x4c>)
 800464e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004652:	0112      	lsls	r2, r2, #4
 8004654:	b2d2      	uxtb	r2, r2
 8004656:	440b      	add	r3, r1
 8004658:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800465c:	e00a      	b.n	8004674 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	b2da      	uxtb	r2, r3
 8004662:	4908      	ldr	r1, [pc, #32]	; (8004684 <__NVIC_SetPriority+0x50>)
 8004664:	79fb      	ldrb	r3, [r7, #7]
 8004666:	f003 030f 	and.w	r3, r3, #15
 800466a:	3b04      	subs	r3, #4
 800466c:	0112      	lsls	r2, r2, #4
 800466e:	b2d2      	uxtb	r2, r2
 8004670:	440b      	add	r3, r1
 8004672:	761a      	strb	r2, [r3, #24]
}
 8004674:	bf00      	nop
 8004676:	370c      	adds	r7, #12
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr
 8004680:	e000e100 	.word	0xe000e100
 8004684:	e000ed00 	.word	0xe000ed00

08004688 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004688:	b480      	push	{r7}
 800468a:	b089      	sub	sp, #36	; 0x24
 800468c:	af00      	add	r7, sp, #0
 800468e:	60f8      	str	r0, [r7, #12]
 8004690:	60b9      	str	r1, [r7, #8]
 8004692:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f003 0307 	and.w	r3, r3, #7
 800469a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800469c:	69fb      	ldr	r3, [r7, #28]
 800469e:	f1c3 0307 	rsb	r3, r3, #7
 80046a2:	2b04      	cmp	r3, #4
 80046a4:	bf28      	it	cs
 80046a6:	2304      	movcs	r3, #4
 80046a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80046aa:	69fb      	ldr	r3, [r7, #28]
 80046ac:	3304      	adds	r3, #4
 80046ae:	2b06      	cmp	r3, #6
 80046b0:	d902      	bls.n	80046b8 <NVIC_EncodePriority+0x30>
 80046b2:	69fb      	ldr	r3, [r7, #28]
 80046b4:	3b03      	subs	r3, #3
 80046b6:	e000      	b.n	80046ba <NVIC_EncodePriority+0x32>
 80046b8:	2300      	movs	r3, #0
 80046ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046bc:	f04f 32ff 	mov.w	r2, #4294967295
 80046c0:	69bb      	ldr	r3, [r7, #24]
 80046c2:	fa02 f303 	lsl.w	r3, r2, r3
 80046c6:	43da      	mvns	r2, r3
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	401a      	ands	r2, r3
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80046d0:	f04f 31ff 	mov.w	r1, #4294967295
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	fa01 f303 	lsl.w	r3, r1, r3
 80046da:	43d9      	mvns	r1, r3
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046e0:	4313      	orrs	r3, r2
         );
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3724      	adds	r7, #36	; 0x24
 80046e6:	46bd      	mov	sp, r7
 80046e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ec:	4770      	bx	lr
	...

080046f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b082      	sub	sp, #8
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	3b01      	subs	r3, #1
 80046fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004700:	d301      	bcc.n	8004706 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004702:	2301      	movs	r3, #1
 8004704:	e00f      	b.n	8004726 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004706:	4a0a      	ldr	r2, [pc, #40]	; (8004730 <SysTick_Config+0x40>)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	3b01      	subs	r3, #1
 800470c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800470e:	210f      	movs	r1, #15
 8004710:	f04f 30ff 	mov.w	r0, #4294967295
 8004714:	f7ff ff8e 	bl	8004634 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004718:	4b05      	ldr	r3, [pc, #20]	; (8004730 <SysTick_Config+0x40>)
 800471a:	2200      	movs	r2, #0
 800471c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800471e:	4b04      	ldr	r3, [pc, #16]	; (8004730 <SysTick_Config+0x40>)
 8004720:	2207      	movs	r2, #7
 8004722:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004724:	2300      	movs	r3, #0
}
 8004726:	4618      	mov	r0, r3
 8004728:	3708      	adds	r7, #8
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}
 800472e:	bf00      	nop
 8004730:	e000e010 	.word	0xe000e010

08004734 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b082      	sub	sp, #8
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	f7ff ff29 	bl	8004594 <__NVIC_SetPriorityGrouping>
}
 8004742:	bf00      	nop
 8004744:	3708      	adds	r7, #8
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}

0800474a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800474a:	b580      	push	{r7, lr}
 800474c:	b086      	sub	sp, #24
 800474e:	af00      	add	r7, sp, #0
 8004750:	4603      	mov	r3, r0
 8004752:	60b9      	str	r1, [r7, #8]
 8004754:	607a      	str	r2, [r7, #4]
 8004756:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004758:	2300      	movs	r3, #0
 800475a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800475c:	f7ff ff3e 	bl	80045dc <__NVIC_GetPriorityGrouping>
 8004760:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004762:	687a      	ldr	r2, [r7, #4]
 8004764:	68b9      	ldr	r1, [r7, #8]
 8004766:	6978      	ldr	r0, [r7, #20]
 8004768:	f7ff ff8e 	bl	8004688 <NVIC_EncodePriority>
 800476c:	4602      	mov	r2, r0
 800476e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004772:	4611      	mov	r1, r2
 8004774:	4618      	mov	r0, r3
 8004776:	f7ff ff5d 	bl	8004634 <__NVIC_SetPriority>
}
 800477a:	bf00      	nop
 800477c:	3718      	adds	r7, #24
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}

08004782 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004782:	b580      	push	{r7, lr}
 8004784:	b082      	sub	sp, #8
 8004786:	af00      	add	r7, sp, #0
 8004788:	4603      	mov	r3, r0
 800478a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800478c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004790:	4618      	mov	r0, r3
 8004792:	f7ff ff31 	bl	80045f8 <__NVIC_EnableIRQ>
}
 8004796:	bf00      	nop
 8004798:	3708      	adds	r7, #8
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}

0800479e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800479e:	b580      	push	{r7, lr}
 80047a0:	b082      	sub	sp, #8
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f7ff ffa2 	bl	80046f0 <SysTick_Config>
 80047ac:	4603      	mov	r3, r0
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3708      	adds	r7, #8
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}
	...

080047b8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b086      	sub	sp, #24
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80047c0:	2300      	movs	r3, #0
 80047c2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80047c4:	f7ff feb6 	bl	8004534 <HAL_GetTick>
 80047c8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d101      	bne.n	80047d4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	e099      	b.n	8004908 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2202      	movs	r2, #2
 80047d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2200      	movs	r2, #0
 80047e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f022 0201 	bic.w	r2, r2, #1
 80047f2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80047f4:	e00f      	b.n	8004816 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80047f6:	f7ff fe9d 	bl	8004534 <HAL_GetTick>
 80047fa:	4602      	mov	r2, r0
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	1ad3      	subs	r3, r2, r3
 8004800:	2b05      	cmp	r3, #5
 8004802:	d908      	bls.n	8004816 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2220      	movs	r2, #32
 8004808:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2203      	movs	r2, #3
 800480e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004812:	2303      	movs	r3, #3
 8004814:	e078      	b.n	8004908 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 0301 	and.w	r3, r3, #1
 8004820:	2b00      	cmp	r3, #0
 8004822:	d1e8      	bne.n	80047f6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800482c:	697a      	ldr	r2, [r7, #20]
 800482e:	4b38      	ldr	r3, [pc, #224]	; (8004910 <HAL_DMA_Init+0x158>)
 8004830:	4013      	ands	r3, r2
 8004832:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	685a      	ldr	r2, [r3, #4]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004842:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	691b      	ldr	r3, [r3, #16]
 8004848:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800484e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	699b      	ldr	r3, [r3, #24]
 8004854:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800485a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6a1b      	ldr	r3, [r3, #32]
 8004860:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004862:	697a      	ldr	r2, [r7, #20]
 8004864:	4313      	orrs	r3, r2
 8004866:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800486c:	2b04      	cmp	r3, #4
 800486e:	d107      	bne.n	8004880 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004878:	4313      	orrs	r3, r2
 800487a:	697a      	ldr	r2, [r7, #20]
 800487c:	4313      	orrs	r3, r2
 800487e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	697a      	ldr	r2, [r7, #20]
 8004886:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	695b      	ldr	r3, [r3, #20]
 800488e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	f023 0307 	bic.w	r3, r3, #7
 8004896:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800489c:	697a      	ldr	r2, [r7, #20]
 800489e:	4313      	orrs	r3, r2
 80048a0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a6:	2b04      	cmp	r3, #4
 80048a8:	d117      	bne.n	80048da <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ae:	697a      	ldr	r2, [r7, #20]
 80048b0:	4313      	orrs	r3, r2
 80048b2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d00e      	beq.n	80048da <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	f000 fb01 	bl	8004ec4 <DMA_CheckFifoParam>
 80048c2:	4603      	mov	r3, r0
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d008      	beq.n	80048da <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2240      	movs	r2, #64	; 0x40
 80048cc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2201      	movs	r2, #1
 80048d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80048d6:	2301      	movs	r3, #1
 80048d8:	e016      	b.n	8004908 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	697a      	ldr	r2, [r7, #20]
 80048e0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f000 fab8 	bl	8004e58 <DMA_CalcBaseAndBitshift>
 80048e8:	4603      	mov	r3, r0
 80048ea:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048f0:	223f      	movs	r2, #63	; 0x3f
 80048f2:	409a      	lsls	r2, r3
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2200      	movs	r2, #0
 80048fc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2201      	movs	r2, #1
 8004902:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004906:	2300      	movs	r3, #0
}
 8004908:	4618      	mov	r0, r3
 800490a:	3718      	adds	r7, #24
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}
 8004910:	f010803f 	.word	0xf010803f

08004914 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b086      	sub	sp, #24
 8004918:	af00      	add	r7, sp, #0
 800491a:	60f8      	str	r0, [r7, #12]
 800491c:	60b9      	str	r1, [r7, #8]
 800491e:	607a      	str	r2, [r7, #4]
 8004920:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004922:	2300      	movs	r3, #0
 8004924:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800492a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004932:	2b01      	cmp	r3, #1
 8004934:	d101      	bne.n	800493a <HAL_DMA_Start_IT+0x26>
 8004936:	2302      	movs	r3, #2
 8004938:	e040      	b.n	80049bc <HAL_DMA_Start_IT+0xa8>
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2201      	movs	r2, #1
 800493e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004948:	b2db      	uxtb	r3, r3
 800494a:	2b01      	cmp	r3, #1
 800494c:	d12f      	bne.n	80049ae <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2202      	movs	r2, #2
 8004952:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2200      	movs	r2, #0
 800495a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	68b9      	ldr	r1, [r7, #8]
 8004962:	68f8      	ldr	r0, [r7, #12]
 8004964:	f000 fa4a 	bl	8004dfc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800496c:	223f      	movs	r2, #63	; 0x3f
 800496e:	409a      	lsls	r2, r3
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f042 0216 	orr.w	r2, r2, #22
 8004982:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004988:	2b00      	cmp	r3, #0
 800498a:	d007      	beq.n	800499c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f042 0208 	orr.w	r2, r2, #8
 800499a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f042 0201 	orr.w	r2, r2, #1
 80049aa:	601a      	str	r2, [r3, #0]
 80049ac:	e005      	b.n	80049ba <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2200      	movs	r2, #0
 80049b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80049b6:	2302      	movs	r3, #2
 80049b8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80049ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80049bc:	4618      	mov	r0, r3
 80049be:	3718      	adds	r7, #24
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}

080049c4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b084      	sub	sp, #16
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049d0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80049d2:	f7ff fdaf 	bl	8004534 <HAL_GetTick>
 80049d6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80049de:	b2db      	uxtb	r3, r3
 80049e0:	2b02      	cmp	r3, #2
 80049e2:	d008      	beq.n	80049f6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2280      	movs	r2, #128	; 0x80
 80049e8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2200      	movs	r2, #0
 80049ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	e052      	b.n	8004a9c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f022 0216 	bic.w	r2, r2, #22
 8004a04:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	695a      	ldr	r2, [r3, #20]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a14:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d103      	bne.n	8004a26 <HAL_DMA_Abort+0x62>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d007      	beq.n	8004a36 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f022 0208 	bic.w	r2, r2, #8
 8004a34:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f022 0201 	bic.w	r2, r2, #1
 8004a44:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a46:	e013      	b.n	8004a70 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004a48:	f7ff fd74 	bl	8004534 <HAL_GetTick>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	1ad3      	subs	r3, r2, r3
 8004a52:	2b05      	cmp	r3, #5
 8004a54:	d90c      	bls.n	8004a70 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2220      	movs	r2, #32
 8004a5a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2203      	movs	r2, #3
 8004a60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2200      	movs	r2, #0
 8004a68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004a6c:	2303      	movs	r3, #3
 8004a6e:	e015      	b.n	8004a9c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 0301 	and.w	r3, r3, #1
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d1e4      	bne.n	8004a48 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a82:	223f      	movs	r2, #63	; 0x3f
 8004a84:	409a      	lsls	r2, r3
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2201      	movs	r2, #1
 8004a8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2200      	movs	r2, #0
 8004a96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004a9a:	2300      	movs	r3, #0
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	3710      	adds	r7, #16
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}

08004aa4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b083      	sub	sp, #12
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004ab2:	b2db      	uxtb	r3, r3
 8004ab4:	2b02      	cmp	r3, #2
 8004ab6:	d004      	beq.n	8004ac2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2280      	movs	r2, #128	; 0x80
 8004abc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e00c      	b.n	8004adc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2205      	movs	r2, #5
 8004ac6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f022 0201 	bic.w	r2, r2, #1
 8004ad8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004ada:	2300      	movs	r3, #0
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	370c      	adds	r7, #12
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr

08004ae8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b086      	sub	sp, #24
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004af0:	2300      	movs	r3, #0
 8004af2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004af4:	4b8e      	ldr	r3, [pc, #568]	; (8004d30 <HAL_DMA_IRQHandler+0x248>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a8e      	ldr	r2, [pc, #568]	; (8004d34 <HAL_DMA_IRQHandler+0x24c>)
 8004afa:	fba2 2303 	umull	r2, r3, r2, r3
 8004afe:	0a9b      	lsrs	r3, r3, #10
 8004b00:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b06:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b12:	2208      	movs	r2, #8
 8004b14:	409a      	lsls	r2, r3
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	4013      	ands	r3, r2
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d01a      	beq.n	8004b54 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 0304 	and.w	r3, r3, #4
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d013      	beq.n	8004b54 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f022 0204 	bic.w	r2, r2, #4
 8004b3a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b40:	2208      	movs	r2, #8
 8004b42:	409a      	lsls	r2, r3
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b4c:	f043 0201 	orr.w	r2, r3, #1
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b58:	2201      	movs	r2, #1
 8004b5a:	409a      	lsls	r2, r3
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	4013      	ands	r3, r2
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d012      	beq.n	8004b8a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	695b      	ldr	r3, [r3, #20]
 8004b6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d00b      	beq.n	8004b8a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b76:	2201      	movs	r2, #1
 8004b78:	409a      	lsls	r2, r3
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b82:	f043 0202 	orr.w	r2, r3, #2
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b8e:	2204      	movs	r2, #4
 8004b90:	409a      	lsls	r2, r3
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	4013      	ands	r3, r2
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d012      	beq.n	8004bc0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 0302 	and.w	r3, r3, #2
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d00b      	beq.n	8004bc0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bac:	2204      	movs	r2, #4
 8004bae:	409a      	lsls	r2, r3
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bb8:	f043 0204 	orr.w	r2, r3, #4
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bc4:	2210      	movs	r2, #16
 8004bc6:	409a      	lsls	r2, r3
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	4013      	ands	r3, r2
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d043      	beq.n	8004c58 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f003 0308 	and.w	r3, r3, #8
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d03c      	beq.n	8004c58 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004be2:	2210      	movs	r2, #16
 8004be4:	409a      	lsls	r2, r3
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d018      	beq.n	8004c2a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d108      	bne.n	8004c18 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d024      	beq.n	8004c58 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	4798      	blx	r3
 8004c16:	e01f      	b.n	8004c58 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d01b      	beq.n	8004c58 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c24:	6878      	ldr	r0, [r7, #4]
 8004c26:	4798      	blx	r3
 8004c28:	e016      	b.n	8004c58 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d107      	bne.n	8004c48 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	681a      	ldr	r2, [r3, #0]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f022 0208 	bic.w	r2, r2, #8
 8004c46:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d003      	beq.n	8004c58 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c54:	6878      	ldr	r0, [r7, #4]
 8004c56:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c5c:	2220      	movs	r2, #32
 8004c5e:	409a      	lsls	r2, r3
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	4013      	ands	r3, r2
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	f000 808f 	beq.w	8004d88 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 0310 	and.w	r3, r3, #16
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	f000 8087 	beq.w	8004d88 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c7e:	2220      	movs	r2, #32
 8004c80:	409a      	lsls	r2, r3
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004c8c:	b2db      	uxtb	r3, r3
 8004c8e:	2b05      	cmp	r3, #5
 8004c90:	d136      	bne.n	8004d00 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f022 0216 	bic.w	r2, r2, #22
 8004ca0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	695a      	ldr	r2, [r3, #20]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004cb0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d103      	bne.n	8004cc2 <HAL_DMA_IRQHandler+0x1da>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d007      	beq.n	8004cd2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f022 0208 	bic.w	r2, r2, #8
 8004cd0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cd6:	223f      	movs	r2, #63	; 0x3f
 8004cd8:	409a      	lsls	r2, r3
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d07e      	beq.n	8004df4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	4798      	blx	r3
        }
        return;
 8004cfe:	e079      	b.n	8004df4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d01d      	beq.n	8004d4a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d10d      	bne.n	8004d38 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d031      	beq.n	8004d88 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d28:	6878      	ldr	r0, [r7, #4]
 8004d2a:	4798      	blx	r3
 8004d2c:	e02c      	b.n	8004d88 <HAL_DMA_IRQHandler+0x2a0>
 8004d2e:	bf00      	nop
 8004d30:	20000000 	.word	0x20000000
 8004d34:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d023      	beq.n	8004d88 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d44:	6878      	ldr	r0, [r7, #4]
 8004d46:	4798      	blx	r3
 8004d48:	e01e      	b.n	8004d88 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d10f      	bne.n	8004d78 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f022 0210 	bic.w	r2, r2, #16
 8004d66:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2200      	movs	r2, #0
 8004d74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d003      	beq.n	8004d88 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d032      	beq.n	8004df6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d94:	f003 0301 	and.w	r3, r3, #1
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d022      	beq.n	8004de2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2205      	movs	r2, #5
 8004da0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f022 0201 	bic.w	r2, r2, #1
 8004db2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	3301      	adds	r3, #1
 8004db8:	60bb      	str	r3, [r7, #8]
 8004dba:	697a      	ldr	r2, [r7, #20]
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d307      	bcc.n	8004dd0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f003 0301 	and.w	r3, r3, #1
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d1f2      	bne.n	8004db4 <HAL_DMA_IRQHandler+0x2cc>
 8004dce:	e000      	b.n	8004dd2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004dd0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d005      	beq.n	8004df6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	4798      	blx	r3
 8004df2:	e000      	b.n	8004df6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004df4:	bf00      	nop
    }
  }
}
 8004df6:	3718      	adds	r7, #24
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd80      	pop	{r7, pc}

08004dfc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b085      	sub	sp, #20
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	60f8      	str	r0, [r7, #12]
 8004e04:	60b9      	str	r1, [r7, #8]
 8004e06:	607a      	str	r2, [r7, #4]
 8004e08:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004e18:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	683a      	ldr	r2, [r7, #0]
 8004e20:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	2b40      	cmp	r3, #64	; 0x40
 8004e28:	d108      	bne.n	8004e3c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	687a      	ldr	r2, [r7, #4]
 8004e30:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	68ba      	ldr	r2, [r7, #8]
 8004e38:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004e3a:	e007      	b.n	8004e4c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	68ba      	ldr	r2, [r7, #8]
 8004e42:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	687a      	ldr	r2, [r7, #4]
 8004e4a:	60da      	str	r2, [r3, #12]
}
 8004e4c:	bf00      	nop
 8004e4e:	3714      	adds	r7, #20
 8004e50:	46bd      	mov	sp, r7
 8004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e56:	4770      	bx	lr

08004e58 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	b085      	sub	sp, #20
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	b2db      	uxtb	r3, r3
 8004e66:	3b10      	subs	r3, #16
 8004e68:	4a14      	ldr	r2, [pc, #80]	; (8004ebc <DMA_CalcBaseAndBitshift+0x64>)
 8004e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e6e:	091b      	lsrs	r3, r3, #4
 8004e70:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004e72:	4a13      	ldr	r2, [pc, #76]	; (8004ec0 <DMA_CalcBaseAndBitshift+0x68>)
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	4413      	add	r3, r2
 8004e78:	781b      	ldrb	r3, [r3, #0]
 8004e7a:	461a      	mov	r2, r3
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2b03      	cmp	r3, #3
 8004e84:	d909      	bls.n	8004e9a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004e8e:	f023 0303 	bic.w	r3, r3, #3
 8004e92:	1d1a      	adds	r2, r3, #4
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	659a      	str	r2, [r3, #88]	; 0x58
 8004e98:	e007      	b.n	8004eaa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004ea2:	f023 0303 	bic.w	r3, r3, #3
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3714      	adds	r7, #20
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb8:	4770      	bx	lr
 8004eba:	bf00      	nop
 8004ebc:	aaaaaaab 	.word	0xaaaaaaab
 8004ec0:	08008a90 	.word	0x08008a90

08004ec4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b085      	sub	sp, #20
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ed4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	699b      	ldr	r3, [r3, #24]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d11f      	bne.n	8004f1e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	2b03      	cmp	r3, #3
 8004ee2:	d856      	bhi.n	8004f92 <DMA_CheckFifoParam+0xce>
 8004ee4:	a201      	add	r2, pc, #4	; (adr r2, 8004eec <DMA_CheckFifoParam+0x28>)
 8004ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eea:	bf00      	nop
 8004eec:	08004efd 	.word	0x08004efd
 8004ef0:	08004f0f 	.word	0x08004f0f
 8004ef4:	08004efd 	.word	0x08004efd
 8004ef8:	08004f93 	.word	0x08004f93
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f00:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d046      	beq.n	8004f96 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f0c:	e043      	b.n	8004f96 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f12:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004f16:	d140      	bne.n	8004f9a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f1c:	e03d      	b.n	8004f9a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	699b      	ldr	r3, [r3, #24]
 8004f22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f26:	d121      	bne.n	8004f6c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	2b03      	cmp	r3, #3
 8004f2c:	d837      	bhi.n	8004f9e <DMA_CheckFifoParam+0xda>
 8004f2e:	a201      	add	r2, pc, #4	; (adr r2, 8004f34 <DMA_CheckFifoParam+0x70>)
 8004f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f34:	08004f45 	.word	0x08004f45
 8004f38:	08004f4b 	.word	0x08004f4b
 8004f3c:	08004f45 	.word	0x08004f45
 8004f40:	08004f5d 	.word	0x08004f5d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004f44:	2301      	movs	r3, #1
 8004f46:	73fb      	strb	r3, [r7, #15]
      break;
 8004f48:	e030      	b.n	8004fac <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f4e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d025      	beq.n	8004fa2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
 8004f58:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f5a:	e022      	b.n	8004fa2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f60:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004f64:	d11f      	bne.n	8004fa6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004f6a:	e01c      	b.n	8004fa6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	2b02      	cmp	r3, #2
 8004f70:	d903      	bls.n	8004f7a <DMA_CheckFifoParam+0xb6>
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	2b03      	cmp	r3, #3
 8004f76:	d003      	beq.n	8004f80 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004f78:	e018      	b.n	8004fac <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	73fb      	strb	r3, [r7, #15]
      break;
 8004f7e:	e015      	b.n	8004fac <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d00e      	beq.n	8004faa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	73fb      	strb	r3, [r7, #15]
      break;
 8004f90:	e00b      	b.n	8004faa <DMA_CheckFifoParam+0xe6>
      break;
 8004f92:	bf00      	nop
 8004f94:	e00a      	b.n	8004fac <DMA_CheckFifoParam+0xe8>
      break;
 8004f96:	bf00      	nop
 8004f98:	e008      	b.n	8004fac <DMA_CheckFifoParam+0xe8>
      break;
 8004f9a:	bf00      	nop
 8004f9c:	e006      	b.n	8004fac <DMA_CheckFifoParam+0xe8>
      break;
 8004f9e:	bf00      	nop
 8004fa0:	e004      	b.n	8004fac <DMA_CheckFifoParam+0xe8>
      break;
 8004fa2:	bf00      	nop
 8004fa4:	e002      	b.n	8004fac <DMA_CheckFifoParam+0xe8>
      break;   
 8004fa6:	bf00      	nop
 8004fa8:	e000      	b.n	8004fac <DMA_CheckFifoParam+0xe8>
      break;
 8004faa:	bf00      	nop
    }
  } 
  
  return status; 
 8004fac:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3714      	adds	r7, #20
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr
 8004fba:	bf00      	nop

08004fbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b089      	sub	sp, #36	; 0x24
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
 8004fc4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	61fb      	str	r3, [r7, #28]
 8004fd6:	e165      	b.n	80052a4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004fd8:	2201      	movs	r2, #1
 8004fda:	69fb      	ldr	r3, [r7, #28]
 8004fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	697a      	ldr	r2, [r7, #20]
 8004fe8:	4013      	ands	r3, r2
 8004fea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004fec:	693a      	ldr	r2, [r7, #16]
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	f040 8154 	bne.w	800529e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	f003 0303 	and.w	r3, r3, #3
 8004ffe:	2b01      	cmp	r3, #1
 8005000:	d005      	beq.n	800500e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800500a:	2b02      	cmp	r3, #2
 800500c:	d130      	bne.n	8005070 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005014:	69fb      	ldr	r3, [r7, #28]
 8005016:	005b      	lsls	r3, r3, #1
 8005018:	2203      	movs	r2, #3
 800501a:	fa02 f303 	lsl.w	r3, r2, r3
 800501e:	43db      	mvns	r3, r3
 8005020:	69ba      	ldr	r2, [r7, #24]
 8005022:	4013      	ands	r3, r2
 8005024:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	68da      	ldr	r2, [r3, #12]
 800502a:	69fb      	ldr	r3, [r7, #28]
 800502c:	005b      	lsls	r3, r3, #1
 800502e:	fa02 f303 	lsl.w	r3, r2, r3
 8005032:	69ba      	ldr	r2, [r7, #24]
 8005034:	4313      	orrs	r3, r2
 8005036:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	69ba      	ldr	r2, [r7, #24]
 800503c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005044:	2201      	movs	r2, #1
 8005046:	69fb      	ldr	r3, [r7, #28]
 8005048:	fa02 f303 	lsl.w	r3, r2, r3
 800504c:	43db      	mvns	r3, r3
 800504e:	69ba      	ldr	r2, [r7, #24]
 8005050:	4013      	ands	r3, r2
 8005052:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	091b      	lsrs	r3, r3, #4
 800505a:	f003 0201 	and.w	r2, r3, #1
 800505e:	69fb      	ldr	r3, [r7, #28]
 8005060:	fa02 f303 	lsl.w	r3, r2, r3
 8005064:	69ba      	ldr	r2, [r7, #24]
 8005066:	4313      	orrs	r3, r2
 8005068:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	69ba      	ldr	r2, [r7, #24]
 800506e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	f003 0303 	and.w	r3, r3, #3
 8005078:	2b03      	cmp	r3, #3
 800507a:	d017      	beq.n	80050ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	68db      	ldr	r3, [r3, #12]
 8005080:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005082:	69fb      	ldr	r3, [r7, #28]
 8005084:	005b      	lsls	r3, r3, #1
 8005086:	2203      	movs	r2, #3
 8005088:	fa02 f303 	lsl.w	r3, r2, r3
 800508c:	43db      	mvns	r3, r3
 800508e:	69ba      	ldr	r2, [r7, #24]
 8005090:	4013      	ands	r3, r2
 8005092:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	689a      	ldr	r2, [r3, #8]
 8005098:	69fb      	ldr	r3, [r7, #28]
 800509a:	005b      	lsls	r3, r3, #1
 800509c:	fa02 f303 	lsl.w	r3, r2, r3
 80050a0:	69ba      	ldr	r2, [r7, #24]
 80050a2:	4313      	orrs	r3, r2
 80050a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	69ba      	ldr	r2, [r7, #24]
 80050aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	f003 0303 	and.w	r3, r3, #3
 80050b4:	2b02      	cmp	r3, #2
 80050b6:	d123      	bne.n	8005100 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80050b8:	69fb      	ldr	r3, [r7, #28]
 80050ba:	08da      	lsrs	r2, r3, #3
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	3208      	adds	r2, #8
 80050c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80050c6:	69fb      	ldr	r3, [r7, #28]
 80050c8:	f003 0307 	and.w	r3, r3, #7
 80050cc:	009b      	lsls	r3, r3, #2
 80050ce:	220f      	movs	r2, #15
 80050d0:	fa02 f303 	lsl.w	r3, r2, r3
 80050d4:	43db      	mvns	r3, r3
 80050d6:	69ba      	ldr	r2, [r7, #24]
 80050d8:	4013      	ands	r3, r2
 80050da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	691a      	ldr	r2, [r3, #16]
 80050e0:	69fb      	ldr	r3, [r7, #28]
 80050e2:	f003 0307 	and.w	r3, r3, #7
 80050e6:	009b      	lsls	r3, r3, #2
 80050e8:	fa02 f303 	lsl.w	r3, r2, r3
 80050ec:	69ba      	ldr	r2, [r7, #24]
 80050ee:	4313      	orrs	r3, r2
 80050f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80050f2:	69fb      	ldr	r3, [r7, #28]
 80050f4:	08da      	lsrs	r2, r3, #3
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	3208      	adds	r2, #8
 80050fa:	69b9      	ldr	r1, [r7, #24]
 80050fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005106:	69fb      	ldr	r3, [r7, #28]
 8005108:	005b      	lsls	r3, r3, #1
 800510a:	2203      	movs	r2, #3
 800510c:	fa02 f303 	lsl.w	r3, r2, r3
 8005110:	43db      	mvns	r3, r3
 8005112:	69ba      	ldr	r2, [r7, #24]
 8005114:	4013      	ands	r3, r2
 8005116:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	f003 0203 	and.w	r2, r3, #3
 8005120:	69fb      	ldr	r3, [r7, #28]
 8005122:	005b      	lsls	r3, r3, #1
 8005124:	fa02 f303 	lsl.w	r3, r2, r3
 8005128:	69ba      	ldr	r2, [r7, #24]
 800512a:	4313      	orrs	r3, r2
 800512c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	69ba      	ldr	r2, [r7, #24]
 8005132:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800513c:	2b00      	cmp	r3, #0
 800513e:	f000 80ae 	beq.w	800529e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005142:	2300      	movs	r3, #0
 8005144:	60fb      	str	r3, [r7, #12]
 8005146:	4b5d      	ldr	r3, [pc, #372]	; (80052bc <HAL_GPIO_Init+0x300>)
 8005148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800514a:	4a5c      	ldr	r2, [pc, #368]	; (80052bc <HAL_GPIO_Init+0x300>)
 800514c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005150:	6453      	str	r3, [r2, #68]	; 0x44
 8005152:	4b5a      	ldr	r3, [pc, #360]	; (80052bc <HAL_GPIO_Init+0x300>)
 8005154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005156:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800515a:	60fb      	str	r3, [r7, #12]
 800515c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800515e:	4a58      	ldr	r2, [pc, #352]	; (80052c0 <HAL_GPIO_Init+0x304>)
 8005160:	69fb      	ldr	r3, [r7, #28]
 8005162:	089b      	lsrs	r3, r3, #2
 8005164:	3302      	adds	r3, #2
 8005166:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800516a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800516c:	69fb      	ldr	r3, [r7, #28]
 800516e:	f003 0303 	and.w	r3, r3, #3
 8005172:	009b      	lsls	r3, r3, #2
 8005174:	220f      	movs	r2, #15
 8005176:	fa02 f303 	lsl.w	r3, r2, r3
 800517a:	43db      	mvns	r3, r3
 800517c:	69ba      	ldr	r2, [r7, #24]
 800517e:	4013      	ands	r3, r2
 8005180:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	4a4f      	ldr	r2, [pc, #316]	; (80052c4 <HAL_GPIO_Init+0x308>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d025      	beq.n	80051d6 <HAL_GPIO_Init+0x21a>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	4a4e      	ldr	r2, [pc, #312]	; (80052c8 <HAL_GPIO_Init+0x30c>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d01f      	beq.n	80051d2 <HAL_GPIO_Init+0x216>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	4a4d      	ldr	r2, [pc, #308]	; (80052cc <HAL_GPIO_Init+0x310>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d019      	beq.n	80051ce <HAL_GPIO_Init+0x212>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	4a4c      	ldr	r2, [pc, #304]	; (80052d0 <HAL_GPIO_Init+0x314>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d013      	beq.n	80051ca <HAL_GPIO_Init+0x20e>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	4a4b      	ldr	r2, [pc, #300]	; (80052d4 <HAL_GPIO_Init+0x318>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d00d      	beq.n	80051c6 <HAL_GPIO_Init+0x20a>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	4a4a      	ldr	r2, [pc, #296]	; (80052d8 <HAL_GPIO_Init+0x31c>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d007      	beq.n	80051c2 <HAL_GPIO_Init+0x206>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	4a49      	ldr	r2, [pc, #292]	; (80052dc <HAL_GPIO_Init+0x320>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d101      	bne.n	80051be <HAL_GPIO_Init+0x202>
 80051ba:	2306      	movs	r3, #6
 80051bc:	e00c      	b.n	80051d8 <HAL_GPIO_Init+0x21c>
 80051be:	2307      	movs	r3, #7
 80051c0:	e00a      	b.n	80051d8 <HAL_GPIO_Init+0x21c>
 80051c2:	2305      	movs	r3, #5
 80051c4:	e008      	b.n	80051d8 <HAL_GPIO_Init+0x21c>
 80051c6:	2304      	movs	r3, #4
 80051c8:	e006      	b.n	80051d8 <HAL_GPIO_Init+0x21c>
 80051ca:	2303      	movs	r3, #3
 80051cc:	e004      	b.n	80051d8 <HAL_GPIO_Init+0x21c>
 80051ce:	2302      	movs	r3, #2
 80051d0:	e002      	b.n	80051d8 <HAL_GPIO_Init+0x21c>
 80051d2:	2301      	movs	r3, #1
 80051d4:	e000      	b.n	80051d8 <HAL_GPIO_Init+0x21c>
 80051d6:	2300      	movs	r3, #0
 80051d8:	69fa      	ldr	r2, [r7, #28]
 80051da:	f002 0203 	and.w	r2, r2, #3
 80051de:	0092      	lsls	r2, r2, #2
 80051e0:	4093      	lsls	r3, r2
 80051e2:	69ba      	ldr	r2, [r7, #24]
 80051e4:	4313      	orrs	r3, r2
 80051e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80051e8:	4935      	ldr	r1, [pc, #212]	; (80052c0 <HAL_GPIO_Init+0x304>)
 80051ea:	69fb      	ldr	r3, [r7, #28]
 80051ec:	089b      	lsrs	r3, r3, #2
 80051ee:	3302      	adds	r3, #2
 80051f0:	69ba      	ldr	r2, [r7, #24]
 80051f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80051f6:	4b3a      	ldr	r3, [pc, #232]	; (80052e0 <HAL_GPIO_Init+0x324>)
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	43db      	mvns	r3, r3
 8005200:	69ba      	ldr	r2, [r7, #24]
 8005202:	4013      	ands	r3, r2
 8005204:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800520e:	2b00      	cmp	r3, #0
 8005210:	d003      	beq.n	800521a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8005212:	69ba      	ldr	r2, [r7, #24]
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	4313      	orrs	r3, r2
 8005218:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800521a:	4a31      	ldr	r2, [pc, #196]	; (80052e0 <HAL_GPIO_Init+0x324>)
 800521c:	69bb      	ldr	r3, [r7, #24]
 800521e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005220:	4b2f      	ldr	r3, [pc, #188]	; (80052e0 <HAL_GPIO_Init+0x324>)
 8005222:	68db      	ldr	r3, [r3, #12]
 8005224:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	43db      	mvns	r3, r3
 800522a:	69ba      	ldr	r2, [r7, #24]
 800522c:	4013      	ands	r3, r2
 800522e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005238:	2b00      	cmp	r3, #0
 800523a:	d003      	beq.n	8005244 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800523c:	69ba      	ldr	r2, [r7, #24]
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	4313      	orrs	r3, r2
 8005242:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005244:	4a26      	ldr	r2, [pc, #152]	; (80052e0 <HAL_GPIO_Init+0x324>)
 8005246:	69bb      	ldr	r3, [r7, #24]
 8005248:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800524a:	4b25      	ldr	r3, [pc, #148]	; (80052e0 <HAL_GPIO_Init+0x324>)
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	43db      	mvns	r3, r3
 8005254:	69ba      	ldr	r2, [r7, #24]
 8005256:	4013      	ands	r3, r2
 8005258:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005262:	2b00      	cmp	r3, #0
 8005264:	d003      	beq.n	800526e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8005266:	69ba      	ldr	r2, [r7, #24]
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	4313      	orrs	r3, r2
 800526c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800526e:	4a1c      	ldr	r2, [pc, #112]	; (80052e0 <HAL_GPIO_Init+0x324>)
 8005270:	69bb      	ldr	r3, [r7, #24]
 8005272:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005274:	4b1a      	ldr	r3, [pc, #104]	; (80052e0 <HAL_GPIO_Init+0x324>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	43db      	mvns	r3, r3
 800527e:	69ba      	ldr	r2, [r7, #24]
 8005280:	4013      	ands	r3, r2
 8005282:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800528c:	2b00      	cmp	r3, #0
 800528e:	d003      	beq.n	8005298 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005290:	69ba      	ldr	r2, [r7, #24]
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	4313      	orrs	r3, r2
 8005296:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005298:	4a11      	ldr	r2, [pc, #68]	; (80052e0 <HAL_GPIO_Init+0x324>)
 800529a:	69bb      	ldr	r3, [r7, #24]
 800529c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800529e:	69fb      	ldr	r3, [r7, #28]
 80052a0:	3301      	adds	r3, #1
 80052a2:	61fb      	str	r3, [r7, #28]
 80052a4:	69fb      	ldr	r3, [r7, #28]
 80052a6:	2b0f      	cmp	r3, #15
 80052a8:	f67f ae96 	bls.w	8004fd8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80052ac:	bf00      	nop
 80052ae:	bf00      	nop
 80052b0:	3724      	adds	r7, #36	; 0x24
 80052b2:	46bd      	mov	sp, r7
 80052b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b8:	4770      	bx	lr
 80052ba:	bf00      	nop
 80052bc:	40023800 	.word	0x40023800
 80052c0:	40013800 	.word	0x40013800
 80052c4:	40020000 	.word	0x40020000
 80052c8:	40020400 	.word	0x40020400
 80052cc:	40020800 	.word	0x40020800
 80052d0:	40020c00 	.word	0x40020c00
 80052d4:	40021000 	.word	0x40021000
 80052d8:	40021400 	.word	0x40021400
 80052dc:	40021800 	.word	0x40021800
 80052e0:	40013c00 	.word	0x40013c00

080052e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b085      	sub	sp, #20
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
 80052ec:	460b      	mov	r3, r1
 80052ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	691a      	ldr	r2, [r3, #16]
 80052f4:	887b      	ldrh	r3, [r7, #2]
 80052f6:	4013      	ands	r3, r2
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d002      	beq.n	8005302 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80052fc:	2301      	movs	r3, #1
 80052fe:	73fb      	strb	r3, [r7, #15]
 8005300:	e001      	b.n	8005306 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005302:	2300      	movs	r3, #0
 8005304:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005306:	7bfb      	ldrb	r3, [r7, #15]
}
 8005308:	4618      	mov	r0, r3
 800530a:	3714      	adds	r7, #20
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	4770      	bx	lr

08005314 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005314:	b480      	push	{r7}
 8005316:	b085      	sub	sp, #20
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	460b      	mov	r3, r1
 800531e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	695b      	ldr	r3, [r3, #20]
 8005324:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005326:	887a      	ldrh	r2, [r7, #2]
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	4013      	ands	r3, r2
 800532c:	041a      	lsls	r2, r3, #16
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	43d9      	mvns	r1, r3
 8005332:	887b      	ldrh	r3, [r7, #2]
 8005334:	400b      	ands	r3, r1
 8005336:	431a      	orrs	r2, r3
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	619a      	str	r2, [r3, #24]
}
 800533c:	bf00      	nop
 800533e:	3714      	adds	r7, #20
 8005340:	46bd      	mov	sp, r7
 8005342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005346:	4770      	bx	lr

08005348 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b082      	sub	sp, #8
 800534c:	af00      	add	r7, sp, #0
 800534e:	4603      	mov	r3, r0
 8005350:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005352:	4b08      	ldr	r3, [pc, #32]	; (8005374 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005354:	695a      	ldr	r2, [r3, #20]
 8005356:	88fb      	ldrh	r3, [r7, #6]
 8005358:	4013      	ands	r3, r2
 800535a:	2b00      	cmp	r3, #0
 800535c:	d006      	beq.n	800536c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800535e:	4a05      	ldr	r2, [pc, #20]	; (8005374 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005360:	88fb      	ldrh	r3, [r7, #6]
 8005362:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005364:	88fb      	ldrh	r3, [r7, #6]
 8005366:	4618      	mov	r0, r3
 8005368:	f7fd feaa 	bl	80030c0 <HAL_GPIO_EXTI_Callback>
  }
}
 800536c:	bf00      	nop
 800536e:	3708      	adds	r7, #8
 8005370:	46bd      	mov	sp, r7
 8005372:	bd80      	pop	{r7, pc}
 8005374:	40013c00 	.word	0x40013c00

08005378 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b084      	sub	sp, #16
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
 8005380:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d101      	bne.n	800538c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005388:	2301      	movs	r3, #1
 800538a:	e0cc      	b.n	8005526 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800538c:	4b68      	ldr	r3, [pc, #416]	; (8005530 <HAL_RCC_ClockConfig+0x1b8>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f003 030f 	and.w	r3, r3, #15
 8005394:	683a      	ldr	r2, [r7, #0]
 8005396:	429a      	cmp	r2, r3
 8005398:	d90c      	bls.n	80053b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800539a:	4b65      	ldr	r3, [pc, #404]	; (8005530 <HAL_RCC_ClockConfig+0x1b8>)
 800539c:	683a      	ldr	r2, [r7, #0]
 800539e:	b2d2      	uxtb	r2, r2
 80053a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053a2:	4b63      	ldr	r3, [pc, #396]	; (8005530 <HAL_RCC_ClockConfig+0x1b8>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f003 030f 	and.w	r3, r3, #15
 80053aa:	683a      	ldr	r2, [r7, #0]
 80053ac:	429a      	cmp	r2, r3
 80053ae:	d001      	beq.n	80053b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80053b0:	2301      	movs	r3, #1
 80053b2:	e0b8      	b.n	8005526 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f003 0302 	and.w	r3, r3, #2
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d020      	beq.n	8005402 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f003 0304 	and.w	r3, r3, #4
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d005      	beq.n	80053d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80053cc:	4b59      	ldr	r3, [pc, #356]	; (8005534 <HAL_RCC_ClockConfig+0x1bc>)
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	4a58      	ldr	r2, [pc, #352]	; (8005534 <HAL_RCC_ClockConfig+0x1bc>)
 80053d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80053d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f003 0308 	and.w	r3, r3, #8
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d005      	beq.n	80053f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80053e4:	4b53      	ldr	r3, [pc, #332]	; (8005534 <HAL_RCC_ClockConfig+0x1bc>)
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	4a52      	ldr	r2, [pc, #328]	; (8005534 <HAL_RCC_ClockConfig+0x1bc>)
 80053ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80053ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053f0:	4b50      	ldr	r3, [pc, #320]	; (8005534 <HAL_RCC_ClockConfig+0x1bc>)
 80053f2:	689b      	ldr	r3, [r3, #8]
 80053f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	494d      	ldr	r1, [pc, #308]	; (8005534 <HAL_RCC_ClockConfig+0x1bc>)
 80053fe:	4313      	orrs	r3, r2
 8005400:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f003 0301 	and.w	r3, r3, #1
 800540a:	2b00      	cmp	r3, #0
 800540c:	d044      	beq.n	8005498 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	2b01      	cmp	r3, #1
 8005414:	d107      	bne.n	8005426 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005416:	4b47      	ldr	r3, [pc, #284]	; (8005534 <HAL_RCC_ClockConfig+0x1bc>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800541e:	2b00      	cmp	r3, #0
 8005420:	d119      	bne.n	8005456 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	e07f      	b.n	8005526 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	2b02      	cmp	r3, #2
 800542c:	d003      	beq.n	8005436 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005432:	2b03      	cmp	r3, #3
 8005434:	d107      	bne.n	8005446 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005436:	4b3f      	ldr	r3, [pc, #252]	; (8005534 <HAL_RCC_ClockConfig+0x1bc>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800543e:	2b00      	cmp	r3, #0
 8005440:	d109      	bne.n	8005456 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005442:	2301      	movs	r3, #1
 8005444:	e06f      	b.n	8005526 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005446:	4b3b      	ldr	r3, [pc, #236]	; (8005534 <HAL_RCC_ClockConfig+0x1bc>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f003 0302 	and.w	r3, r3, #2
 800544e:	2b00      	cmp	r3, #0
 8005450:	d101      	bne.n	8005456 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	e067      	b.n	8005526 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005456:	4b37      	ldr	r3, [pc, #220]	; (8005534 <HAL_RCC_ClockConfig+0x1bc>)
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	f023 0203 	bic.w	r2, r3, #3
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	4934      	ldr	r1, [pc, #208]	; (8005534 <HAL_RCC_ClockConfig+0x1bc>)
 8005464:	4313      	orrs	r3, r2
 8005466:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005468:	f7ff f864 	bl	8004534 <HAL_GetTick>
 800546c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800546e:	e00a      	b.n	8005486 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005470:	f7ff f860 	bl	8004534 <HAL_GetTick>
 8005474:	4602      	mov	r2, r0
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	1ad3      	subs	r3, r2, r3
 800547a:	f241 3288 	movw	r2, #5000	; 0x1388
 800547e:	4293      	cmp	r3, r2
 8005480:	d901      	bls.n	8005486 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005482:	2303      	movs	r3, #3
 8005484:	e04f      	b.n	8005526 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005486:	4b2b      	ldr	r3, [pc, #172]	; (8005534 <HAL_RCC_ClockConfig+0x1bc>)
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	f003 020c 	and.w	r2, r3, #12
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	009b      	lsls	r3, r3, #2
 8005494:	429a      	cmp	r2, r3
 8005496:	d1eb      	bne.n	8005470 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005498:	4b25      	ldr	r3, [pc, #148]	; (8005530 <HAL_RCC_ClockConfig+0x1b8>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f003 030f 	and.w	r3, r3, #15
 80054a0:	683a      	ldr	r2, [r7, #0]
 80054a2:	429a      	cmp	r2, r3
 80054a4:	d20c      	bcs.n	80054c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054a6:	4b22      	ldr	r3, [pc, #136]	; (8005530 <HAL_RCC_ClockConfig+0x1b8>)
 80054a8:	683a      	ldr	r2, [r7, #0]
 80054aa:	b2d2      	uxtb	r2, r2
 80054ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054ae:	4b20      	ldr	r3, [pc, #128]	; (8005530 <HAL_RCC_ClockConfig+0x1b8>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f003 030f 	and.w	r3, r3, #15
 80054b6:	683a      	ldr	r2, [r7, #0]
 80054b8:	429a      	cmp	r2, r3
 80054ba:	d001      	beq.n	80054c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80054bc:	2301      	movs	r3, #1
 80054be:	e032      	b.n	8005526 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f003 0304 	and.w	r3, r3, #4
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d008      	beq.n	80054de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80054cc:	4b19      	ldr	r3, [pc, #100]	; (8005534 <HAL_RCC_ClockConfig+0x1bc>)
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	68db      	ldr	r3, [r3, #12]
 80054d8:	4916      	ldr	r1, [pc, #88]	; (8005534 <HAL_RCC_ClockConfig+0x1bc>)
 80054da:	4313      	orrs	r3, r2
 80054dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f003 0308 	and.w	r3, r3, #8
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d009      	beq.n	80054fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80054ea:	4b12      	ldr	r3, [pc, #72]	; (8005534 <HAL_RCC_ClockConfig+0x1bc>)
 80054ec:	689b      	ldr	r3, [r3, #8]
 80054ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	691b      	ldr	r3, [r3, #16]
 80054f6:	00db      	lsls	r3, r3, #3
 80054f8:	490e      	ldr	r1, [pc, #56]	; (8005534 <HAL_RCC_ClockConfig+0x1bc>)
 80054fa:	4313      	orrs	r3, r2
 80054fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80054fe:	f000 f855 	bl	80055ac <HAL_RCC_GetSysClockFreq>
 8005502:	4602      	mov	r2, r0
 8005504:	4b0b      	ldr	r3, [pc, #44]	; (8005534 <HAL_RCC_ClockConfig+0x1bc>)
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	091b      	lsrs	r3, r3, #4
 800550a:	f003 030f 	and.w	r3, r3, #15
 800550e:	490a      	ldr	r1, [pc, #40]	; (8005538 <HAL_RCC_ClockConfig+0x1c0>)
 8005510:	5ccb      	ldrb	r3, [r1, r3]
 8005512:	fa22 f303 	lsr.w	r3, r2, r3
 8005516:	4a09      	ldr	r2, [pc, #36]	; (800553c <HAL_RCC_ClockConfig+0x1c4>)
 8005518:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800551a:	4b09      	ldr	r3, [pc, #36]	; (8005540 <HAL_RCC_ClockConfig+0x1c8>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4618      	mov	r0, r3
 8005520:	f7fe ffc4 	bl	80044ac <HAL_InitTick>

  return HAL_OK;
 8005524:	2300      	movs	r3, #0
}
 8005526:	4618      	mov	r0, r3
 8005528:	3710      	adds	r7, #16
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}
 800552e:	bf00      	nop
 8005530:	40023c00 	.word	0x40023c00
 8005534:	40023800 	.word	0x40023800
 8005538:	08008a78 	.word	0x08008a78
 800553c:	20000000 	.word	0x20000000
 8005540:	20000004 	.word	0x20000004

08005544 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005544:	b480      	push	{r7}
 8005546:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005548:	4b03      	ldr	r3, [pc, #12]	; (8005558 <HAL_RCC_GetHCLKFreq+0x14>)
 800554a:	681b      	ldr	r3, [r3, #0]
}
 800554c:	4618      	mov	r0, r3
 800554e:	46bd      	mov	sp, r7
 8005550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005554:	4770      	bx	lr
 8005556:	bf00      	nop
 8005558:	20000000 	.word	0x20000000

0800555c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005560:	f7ff fff0 	bl	8005544 <HAL_RCC_GetHCLKFreq>
 8005564:	4602      	mov	r2, r0
 8005566:	4b05      	ldr	r3, [pc, #20]	; (800557c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005568:	689b      	ldr	r3, [r3, #8]
 800556a:	0a9b      	lsrs	r3, r3, #10
 800556c:	f003 0307 	and.w	r3, r3, #7
 8005570:	4903      	ldr	r1, [pc, #12]	; (8005580 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005572:	5ccb      	ldrb	r3, [r1, r3]
 8005574:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005578:	4618      	mov	r0, r3
 800557a:	bd80      	pop	{r7, pc}
 800557c:	40023800 	.word	0x40023800
 8005580:	08008a88 	.word	0x08008a88

08005584 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005588:	f7ff ffdc 	bl	8005544 <HAL_RCC_GetHCLKFreq>
 800558c:	4602      	mov	r2, r0
 800558e:	4b05      	ldr	r3, [pc, #20]	; (80055a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	0b5b      	lsrs	r3, r3, #13
 8005594:	f003 0307 	and.w	r3, r3, #7
 8005598:	4903      	ldr	r1, [pc, #12]	; (80055a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800559a:	5ccb      	ldrb	r3, [r1, r3]
 800559c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	bd80      	pop	{r7, pc}
 80055a4:	40023800 	.word	0x40023800
 80055a8:	08008a88 	.word	0x08008a88

080055ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80055ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80055b0:	b0ae      	sub	sp, #184	; 0xb8
 80055b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80055b4:	2300      	movs	r3, #0
 80055b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80055ba:	2300      	movs	r3, #0
 80055bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80055c0:	2300      	movs	r3, #0
 80055c2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80055c6:	2300      	movs	r3, #0
 80055c8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80055cc:	2300      	movs	r3, #0
 80055ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80055d2:	4bcb      	ldr	r3, [pc, #812]	; (8005900 <HAL_RCC_GetSysClockFreq+0x354>)
 80055d4:	689b      	ldr	r3, [r3, #8]
 80055d6:	f003 030c 	and.w	r3, r3, #12
 80055da:	2b0c      	cmp	r3, #12
 80055dc:	f200 8206 	bhi.w	80059ec <HAL_RCC_GetSysClockFreq+0x440>
 80055e0:	a201      	add	r2, pc, #4	; (adr r2, 80055e8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80055e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055e6:	bf00      	nop
 80055e8:	0800561d 	.word	0x0800561d
 80055ec:	080059ed 	.word	0x080059ed
 80055f0:	080059ed 	.word	0x080059ed
 80055f4:	080059ed 	.word	0x080059ed
 80055f8:	08005625 	.word	0x08005625
 80055fc:	080059ed 	.word	0x080059ed
 8005600:	080059ed 	.word	0x080059ed
 8005604:	080059ed 	.word	0x080059ed
 8005608:	0800562d 	.word	0x0800562d
 800560c:	080059ed 	.word	0x080059ed
 8005610:	080059ed 	.word	0x080059ed
 8005614:	080059ed 	.word	0x080059ed
 8005618:	0800581d 	.word	0x0800581d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800561c:	4bb9      	ldr	r3, [pc, #740]	; (8005904 <HAL_RCC_GetSysClockFreq+0x358>)
 800561e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8005622:	e1e7      	b.n	80059f4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005624:	4bb8      	ldr	r3, [pc, #736]	; (8005908 <HAL_RCC_GetSysClockFreq+0x35c>)
 8005626:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800562a:	e1e3      	b.n	80059f4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800562c:	4bb4      	ldr	r3, [pc, #720]	; (8005900 <HAL_RCC_GetSysClockFreq+0x354>)
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005634:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005638:	4bb1      	ldr	r3, [pc, #708]	; (8005900 <HAL_RCC_GetSysClockFreq+0x354>)
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005640:	2b00      	cmp	r3, #0
 8005642:	d071      	beq.n	8005728 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005644:	4bae      	ldr	r3, [pc, #696]	; (8005900 <HAL_RCC_GetSysClockFreq+0x354>)
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	099b      	lsrs	r3, r3, #6
 800564a:	2200      	movs	r2, #0
 800564c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005650:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8005654:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005658:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800565c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005660:	2300      	movs	r3, #0
 8005662:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005666:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800566a:	4622      	mov	r2, r4
 800566c:	462b      	mov	r3, r5
 800566e:	f04f 0000 	mov.w	r0, #0
 8005672:	f04f 0100 	mov.w	r1, #0
 8005676:	0159      	lsls	r1, r3, #5
 8005678:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800567c:	0150      	lsls	r0, r2, #5
 800567e:	4602      	mov	r2, r0
 8005680:	460b      	mov	r3, r1
 8005682:	4621      	mov	r1, r4
 8005684:	1a51      	subs	r1, r2, r1
 8005686:	6439      	str	r1, [r7, #64]	; 0x40
 8005688:	4629      	mov	r1, r5
 800568a:	eb63 0301 	sbc.w	r3, r3, r1
 800568e:	647b      	str	r3, [r7, #68]	; 0x44
 8005690:	f04f 0200 	mov.w	r2, #0
 8005694:	f04f 0300 	mov.w	r3, #0
 8005698:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 800569c:	4649      	mov	r1, r9
 800569e:	018b      	lsls	r3, r1, #6
 80056a0:	4641      	mov	r1, r8
 80056a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80056a6:	4641      	mov	r1, r8
 80056a8:	018a      	lsls	r2, r1, #6
 80056aa:	4641      	mov	r1, r8
 80056ac:	1a51      	subs	r1, r2, r1
 80056ae:	63b9      	str	r1, [r7, #56]	; 0x38
 80056b0:	4649      	mov	r1, r9
 80056b2:	eb63 0301 	sbc.w	r3, r3, r1
 80056b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056b8:	f04f 0200 	mov.w	r2, #0
 80056bc:	f04f 0300 	mov.w	r3, #0
 80056c0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80056c4:	4649      	mov	r1, r9
 80056c6:	00cb      	lsls	r3, r1, #3
 80056c8:	4641      	mov	r1, r8
 80056ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80056ce:	4641      	mov	r1, r8
 80056d0:	00ca      	lsls	r2, r1, #3
 80056d2:	4610      	mov	r0, r2
 80056d4:	4619      	mov	r1, r3
 80056d6:	4603      	mov	r3, r0
 80056d8:	4622      	mov	r2, r4
 80056da:	189b      	adds	r3, r3, r2
 80056dc:	633b      	str	r3, [r7, #48]	; 0x30
 80056de:	462b      	mov	r3, r5
 80056e0:	460a      	mov	r2, r1
 80056e2:	eb42 0303 	adc.w	r3, r2, r3
 80056e6:	637b      	str	r3, [r7, #52]	; 0x34
 80056e8:	f04f 0200 	mov.w	r2, #0
 80056ec:	f04f 0300 	mov.w	r3, #0
 80056f0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80056f4:	4629      	mov	r1, r5
 80056f6:	024b      	lsls	r3, r1, #9
 80056f8:	4621      	mov	r1, r4
 80056fa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80056fe:	4621      	mov	r1, r4
 8005700:	024a      	lsls	r2, r1, #9
 8005702:	4610      	mov	r0, r2
 8005704:	4619      	mov	r1, r3
 8005706:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800570a:	2200      	movs	r2, #0
 800570c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005710:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005714:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8005718:	f7fb f9c4 	bl	8000aa4 <__aeabi_uldivmod>
 800571c:	4602      	mov	r2, r0
 800571e:	460b      	mov	r3, r1
 8005720:	4613      	mov	r3, r2
 8005722:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005726:	e067      	b.n	80057f8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005728:	4b75      	ldr	r3, [pc, #468]	; (8005900 <HAL_RCC_GetSysClockFreq+0x354>)
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	099b      	lsrs	r3, r3, #6
 800572e:	2200      	movs	r2, #0
 8005730:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005734:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8005738:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800573c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005740:	67bb      	str	r3, [r7, #120]	; 0x78
 8005742:	2300      	movs	r3, #0
 8005744:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005746:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800574a:	4622      	mov	r2, r4
 800574c:	462b      	mov	r3, r5
 800574e:	f04f 0000 	mov.w	r0, #0
 8005752:	f04f 0100 	mov.w	r1, #0
 8005756:	0159      	lsls	r1, r3, #5
 8005758:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800575c:	0150      	lsls	r0, r2, #5
 800575e:	4602      	mov	r2, r0
 8005760:	460b      	mov	r3, r1
 8005762:	4621      	mov	r1, r4
 8005764:	1a51      	subs	r1, r2, r1
 8005766:	62b9      	str	r1, [r7, #40]	; 0x28
 8005768:	4629      	mov	r1, r5
 800576a:	eb63 0301 	sbc.w	r3, r3, r1
 800576e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005770:	f04f 0200 	mov.w	r2, #0
 8005774:	f04f 0300 	mov.w	r3, #0
 8005778:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800577c:	4649      	mov	r1, r9
 800577e:	018b      	lsls	r3, r1, #6
 8005780:	4641      	mov	r1, r8
 8005782:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005786:	4641      	mov	r1, r8
 8005788:	018a      	lsls	r2, r1, #6
 800578a:	4641      	mov	r1, r8
 800578c:	ebb2 0a01 	subs.w	sl, r2, r1
 8005790:	4649      	mov	r1, r9
 8005792:	eb63 0b01 	sbc.w	fp, r3, r1
 8005796:	f04f 0200 	mov.w	r2, #0
 800579a:	f04f 0300 	mov.w	r3, #0
 800579e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80057a2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80057a6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80057aa:	4692      	mov	sl, r2
 80057ac:	469b      	mov	fp, r3
 80057ae:	4623      	mov	r3, r4
 80057b0:	eb1a 0303 	adds.w	r3, sl, r3
 80057b4:	623b      	str	r3, [r7, #32]
 80057b6:	462b      	mov	r3, r5
 80057b8:	eb4b 0303 	adc.w	r3, fp, r3
 80057bc:	627b      	str	r3, [r7, #36]	; 0x24
 80057be:	f04f 0200 	mov.w	r2, #0
 80057c2:	f04f 0300 	mov.w	r3, #0
 80057c6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80057ca:	4629      	mov	r1, r5
 80057cc:	028b      	lsls	r3, r1, #10
 80057ce:	4621      	mov	r1, r4
 80057d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80057d4:	4621      	mov	r1, r4
 80057d6:	028a      	lsls	r2, r1, #10
 80057d8:	4610      	mov	r0, r2
 80057da:	4619      	mov	r1, r3
 80057dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80057e0:	2200      	movs	r2, #0
 80057e2:	673b      	str	r3, [r7, #112]	; 0x70
 80057e4:	677a      	str	r2, [r7, #116]	; 0x74
 80057e6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80057ea:	f7fb f95b 	bl	8000aa4 <__aeabi_uldivmod>
 80057ee:	4602      	mov	r2, r0
 80057f0:	460b      	mov	r3, r1
 80057f2:	4613      	mov	r3, r2
 80057f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80057f8:	4b41      	ldr	r3, [pc, #260]	; (8005900 <HAL_RCC_GetSysClockFreq+0x354>)
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	0c1b      	lsrs	r3, r3, #16
 80057fe:	f003 0303 	and.w	r3, r3, #3
 8005802:	3301      	adds	r3, #1
 8005804:	005b      	lsls	r3, r3, #1
 8005806:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800580a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800580e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005812:	fbb2 f3f3 	udiv	r3, r2, r3
 8005816:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800581a:	e0eb      	b.n	80059f4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800581c:	4b38      	ldr	r3, [pc, #224]	; (8005900 <HAL_RCC_GetSysClockFreq+0x354>)
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005824:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005828:	4b35      	ldr	r3, [pc, #212]	; (8005900 <HAL_RCC_GetSysClockFreq+0x354>)
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005830:	2b00      	cmp	r3, #0
 8005832:	d06b      	beq.n	800590c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005834:	4b32      	ldr	r3, [pc, #200]	; (8005900 <HAL_RCC_GetSysClockFreq+0x354>)
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	099b      	lsrs	r3, r3, #6
 800583a:	2200      	movs	r2, #0
 800583c:	66bb      	str	r3, [r7, #104]	; 0x68
 800583e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005840:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005842:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005846:	663b      	str	r3, [r7, #96]	; 0x60
 8005848:	2300      	movs	r3, #0
 800584a:	667b      	str	r3, [r7, #100]	; 0x64
 800584c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8005850:	4622      	mov	r2, r4
 8005852:	462b      	mov	r3, r5
 8005854:	f04f 0000 	mov.w	r0, #0
 8005858:	f04f 0100 	mov.w	r1, #0
 800585c:	0159      	lsls	r1, r3, #5
 800585e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005862:	0150      	lsls	r0, r2, #5
 8005864:	4602      	mov	r2, r0
 8005866:	460b      	mov	r3, r1
 8005868:	4621      	mov	r1, r4
 800586a:	1a51      	subs	r1, r2, r1
 800586c:	61b9      	str	r1, [r7, #24]
 800586e:	4629      	mov	r1, r5
 8005870:	eb63 0301 	sbc.w	r3, r3, r1
 8005874:	61fb      	str	r3, [r7, #28]
 8005876:	f04f 0200 	mov.w	r2, #0
 800587a:	f04f 0300 	mov.w	r3, #0
 800587e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8005882:	4659      	mov	r1, fp
 8005884:	018b      	lsls	r3, r1, #6
 8005886:	4651      	mov	r1, sl
 8005888:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800588c:	4651      	mov	r1, sl
 800588e:	018a      	lsls	r2, r1, #6
 8005890:	4651      	mov	r1, sl
 8005892:	ebb2 0801 	subs.w	r8, r2, r1
 8005896:	4659      	mov	r1, fp
 8005898:	eb63 0901 	sbc.w	r9, r3, r1
 800589c:	f04f 0200 	mov.w	r2, #0
 80058a0:	f04f 0300 	mov.w	r3, #0
 80058a4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80058a8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80058ac:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80058b0:	4690      	mov	r8, r2
 80058b2:	4699      	mov	r9, r3
 80058b4:	4623      	mov	r3, r4
 80058b6:	eb18 0303 	adds.w	r3, r8, r3
 80058ba:	613b      	str	r3, [r7, #16]
 80058bc:	462b      	mov	r3, r5
 80058be:	eb49 0303 	adc.w	r3, r9, r3
 80058c2:	617b      	str	r3, [r7, #20]
 80058c4:	f04f 0200 	mov.w	r2, #0
 80058c8:	f04f 0300 	mov.w	r3, #0
 80058cc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80058d0:	4629      	mov	r1, r5
 80058d2:	024b      	lsls	r3, r1, #9
 80058d4:	4621      	mov	r1, r4
 80058d6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80058da:	4621      	mov	r1, r4
 80058dc:	024a      	lsls	r2, r1, #9
 80058de:	4610      	mov	r0, r2
 80058e0:	4619      	mov	r1, r3
 80058e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80058e6:	2200      	movs	r2, #0
 80058e8:	65bb      	str	r3, [r7, #88]	; 0x58
 80058ea:	65fa      	str	r2, [r7, #92]	; 0x5c
 80058ec:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80058f0:	f7fb f8d8 	bl	8000aa4 <__aeabi_uldivmod>
 80058f4:	4602      	mov	r2, r0
 80058f6:	460b      	mov	r3, r1
 80058f8:	4613      	mov	r3, r2
 80058fa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80058fe:	e065      	b.n	80059cc <HAL_RCC_GetSysClockFreq+0x420>
 8005900:	40023800 	.word	0x40023800
 8005904:	00f42400 	.word	0x00f42400
 8005908:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800590c:	4b3d      	ldr	r3, [pc, #244]	; (8005a04 <HAL_RCC_GetSysClockFreq+0x458>)
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	099b      	lsrs	r3, r3, #6
 8005912:	2200      	movs	r2, #0
 8005914:	4618      	mov	r0, r3
 8005916:	4611      	mov	r1, r2
 8005918:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800591c:	653b      	str	r3, [r7, #80]	; 0x50
 800591e:	2300      	movs	r3, #0
 8005920:	657b      	str	r3, [r7, #84]	; 0x54
 8005922:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8005926:	4642      	mov	r2, r8
 8005928:	464b      	mov	r3, r9
 800592a:	f04f 0000 	mov.w	r0, #0
 800592e:	f04f 0100 	mov.w	r1, #0
 8005932:	0159      	lsls	r1, r3, #5
 8005934:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005938:	0150      	lsls	r0, r2, #5
 800593a:	4602      	mov	r2, r0
 800593c:	460b      	mov	r3, r1
 800593e:	4641      	mov	r1, r8
 8005940:	1a51      	subs	r1, r2, r1
 8005942:	60b9      	str	r1, [r7, #8]
 8005944:	4649      	mov	r1, r9
 8005946:	eb63 0301 	sbc.w	r3, r3, r1
 800594a:	60fb      	str	r3, [r7, #12]
 800594c:	f04f 0200 	mov.w	r2, #0
 8005950:	f04f 0300 	mov.w	r3, #0
 8005954:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8005958:	4659      	mov	r1, fp
 800595a:	018b      	lsls	r3, r1, #6
 800595c:	4651      	mov	r1, sl
 800595e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005962:	4651      	mov	r1, sl
 8005964:	018a      	lsls	r2, r1, #6
 8005966:	4651      	mov	r1, sl
 8005968:	1a54      	subs	r4, r2, r1
 800596a:	4659      	mov	r1, fp
 800596c:	eb63 0501 	sbc.w	r5, r3, r1
 8005970:	f04f 0200 	mov.w	r2, #0
 8005974:	f04f 0300 	mov.w	r3, #0
 8005978:	00eb      	lsls	r3, r5, #3
 800597a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800597e:	00e2      	lsls	r2, r4, #3
 8005980:	4614      	mov	r4, r2
 8005982:	461d      	mov	r5, r3
 8005984:	4643      	mov	r3, r8
 8005986:	18e3      	adds	r3, r4, r3
 8005988:	603b      	str	r3, [r7, #0]
 800598a:	464b      	mov	r3, r9
 800598c:	eb45 0303 	adc.w	r3, r5, r3
 8005990:	607b      	str	r3, [r7, #4]
 8005992:	f04f 0200 	mov.w	r2, #0
 8005996:	f04f 0300 	mov.w	r3, #0
 800599a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800599e:	4629      	mov	r1, r5
 80059a0:	028b      	lsls	r3, r1, #10
 80059a2:	4621      	mov	r1, r4
 80059a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80059a8:	4621      	mov	r1, r4
 80059aa:	028a      	lsls	r2, r1, #10
 80059ac:	4610      	mov	r0, r2
 80059ae:	4619      	mov	r1, r3
 80059b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80059b4:	2200      	movs	r2, #0
 80059b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80059b8:	64fa      	str	r2, [r7, #76]	; 0x4c
 80059ba:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80059be:	f7fb f871 	bl	8000aa4 <__aeabi_uldivmod>
 80059c2:	4602      	mov	r2, r0
 80059c4:	460b      	mov	r3, r1
 80059c6:	4613      	mov	r3, r2
 80059c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80059cc:	4b0d      	ldr	r3, [pc, #52]	; (8005a04 <HAL_RCC_GetSysClockFreq+0x458>)
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	0f1b      	lsrs	r3, r3, #28
 80059d2:	f003 0307 	and.w	r3, r3, #7
 80059d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80059da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80059de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80059e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80059e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80059ea:	e003      	b.n	80059f4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80059ec:	4b06      	ldr	r3, [pc, #24]	; (8005a08 <HAL_RCC_GetSysClockFreq+0x45c>)
 80059ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80059f2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80059f4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	37b8      	adds	r7, #184	; 0xb8
 80059fc:	46bd      	mov	sp, r7
 80059fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a02:	bf00      	nop
 8005a04:	40023800 	.word	0x40023800
 8005a08:	00f42400 	.word	0x00f42400

08005a0c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b086      	sub	sp, #24
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d101      	bne.n	8005a1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	e28d      	b.n	8005f3a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f003 0301 	and.w	r3, r3, #1
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	f000 8083 	beq.w	8005b32 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005a2c:	4b94      	ldr	r3, [pc, #592]	; (8005c80 <HAL_RCC_OscConfig+0x274>)
 8005a2e:	689b      	ldr	r3, [r3, #8]
 8005a30:	f003 030c 	and.w	r3, r3, #12
 8005a34:	2b04      	cmp	r3, #4
 8005a36:	d019      	beq.n	8005a6c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005a38:	4b91      	ldr	r3, [pc, #580]	; (8005c80 <HAL_RCC_OscConfig+0x274>)
 8005a3a:	689b      	ldr	r3, [r3, #8]
 8005a3c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005a40:	2b08      	cmp	r3, #8
 8005a42:	d106      	bne.n	8005a52 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005a44:	4b8e      	ldr	r3, [pc, #568]	; (8005c80 <HAL_RCC_OscConfig+0x274>)
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a4c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a50:	d00c      	beq.n	8005a6c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a52:	4b8b      	ldr	r3, [pc, #556]	; (8005c80 <HAL_RCC_OscConfig+0x274>)
 8005a54:	689b      	ldr	r3, [r3, #8]
 8005a56:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005a5a:	2b0c      	cmp	r3, #12
 8005a5c:	d112      	bne.n	8005a84 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a5e:	4b88      	ldr	r3, [pc, #544]	; (8005c80 <HAL_RCC_OscConfig+0x274>)
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a6a:	d10b      	bne.n	8005a84 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a6c:	4b84      	ldr	r3, [pc, #528]	; (8005c80 <HAL_RCC_OscConfig+0x274>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d05b      	beq.n	8005b30 <HAL_RCC_OscConfig+0x124>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d157      	bne.n	8005b30 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005a80:	2301      	movs	r3, #1
 8005a82:	e25a      	b.n	8005f3a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a8c:	d106      	bne.n	8005a9c <HAL_RCC_OscConfig+0x90>
 8005a8e:	4b7c      	ldr	r3, [pc, #496]	; (8005c80 <HAL_RCC_OscConfig+0x274>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a7b      	ldr	r2, [pc, #492]	; (8005c80 <HAL_RCC_OscConfig+0x274>)
 8005a94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a98:	6013      	str	r3, [r2, #0]
 8005a9a:	e01d      	b.n	8005ad8 <HAL_RCC_OscConfig+0xcc>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005aa4:	d10c      	bne.n	8005ac0 <HAL_RCC_OscConfig+0xb4>
 8005aa6:	4b76      	ldr	r3, [pc, #472]	; (8005c80 <HAL_RCC_OscConfig+0x274>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a75      	ldr	r2, [pc, #468]	; (8005c80 <HAL_RCC_OscConfig+0x274>)
 8005aac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005ab0:	6013      	str	r3, [r2, #0]
 8005ab2:	4b73      	ldr	r3, [pc, #460]	; (8005c80 <HAL_RCC_OscConfig+0x274>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a72      	ldr	r2, [pc, #456]	; (8005c80 <HAL_RCC_OscConfig+0x274>)
 8005ab8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005abc:	6013      	str	r3, [r2, #0]
 8005abe:	e00b      	b.n	8005ad8 <HAL_RCC_OscConfig+0xcc>
 8005ac0:	4b6f      	ldr	r3, [pc, #444]	; (8005c80 <HAL_RCC_OscConfig+0x274>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a6e      	ldr	r2, [pc, #440]	; (8005c80 <HAL_RCC_OscConfig+0x274>)
 8005ac6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005aca:	6013      	str	r3, [r2, #0]
 8005acc:	4b6c      	ldr	r3, [pc, #432]	; (8005c80 <HAL_RCC_OscConfig+0x274>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a6b      	ldr	r2, [pc, #428]	; (8005c80 <HAL_RCC_OscConfig+0x274>)
 8005ad2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ad6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d013      	beq.n	8005b08 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ae0:	f7fe fd28 	bl	8004534 <HAL_GetTick>
 8005ae4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ae6:	e008      	b.n	8005afa <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ae8:	f7fe fd24 	bl	8004534 <HAL_GetTick>
 8005aec:	4602      	mov	r2, r0
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	1ad3      	subs	r3, r2, r3
 8005af2:	2b64      	cmp	r3, #100	; 0x64
 8005af4:	d901      	bls.n	8005afa <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8005af6:	2303      	movs	r3, #3
 8005af8:	e21f      	b.n	8005f3a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005afa:	4b61      	ldr	r3, [pc, #388]	; (8005c80 <HAL_RCC_OscConfig+0x274>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d0f0      	beq.n	8005ae8 <HAL_RCC_OscConfig+0xdc>
 8005b06:	e014      	b.n	8005b32 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b08:	f7fe fd14 	bl	8004534 <HAL_GetTick>
 8005b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b0e:	e008      	b.n	8005b22 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b10:	f7fe fd10 	bl	8004534 <HAL_GetTick>
 8005b14:	4602      	mov	r2, r0
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	1ad3      	subs	r3, r2, r3
 8005b1a:	2b64      	cmp	r3, #100	; 0x64
 8005b1c:	d901      	bls.n	8005b22 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8005b1e:	2303      	movs	r3, #3
 8005b20:	e20b      	b.n	8005f3a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b22:	4b57      	ldr	r3, [pc, #348]	; (8005c80 <HAL_RCC_OscConfig+0x274>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d1f0      	bne.n	8005b10 <HAL_RCC_OscConfig+0x104>
 8005b2e:	e000      	b.n	8005b32 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f003 0302 	and.w	r3, r3, #2
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d06f      	beq.n	8005c1e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005b3e:	4b50      	ldr	r3, [pc, #320]	; (8005c80 <HAL_RCC_OscConfig+0x274>)
 8005b40:	689b      	ldr	r3, [r3, #8]
 8005b42:	f003 030c 	and.w	r3, r3, #12
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d017      	beq.n	8005b7a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005b4a:	4b4d      	ldr	r3, [pc, #308]	; (8005c80 <HAL_RCC_OscConfig+0x274>)
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005b52:	2b08      	cmp	r3, #8
 8005b54:	d105      	bne.n	8005b62 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005b56:	4b4a      	ldr	r3, [pc, #296]	; (8005c80 <HAL_RCC_OscConfig+0x274>)
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d00b      	beq.n	8005b7a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b62:	4b47      	ldr	r3, [pc, #284]	; (8005c80 <HAL_RCC_OscConfig+0x274>)
 8005b64:	689b      	ldr	r3, [r3, #8]
 8005b66:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005b6a:	2b0c      	cmp	r3, #12
 8005b6c:	d11c      	bne.n	8005ba8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b6e:	4b44      	ldr	r3, [pc, #272]	; (8005c80 <HAL_RCC_OscConfig+0x274>)
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d116      	bne.n	8005ba8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b7a:	4b41      	ldr	r3, [pc, #260]	; (8005c80 <HAL_RCC_OscConfig+0x274>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f003 0302 	and.w	r3, r3, #2
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d005      	beq.n	8005b92 <HAL_RCC_OscConfig+0x186>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	68db      	ldr	r3, [r3, #12]
 8005b8a:	2b01      	cmp	r3, #1
 8005b8c:	d001      	beq.n	8005b92 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	e1d3      	b.n	8005f3a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b92:	4b3b      	ldr	r3, [pc, #236]	; (8005c80 <HAL_RCC_OscConfig+0x274>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	691b      	ldr	r3, [r3, #16]
 8005b9e:	00db      	lsls	r3, r3, #3
 8005ba0:	4937      	ldr	r1, [pc, #220]	; (8005c80 <HAL_RCC_OscConfig+0x274>)
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ba6:	e03a      	b.n	8005c1e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	68db      	ldr	r3, [r3, #12]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d020      	beq.n	8005bf2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005bb0:	4b34      	ldr	r3, [pc, #208]	; (8005c84 <HAL_RCC_OscConfig+0x278>)
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bb6:	f7fe fcbd 	bl	8004534 <HAL_GetTick>
 8005bba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bbc:	e008      	b.n	8005bd0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005bbe:	f7fe fcb9 	bl	8004534 <HAL_GetTick>
 8005bc2:	4602      	mov	r2, r0
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	1ad3      	subs	r3, r2, r3
 8005bc8:	2b02      	cmp	r3, #2
 8005bca:	d901      	bls.n	8005bd0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005bcc:	2303      	movs	r3, #3
 8005bce:	e1b4      	b.n	8005f3a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bd0:	4b2b      	ldr	r3, [pc, #172]	; (8005c80 <HAL_RCC_OscConfig+0x274>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f003 0302 	and.w	r3, r3, #2
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d0f0      	beq.n	8005bbe <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bdc:	4b28      	ldr	r3, [pc, #160]	; (8005c80 <HAL_RCC_OscConfig+0x274>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	691b      	ldr	r3, [r3, #16]
 8005be8:	00db      	lsls	r3, r3, #3
 8005bea:	4925      	ldr	r1, [pc, #148]	; (8005c80 <HAL_RCC_OscConfig+0x274>)
 8005bec:	4313      	orrs	r3, r2
 8005bee:	600b      	str	r3, [r1, #0]
 8005bf0:	e015      	b.n	8005c1e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005bf2:	4b24      	ldr	r3, [pc, #144]	; (8005c84 <HAL_RCC_OscConfig+0x278>)
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bf8:	f7fe fc9c 	bl	8004534 <HAL_GetTick>
 8005bfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005bfe:	e008      	b.n	8005c12 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c00:	f7fe fc98 	bl	8004534 <HAL_GetTick>
 8005c04:	4602      	mov	r2, r0
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	1ad3      	subs	r3, r2, r3
 8005c0a:	2b02      	cmp	r3, #2
 8005c0c:	d901      	bls.n	8005c12 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005c0e:	2303      	movs	r3, #3
 8005c10:	e193      	b.n	8005f3a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c12:	4b1b      	ldr	r3, [pc, #108]	; (8005c80 <HAL_RCC_OscConfig+0x274>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f003 0302 	and.w	r3, r3, #2
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d1f0      	bne.n	8005c00 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f003 0308 	and.w	r3, r3, #8
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d036      	beq.n	8005c98 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	695b      	ldr	r3, [r3, #20]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d016      	beq.n	8005c60 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c32:	4b15      	ldr	r3, [pc, #84]	; (8005c88 <HAL_RCC_OscConfig+0x27c>)
 8005c34:	2201      	movs	r2, #1
 8005c36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c38:	f7fe fc7c 	bl	8004534 <HAL_GetTick>
 8005c3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c3e:	e008      	b.n	8005c52 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c40:	f7fe fc78 	bl	8004534 <HAL_GetTick>
 8005c44:	4602      	mov	r2, r0
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	1ad3      	subs	r3, r2, r3
 8005c4a:	2b02      	cmp	r3, #2
 8005c4c:	d901      	bls.n	8005c52 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8005c4e:	2303      	movs	r3, #3
 8005c50:	e173      	b.n	8005f3a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c52:	4b0b      	ldr	r3, [pc, #44]	; (8005c80 <HAL_RCC_OscConfig+0x274>)
 8005c54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c56:	f003 0302 	and.w	r3, r3, #2
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d0f0      	beq.n	8005c40 <HAL_RCC_OscConfig+0x234>
 8005c5e:	e01b      	b.n	8005c98 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c60:	4b09      	ldr	r3, [pc, #36]	; (8005c88 <HAL_RCC_OscConfig+0x27c>)
 8005c62:	2200      	movs	r2, #0
 8005c64:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c66:	f7fe fc65 	bl	8004534 <HAL_GetTick>
 8005c6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c6c:	e00e      	b.n	8005c8c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c6e:	f7fe fc61 	bl	8004534 <HAL_GetTick>
 8005c72:	4602      	mov	r2, r0
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	1ad3      	subs	r3, r2, r3
 8005c78:	2b02      	cmp	r3, #2
 8005c7a:	d907      	bls.n	8005c8c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005c7c:	2303      	movs	r3, #3
 8005c7e:	e15c      	b.n	8005f3a <HAL_RCC_OscConfig+0x52e>
 8005c80:	40023800 	.word	0x40023800
 8005c84:	42470000 	.word	0x42470000
 8005c88:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c8c:	4b8a      	ldr	r3, [pc, #552]	; (8005eb8 <HAL_RCC_OscConfig+0x4ac>)
 8005c8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c90:	f003 0302 	and.w	r3, r3, #2
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d1ea      	bne.n	8005c6e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f003 0304 	and.w	r3, r3, #4
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	f000 8097 	beq.w	8005dd4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005caa:	4b83      	ldr	r3, [pc, #524]	; (8005eb8 <HAL_RCC_OscConfig+0x4ac>)
 8005cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d10f      	bne.n	8005cd6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	60bb      	str	r3, [r7, #8]
 8005cba:	4b7f      	ldr	r3, [pc, #508]	; (8005eb8 <HAL_RCC_OscConfig+0x4ac>)
 8005cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cbe:	4a7e      	ldr	r2, [pc, #504]	; (8005eb8 <HAL_RCC_OscConfig+0x4ac>)
 8005cc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cc4:	6413      	str	r3, [r2, #64]	; 0x40
 8005cc6:	4b7c      	ldr	r3, [pc, #496]	; (8005eb8 <HAL_RCC_OscConfig+0x4ac>)
 8005cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cce:	60bb      	str	r3, [r7, #8]
 8005cd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cd6:	4b79      	ldr	r3, [pc, #484]	; (8005ebc <HAL_RCC_OscConfig+0x4b0>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d118      	bne.n	8005d14 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005ce2:	4b76      	ldr	r3, [pc, #472]	; (8005ebc <HAL_RCC_OscConfig+0x4b0>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a75      	ldr	r2, [pc, #468]	; (8005ebc <HAL_RCC_OscConfig+0x4b0>)
 8005ce8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005cee:	f7fe fc21 	bl	8004534 <HAL_GetTick>
 8005cf2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cf4:	e008      	b.n	8005d08 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005cf6:	f7fe fc1d 	bl	8004534 <HAL_GetTick>
 8005cfa:	4602      	mov	r2, r0
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	1ad3      	subs	r3, r2, r3
 8005d00:	2b02      	cmp	r3, #2
 8005d02:	d901      	bls.n	8005d08 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005d04:	2303      	movs	r3, #3
 8005d06:	e118      	b.n	8005f3a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d08:	4b6c      	ldr	r3, [pc, #432]	; (8005ebc <HAL_RCC_OscConfig+0x4b0>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d0f0      	beq.n	8005cf6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	689b      	ldr	r3, [r3, #8]
 8005d18:	2b01      	cmp	r3, #1
 8005d1a:	d106      	bne.n	8005d2a <HAL_RCC_OscConfig+0x31e>
 8005d1c:	4b66      	ldr	r3, [pc, #408]	; (8005eb8 <HAL_RCC_OscConfig+0x4ac>)
 8005d1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d20:	4a65      	ldr	r2, [pc, #404]	; (8005eb8 <HAL_RCC_OscConfig+0x4ac>)
 8005d22:	f043 0301 	orr.w	r3, r3, #1
 8005d26:	6713      	str	r3, [r2, #112]	; 0x70
 8005d28:	e01c      	b.n	8005d64 <HAL_RCC_OscConfig+0x358>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	689b      	ldr	r3, [r3, #8]
 8005d2e:	2b05      	cmp	r3, #5
 8005d30:	d10c      	bne.n	8005d4c <HAL_RCC_OscConfig+0x340>
 8005d32:	4b61      	ldr	r3, [pc, #388]	; (8005eb8 <HAL_RCC_OscConfig+0x4ac>)
 8005d34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d36:	4a60      	ldr	r2, [pc, #384]	; (8005eb8 <HAL_RCC_OscConfig+0x4ac>)
 8005d38:	f043 0304 	orr.w	r3, r3, #4
 8005d3c:	6713      	str	r3, [r2, #112]	; 0x70
 8005d3e:	4b5e      	ldr	r3, [pc, #376]	; (8005eb8 <HAL_RCC_OscConfig+0x4ac>)
 8005d40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d42:	4a5d      	ldr	r2, [pc, #372]	; (8005eb8 <HAL_RCC_OscConfig+0x4ac>)
 8005d44:	f043 0301 	orr.w	r3, r3, #1
 8005d48:	6713      	str	r3, [r2, #112]	; 0x70
 8005d4a:	e00b      	b.n	8005d64 <HAL_RCC_OscConfig+0x358>
 8005d4c:	4b5a      	ldr	r3, [pc, #360]	; (8005eb8 <HAL_RCC_OscConfig+0x4ac>)
 8005d4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d50:	4a59      	ldr	r2, [pc, #356]	; (8005eb8 <HAL_RCC_OscConfig+0x4ac>)
 8005d52:	f023 0301 	bic.w	r3, r3, #1
 8005d56:	6713      	str	r3, [r2, #112]	; 0x70
 8005d58:	4b57      	ldr	r3, [pc, #348]	; (8005eb8 <HAL_RCC_OscConfig+0x4ac>)
 8005d5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d5c:	4a56      	ldr	r2, [pc, #344]	; (8005eb8 <HAL_RCC_OscConfig+0x4ac>)
 8005d5e:	f023 0304 	bic.w	r3, r3, #4
 8005d62:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	689b      	ldr	r3, [r3, #8]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d015      	beq.n	8005d98 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d6c:	f7fe fbe2 	bl	8004534 <HAL_GetTick>
 8005d70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d72:	e00a      	b.n	8005d8a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d74:	f7fe fbde 	bl	8004534 <HAL_GetTick>
 8005d78:	4602      	mov	r2, r0
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	1ad3      	subs	r3, r2, r3
 8005d7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d901      	bls.n	8005d8a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005d86:	2303      	movs	r3, #3
 8005d88:	e0d7      	b.n	8005f3a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d8a:	4b4b      	ldr	r3, [pc, #300]	; (8005eb8 <HAL_RCC_OscConfig+0x4ac>)
 8005d8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d8e:	f003 0302 	and.w	r3, r3, #2
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d0ee      	beq.n	8005d74 <HAL_RCC_OscConfig+0x368>
 8005d96:	e014      	b.n	8005dc2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d98:	f7fe fbcc 	bl	8004534 <HAL_GetTick>
 8005d9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d9e:	e00a      	b.n	8005db6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005da0:	f7fe fbc8 	bl	8004534 <HAL_GetTick>
 8005da4:	4602      	mov	r2, r0
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	1ad3      	subs	r3, r2, r3
 8005daa:	f241 3288 	movw	r2, #5000	; 0x1388
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d901      	bls.n	8005db6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005db2:	2303      	movs	r3, #3
 8005db4:	e0c1      	b.n	8005f3a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005db6:	4b40      	ldr	r3, [pc, #256]	; (8005eb8 <HAL_RCC_OscConfig+0x4ac>)
 8005db8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dba:	f003 0302 	and.w	r3, r3, #2
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d1ee      	bne.n	8005da0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005dc2:	7dfb      	ldrb	r3, [r7, #23]
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	d105      	bne.n	8005dd4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005dc8:	4b3b      	ldr	r3, [pc, #236]	; (8005eb8 <HAL_RCC_OscConfig+0x4ac>)
 8005dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dcc:	4a3a      	ldr	r2, [pc, #232]	; (8005eb8 <HAL_RCC_OscConfig+0x4ac>)
 8005dce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005dd2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	699b      	ldr	r3, [r3, #24]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	f000 80ad 	beq.w	8005f38 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005dde:	4b36      	ldr	r3, [pc, #216]	; (8005eb8 <HAL_RCC_OscConfig+0x4ac>)
 8005de0:	689b      	ldr	r3, [r3, #8]
 8005de2:	f003 030c 	and.w	r3, r3, #12
 8005de6:	2b08      	cmp	r3, #8
 8005de8:	d060      	beq.n	8005eac <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	699b      	ldr	r3, [r3, #24]
 8005dee:	2b02      	cmp	r3, #2
 8005df0:	d145      	bne.n	8005e7e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005df2:	4b33      	ldr	r3, [pc, #204]	; (8005ec0 <HAL_RCC_OscConfig+0x4b4>)
 8005df4:	2200      	movs	r2, #0
 8005df6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005df8:	f7fe fb9c 	bl	8004534 <HAL_GetTick>
 8005dfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005dfe:	e008      	b.n	8005e12 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e00:	f7fe fb98 	bl	8004534 <HAL_GetTick>
 8005e04:	4602      	mov	r2, r0
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	1ad3      	subs	r3, r2, r3
 8005e0a:	2b02      	cmp	r3, #2
 8005e0c:	d901      	bls.n	8005e12 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005e0e:	2303      	movs	r3, #3
 8005e10:	e093      	b.n	8005f3a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e12:	4b29      	ldr	r3, [pc, #164]	; (8005eb8 <HAL_RCC_OscConfig+0x4ac>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d1f0      	bne.n	8005e00 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	69da      	ldr	r2, [r3, #28]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6a1b      	ldr	r3, [r3, #32]
 8005e26:	431a      	orrs	r2, r3
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e2c:	019b      	lsls	r3, r3, #6
 8005e2e:	431a      	orrs	r2, r3
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e34:	085b      	lsrs	r3, r3, #1
 8005e36:	3b01      	subs	r3, #1
 8005e38:	041b      	lsls	r3, r3, #16
 8005e3a:	431a      	orrs	r2, r3
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e40:	061b      	lsls	r3, r3, #24
 8005e42:	431a      	orrs	r2, r3
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e48:	071b      	lsls	r3, r3, #28
 8005e4a:	491b      	ldr	r1, [pc, #108]	; (8005eb8 <HAL_RCC_OscConfig+0x4ac>)
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e50:	4b1b      	ldr	r3, [pc, #108]	; (8005ec0 <HAL_RCC_OscConfig+0x4b4>)
 8005e52:	2201      	movs	r2, #1
 8005e54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e56:	f7fe fb6d 	bl	8004534 <HAL_GetTick>
 8005e5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e5c:	e008      	b.n	8005e70 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e5e:	f7fe fb69 	bl	8004534 <HAL_GetTick>
 8005e62:	4602      	mov	r2, r0
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	1ad3      	subs	r3, r2, r3
 8005e68:	2b02      	cmp	r3, #2
 8005e6a:	d901      	bls.n	8005e70 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005e6c:	2303      	movs	r3, #3
 8005e6e:	e064      	b.n	8005f3a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e70:	4b11      	ldr	r3, [pc, #68]	; (8005eb8 <HAL_RCC_OscConfig+0x4ac>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d0f0      	beq.n	8005e5e <HAL_RCC_OscConfig+0x452>
 8005e7c:	e05c      	b.n	8005f38 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e7e:	4b10      	ldr	r3, [pc, #64]	; (8005ec0 <HAL_RCC_OscConfig+0x4b4>)
 8005e80:	2200      	movs	r2, #0
 8005e82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e84:	f7fe fb56 	bl	8004534 <HAL_GetTick>
 8005e88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e8a:	e008      	b.n	8005e9e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e8c:	f7fe fb52 	bl	8004534 <HAL_GetTick>
 8005e90:	4602      	mov	r2, r0
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	1ad3      	subs	r3, r2, r3
 8005e96:	2b02      	cmp	r3, #2
 8005e98:	d901      	bls.n	8005e9e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005e9a:	2303      	movs	r3, #3
 8005e9c:	e04d      	b.n	8005f3a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e9e:	4b06      	ldr	r3, [pc, #24]	; (8005eb8 <HAL_RCC_OscConfig+0x4ac>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d1f0      	bne.n	8005e8c <HAL_RCC_OscConfig+0x480>
 8005eaa:	e045      	b.n	8005f38 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	699b      	ldr	r3, [r3, #24]
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	d107      	bne.n	8005ec4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	e040      	b.n	8005f3a <HAL_RCC_OscConfig+0x52e>
 8005eb8:	40023800 	.word	0x40023800
 8005ebc:	40007000 	.word	0x40007000
 8005ec0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005ec4:	4b1f      	ldr	r3, [pc, #124]	; (8005f44 <HAL_RCC_OscConfig+0x538>)
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	699b      	ldr	r3, [r3, #24]
 8005ece:	2b01      	cmp	r3, #1
 8005ed0:	d030      	beq.n	8005f34 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005edc:	429a      	cmp	r2, r3
 8005ede:	d129      	bne.n	8005f34 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005eea:	429a      	cmp	r2, r3
 8005eec:	d122      	bne.n	8005f34 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005eee:	68fa      	ldr	r2, [r7, #12]
 8005ef0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005ef4:	4013      	ands	r3, r2
 8005ef6:	687a      	ldr	r2, [r7, #4]
 8005ef8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005efa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d119      	bne.n	8005f34 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f0a:	085b      	lsrs	r3, r3, #1
 8005f0c:	3b01      	subs	r3, #1
 8005f0e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005f10:	429a      	cmp	r2, r3
 8005f12:	d10f      	bne.n	8005f34 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f1e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005f20:	429a      	cmp	r2, r3
 8005f22:	d107      	bne.n	8005f34 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f2e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005f30:	429a      	cmp	r2, r3
 8005f32:	d001      	beq.n	8005f38 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005f34:	2301      	movs	r3, #1
 8005f36:	e000      	b.n	8005f3a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005f38:	2300      	movs	r3, #0
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3718      	adds	r7, #24
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}
 8005f42:	bf00      	nop
 8005f44:	40023800 	.word	0x40023800

08005f48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b082      	sub	sp, #8
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d101      	bne.n	8005f5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f56:	2301      	movs	r3, #1
 8005f58:	e041      	b.n	8005fde <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f60:	b2db      	uxtb	r3, r3
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d106      	bne.n	8005f74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f7fe f82c 	bl	8003fcc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2202      	movs	r2, #2
 8005f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681a      	ldr	r2, [r3, #0]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	3304      	adds	r3, #4
 8005f84:	4619      	mov	r1, r3
 8005f86:	4610      	mov	r0, r2
 8005f88:	f000 fce2 	bl	8006950 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2201      	movs	r2, #1
 8005f90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2201      	movs	r2, #1
 8005f98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2201      	movs	r2, #1
 8005fb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2201      	movs	r2, #1
 8005fd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005fdc:	2300      	movs	r3, #0
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	3708      	adds	r7, #8
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}
	...

08005fe8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b085      	sub	sp, #20
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ff6:	b2db      	uxtb	r3, r3
 8005ff8:	2b01      	cmp	r3, #1
 8005ffa:	d001      	beq.n	8006000 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	e046      	b.n	800608e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2202      	movs	r2, #2
 8006004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a23      	ldr	r2, [pc, #140]	; (800609c <HAL_TIM_Base_Start+0xb4>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d022      	beq.n	8006058 <HAL_TIM_Base_Start+0x70>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800601a:	d01d      	beq.n	8006058 <HAL_TIM_Base_Start+0x70>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a1f      	ldr	r2, [pc, #124]	; (80060a0 <HAL_TIM_Base_Start+0xb8>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d018      	beq.n	8006058 <HAL_TIM_Base_Start+0x70>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a1e      	ldr	r2, [pc, #120]	; (80060a4 <HAL_TIM_Base_Start+0xbc>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d013      	beq.n	8006058 <HAL_TIM_Base_Start+0x70>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a1c      	ldr	r2, [pc, #112]	; (80060a8 <HAL_TIM_Base_Start+0xc0>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d00e      	beq.n	8006058 <HAL_TIM_Base_Start+0x70>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a1b      	ldr	r2, [pc, #108]	; (80060ac <HAL_TIM_Base_Start+0xc4>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d009      	beq.n	8006058 <HAL_TIM_Base_Start+0x70>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a19      	ldr	r2, [pc, #100]	; (80060b0 <HAL_TIM_Base_Start+0xc8>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d004      	beq.n	8006058 <HAL_TIM_Base_Start+0x70>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a18      	ldr	r2, [pc, #96]	; (80060b4 <HAL_TIM_Base_Start+0xcc>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d111      	bne.n	800607c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	689b      	ldr	r3, [r3, #8]
 800605e:	f003 0307 	and.w	r3, r3, #7
 8006062:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2b06      	cmp	r3, #6
 8006068:	d010      	beq.n	800608c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	681a      	ldr	r2, [r3, #0]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f042 0201 	orr.w	r2, r2, #1
 8006078:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800607a:	e007      	b.n	800608c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	681a      	ldr	r2, [r3, #0]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f042 0201 	orr.w	r2, r2, #1
 800608a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800608c:	2300      	movs	r3, #0
}
 800608e:	4618      	mov	r0, r3
 8006090:	3714      	adds	r7, #20
 8006092:	46bd      	mov	sp, r7
 8006094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006098:	4770      	bx	lr
 800609a:	bf00      	nop
 800609c:	40010000 	.word	0x40010000
 80060a0:	40000400 	.word	0x40000400
 80060a4:	40000800 	.word	0x40000800
 80060a8:	40000c00 	.word	0x40000c00
 80060ac:	40010400 	.word	0x40010400
 80060b0:	40014000 	.word	0x40014000
 80060b4:	40001800 	.word	0x40001800

080060b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b085      	sub	sp, #20
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060c6:	b2db      	uxtb	r3, r3
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d001      	beq.n	80060d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80060cc:	2301      	movs	r3, #1
 80060ce:	e04e      	b.n	800616e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2202      	movs	r2, #2
 80060d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	68da      	ldr	r2, [r3, #12]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f042 0201 	orr.w	r2, r2, #1
 80060e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a23      	ldr	r2, [pc, #140]	; (800617c <HAL_TIM_Base_Start_IT+0xc4>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d022      	beq.n	8006138 <HAL_TIM_Base_Start_IT+0x80>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060fa:	d01d      	beq.n	8006138 <HAL_TIM_Base_Start_IT+0x80>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a1f      	ldr	r2, [pc, #124]	; (8006180 <HAL_TIM_Base_Start_IT+0xc8>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d018      	beq.n	8006138 <HAL_TIM_Base_Start_IT+0x80>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a1e      	ldr	r2, [pc, #120]	; (8006184 <HAL_TIM_Base_Start_IT+0xcc>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d013      	beq.n	8006138 <HAL_TIM_Base_Start_IT+0x80>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a1c      	ldr	r2, [pc, #112]	; (8006188 <HAL_TIM_Base_Start_IT+0xd0>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d00e      	beq.n	8006138 <HAL_TIM_Base_Start_IT+0x80>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a1b      	ldr	r2, [pc, #108]	; (800618c <HAL_TIM_Base_Start_IT+0xd4>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d009      	beq.n	8006138 <HAL_TIM_Base_Start_IT+0x80>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a19      	ldr	r2, [pc, #100]	; (8006190 <HAL_TIM_Base_Start_IT+0xd8>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d004      	beq.n	8006138 <HAL_TIM_Base_Start_IT+0x80>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a18      	ldr	r2, [pc, #96]	; (8006194 <HAL_TIM_Base_Start_IT+0xdc>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d111      	bne.n	800615c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	689b      	ldr	r3, [r3, #8]
 800613e:	f003 0307 	and.w	r3, r3, #7
 8006142:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	2b06      	cmp	r3, #6
 8006148:	d010      	beq.n	800616c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	681a      	ldr	r2, [r3, #0]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f042 0201 	orr.w	r2, r2, #1
 8006158:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800615a:	e007      	b.n	800616c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	681a      	ldr	r2, [r3, #0]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f042 0201 	orr.w	r2, r2, #1
 800616a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800616c:	2300      	movs	r3, #0
}
 800616e:	4618      	mov	r0, r3
 8006170:	3714      	adds	r7, #20
 8006172:	46bd      	mov	sp, r7
 8006174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006178:	4770      	bx	lr
 800617a:	bf00      	nop
 800617c:	40010000 	.word	0x40010000
 8006180:	40000400 	.word	0x40000400
 8006184:	40000800 	.word	0x40000800
 8006188:	40000c00 	.word	0x40000c00
 800618c:	40010400 	.word	0x40010400
 8006190:	40014000 	.word	0x40014000
 8006194:	40001800 	.word	0x40001800

08006198 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b082      	sub	sp, #8
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d101      	bne.n	80061aa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80061a6:	2301      	movs	r3, #1
 80061a8:	e041      	b.n	800622e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061b0:	b2db      	uxtb	r3, r3
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d106      	bne.n	80061c4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2200      	movs	r2, #0
 80061ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f000 f839 	bl	8006236 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2202      	movs	r2, #2
 80061c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681a      	ldr	r2, [r3, #0]
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	3304      	adds	r3, #4
 80061d4:	4619      	mov	r1, r3
 80061d6:	4610      	mov	r0, r2
 80061d8:	f000 fbba 	bl	8006950 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2201      	movs	r2, #1
 80061e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2201      	movs	r2, #1
 80061e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2201      	movs	r2, #1
 80061f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2201      	movs	r2, #1
 80061f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2201      	movs	r2, #1
 8006200:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2201      	movs	r2, #1
 8006208:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2201      	movs	r2, #1
 8006210:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2201      	movs	r2, #1
 8006218:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2201      	movs	r2, #1
 8006220:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2201      	movs	r2, #1
 8006228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800622c:	2300      	movs	r3, #0
}
 800622e:	4618      	mov	r0, r3
 8006230:	3708      	adds	r7, #8
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}

08006236 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006236:	b480      	push	{r7}
 8006238:	b083      	sub	sp, #12
 800623a:	af00      	add	r7, sp, #0
 800623c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800623e:	bf00      	nop
 8006240:	370c      	adds	r7, #12
 8006242:	46bd      	mov	sp, r7
 8006244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006248:	4770      	bx	lr
	...

0800624c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b084      	sub	sp, #16
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
 8006254:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d109      	bne.n	8006270 <HAL_TIM_PWM_Start+0x24>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006262:	b2db      	uxtb	r3, r3
 8006264:	2b01      	cmp	r3, #1
 8006266:	bf14      	ite	ne
 8006268:	2301      	movne	r3, #1
 800626a:	2300      	moveq	r3, #0
 800626c:	b2db      	uxtb	r3, r3
 800626e:	e022      	b.n	80062b6 <HAL_TIM_PWM_Start+0x6a>
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	2b04      	cmp	r3, #4
 8006274:	d109      	bne.n	800628a <HAL_TIM_PWM_Start+0x3e>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800627c:	b2db      	uxtb	r3, r3
 800627e:	2b01      	cmp	r3, #1
 8006280:	bf14      	ite	ne
 8006282:	2301      	movne	r3, #1
 8006284:	2300      	moveq	r3, #0
 8006286:	b2db      	uxtb	r3, r3
 8006288:	e015      	b.n	80062b6 <HAL_TIM_PWM_Start+0x6a>
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	2b08      	cmp	r3, #8
 800628e:	d109      	bne.n	80062a4 <HAL_TIM_PWM_Start+0x58>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006296:	b2db      	uxtb	r3, r3
 8006298:	2b01      	cmp	r3, #1
 800629a:	bf14      	ite	ne
 800629c:	2301      	movne	r3, #1
 800629e:	2300      	moveq	r3, #0
 80062a0:	b2db      	uxtb	r3, r3
 80062a2:	e008      	b.n	80062b6 <HAL_TIM_PWM_Start+0x6a>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062aa:	b2db      	uxtb	r3, r3
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	bf14      	ite	ne
 80062b0:	2301      	movne	r3, #1
 80062b2:	2300      	moveq	r3, #0
 80062b4:	b2db      	uxtb	r3, r3
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d001      	beq.n	80062be <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80062ba:	2301      	movs	r3, #1
 80062bc:	e07c      	b.n	80063b8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d104      	bne.n	80062ce <HAL_TIM_PWM_Start+0x82>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2202      	movs	r2, #2
 80062c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80062cc:	e013      	b.n	80062f6 <HAL_TIM_PWM_Start+0xaa>
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	2b04      	cmp	r3, #4
 80062d2:	d104      	bne.n	80062de <HAL_TIM_PWM_Start+0x92>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2202      	movs	r2, #2
 80062d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80062dc:	e00b      	b.n	80062f6 <HAL_TIM_PWM_Start+0xaa>
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	2b08      	cmp	r3, #8
 80062e2:	d104      	bne.n	80062ee <HAL_TIM_PWM_Start+0xa2>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2202      	movs	r2, #2
 80062e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80062ec:	e003      	b.n	80062f6 <HAL_TIM_PWM_Start+0xaa>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2202      	movs	r2, #2
 80062f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	2201      	movs	r2, #1
 80062fc:	6839      	ldr	r1, [r7, #0]
 80062fe:	4618      	mov	r0, r3
 8006300:	f000 fe10 	bl	8006f24 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a2d      	ldr	r2, [pc, #180]	; (80063c0 <HAL_TIM_PWM_Start+0x174>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d004      	beq.n	8006318 <HAL_TIM_PWM_Start+0xcc>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4a2c      	ldr	r2, [pc, #176]	; (80063c4 <HAL_TIM_PWM_Start+0x178>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d101      	bne.n	800631c <HAL_TIM_PWM_Start+0xd0>
 8006318:	2301      	movs	r3, #1
 800631a:	e000      	b.n	800631e <HAL_TIM_PWM_Start+0xd2>
 800631c:	2300      	movs	r3, #0
 800631e:	2b00      	cmp	r3, #0
 8006320:	d007      	beq.n	8006332 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006330:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a22      	ldr	r2, [pc, #136]	; (80063c0 <HAL_TIM_PWM_Start+0x174>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d022      	beq.n	8006382 <HAL_TIM_PWM_Start+0x136>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006344:	d01d      	beq.n	8006382 <HAL_TIM_PWM_Start+0x136>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a1f      	ldr	r2, [pc, #124]	; (80063c8 <HAL_TIM_PWM_Start+0x17c>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d018      	beq.n	8006382 <HAL_TIM_PWM_Start+0x136>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a1d      	ldr	r2, [pc, #116]	; (80063cc <HAL_TIM_PWM_Start+0x180>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d013      	beq.n	8006382 <HAL_TIM_PWM_Start+0x136>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a1c      	ldr	r2, [pc, #112]	; (80063d0 <HAL_TIM_PWM_Start+0x184>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d00e      	beq.n	8006382 <HAL_TIM_PWM_Start+0x136>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4a16      	ldr	r2, [pc, #88]	; (80063c4 <HAL_TIM_PWM_Start+0x178>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d009      	beq.n	8006382 <HAL_TIM_PWM_Start+0x136>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a18      	ldr	r2, [pc, #96]	; (80063d4 <HAL_TIM_PWM_Start+0x188>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d004      	beq.n	8006382 <HAL_TIM_PWM_Start+0x136>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4a16      	ldr	r2, [pc, #88]	; (80063d8 <HAL_TIM_PWM_Start+0x18c>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d111      	bne.n	80063a6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	689b      	ldr	r3, [r3, #8]
 8006388:	f003 0307 	and.w	r3, r3, #7
 800638c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2b06      	cmp	r3, #6
 8006392:	d010      	beq.n	80063b6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	681a      	ldr	r2, [r3, #0]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f042 0201 	orr.w	r2, r2, #1
 80063a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063a4:	e007      	b.n	80063b6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	681a      	ldr	r2, [r3, #0]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f042 0201 	orr.w	r2, r2, #1
 80063b4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80063b6:	2300      	movs	r3, #0
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	3710      	adds	r7, #16
 80063bc:	46bd      	mov	sp, r7
 80063be:	bd80      	pop	{r7, pc}
 80063c0:	40010000 	.word	0x40010000
 80063c4:	40010400 	.word	0x40010400
 80063c8:	40000400 	.word	0x40000400
 80063cc:	40000800 	.word	0x40000800
 80063d0:	40000c00 	.word	0x40000c00
 80063d4:	40014000 	.word	0x40014000
 80063d8:	40001800 	.word	0x40001800

080063dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b082      	sub	sp, #8
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	691b      	ldr	r3, [r3, #16]
 80063ea:	f003 0302 	and.w	r3, r3, #2
 80063ee:	2b02      	cmp	r3, #2
 80063f0:	d122      	bne.n	8006438 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	68db      	ldr	r3, [r3, #12]
 80063f8:	f003 0302 	and.w	r3, r3, #2
 80063fc:	2b02      	cmp	r3, #2
 80063fe:	d11b      	bne.n	8006438 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f06f 0202 	mvn.w	r2, #2
 8006408:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2201      	movs	r2, #1
 800640e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	699b      	ldr	r3, [r3, #24]
 8006416:	f003 0303 	and.w	r3, r3, #3
 800641a:	2b00      	cmp	r3, #0
 800641c:	d003      	beq.n	8006426 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f000 fa77 	bl	8006912 <HAL_TIM_IC_CaptureCallback>
 8006424:	e005      	b.n	8006432 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f000 fa69 	bl	80068fe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f000 fa7a 	bl	8006926 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2200      	movs	r2, #0
 8006436:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	691b      	ldr	r3, [r3, #16]
 800643e:	f003 0304 	and.w	r3, r3, #4
 8006442:	2b04      	cmp	r3, #4
 8006444:	d122      	bne.n	800648c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	68db      	ldr	r3, [r3, #12]
 800644c:	f003 0304 	and.w	r3, r3, #4
 8006450:	2b04      	cmp	r3, #4
 8006452:	d11b      	bne.n	800648c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f06f 0204 	mvn.w	r2, #4
 800645c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2202      	movs	r2, #2
 8006462:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	699b      	ldr	r3, [r3, #24]
 800646a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800646e:	2b00      	cmp	r3, #0
 8006470:	d003      	beq.n	800647a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f000 fa4d 	bl	8006912 <HAL_TIM_IC_CaptureCallback>
 8006478:	e005      	b.n	8006486 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f000 fa3f 	bl	80068fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	f000 fa50 	bl	8006926 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2200      	movs	r2, #0
 800648a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	691b      	ldr	r3, [r3, #16]
 8006492:	f003 0308 	and.w	r3, r3, #8
 8006496:	2b08      	cmp	r3, #8
 8006498:	d122      	bne.n	80064e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	68db      	ldr	r3, [r3, #12]
 80064a0:	f003 0308 	and.w	r3, r3, #8
 80064a4:	2b08      	cmp	r3, #8
 80064a6:	d11b      	bne.n	80064e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f06f 0208 	mvn.w	r2, #8
 80064b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2204      	movs	r2, #4
 80064b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	69db      	ldr	r3, [r3, #28]
 80064be:	f003 0303 	and.w	r3, r3, #3
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d003      	beq.n	80064ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f000 fa23 	bl	8006912 <HAL_TIM_IC_CaptureCallback>
 80064cc:	e005      	b.n	80064da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f000 fa15 	bl	80068fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f000 fa26 	bl	8006926 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2200      	movs	r2, #0
 80064de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	691b      	ldr	r3, [r3, #16]
 80064e6:	f003 0310 	and.w	r3, r3, #16
 80064ea:	2b10      	cmp	r3, #16
 80064ec:	d122      	bne.n	8006534 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	68db      	ldr	r3, [r3, #12]
 80064f4:	f003 0310 	and.w	r3, r3, #16
 80064f8:	2b10      	cmp	r3, #16
 80064fa:	d11b      	bne.n	8006534 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f06f 0210 	mvn.w	r2, #16
 8006504:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2208      	movs	r2, #8
 800650a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	69db      	ldr	r3, [r3, #28]
 8006512:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006516:	2b00      	cmp	r3, #0
 8006518:	d003      	beq.n	8006522 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f000 f9f9 	bl	8006912 <HAL_TIM_IC_CaptureCallback>
 8006520:	e005      	b.n	800652e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f000 f9eb 	bl	80068fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006528:	6878      	ldr	r0, [r7, #4]
 800652a:	f000 f9fc 	bl	8006926 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	2200      	movs	r2, #0
 8006532:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	691b      	ldr	r3, [r3, #16]
 800653a:	f003 0301 	and.w	r3, r3, #1
 800653e:	2b01      	cmp	r3, #1
 8006540:	d10e      	bne.n	8006560 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	68db      	ldr	r3, [r3, #12]
 8006548:	f003 0301 	and.w	r3, r3, #1
 800654c:	2b01      	cmp	r3, #1
 800654e:	d107      	bne.n	8006560 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f06f 0201 	mvn.w	r2, #1
 8006558:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f7fc fd40 	bl	8002fe0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	691b      	ldr	r3, [r3, #16]
 8006566:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800656a:	2b80      	cmp	r3, #128	; 0x80
 800656c:	d10e      	bne.n	800658c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	68db      	ldr	r3, [r3, #12]
 8006574:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006578:	2b80      	cmp	r3, #128	; 0x80
 800657a:	d107      	bne.n	800658c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006584:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f000 fd78 	bl	800707c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	691b      	ldr	r3, [r3, #16]
 8006592:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006596:	2b40      	cmp	r3, #64	; 0x40
 8006598:	d10e      	bne.n	80065b8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	68db      	ldr	r3, [r3, #12]
 80065a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065a4:	2b40      	cmp	r3, #64	; 0x40
 80065a6:	d107      	bne.n	80065b8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80065b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f000 f9c1 	bl	800693a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	691b      	ldr	r3, [r3, #16]
 80065be:	f003 0320 	and.w	r3, r3, #32
 80065c2:	2b20      	cmp	r3, #32
 80065c4:	d10e      	bne.n	80065e4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	68db      	ldr	r3, [r3, #12]
 80065cc:	f003 0320 	and.w	r3, r3, #32
 80065d0:	2b20      	cmp	r3, #32
 80065d2:	d107      	bne.n	80065e4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f06f 0220 	mvn.w	r2, #32
 80065dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	f000 fd42 	bl	8007068 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80065e4:	bf00      	nop
 80065e6:	3708      	adds	r7, #8
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bd80      	pop	{r7, pc}

080065ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b086      	sub	sp, #24
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	60f8      	str	r0, [r7, #12]
 80065f4:	60b9      	str	r1, [r7, #8]
 80065f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80065f8:	2300      	movs	r3, #0
 80065fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006602:	2b01      	cmp	r3, #1
 8006604:	d101      	bne.n	800660a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006606:	2302      	movs	r3, #2
 8006608:	e0ae      	b.n	8006768 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2201      	movs	r2, #1
 800660e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2b0c      	cmp	r3, #12
 8006616:	f200 809f 	bhi.w	8006758 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800661a:	a201      	add	r2, pc, #4	; (adr r2, 8006620 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800661c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006620:	08006655 	.word	0x08006655
 8006624:	08006759 	.word	0x08006759
 8006628:	08006759 	.word	0x08006759
 800662c:	08006759 	.word	0x08006759
 8006630:	08006695 	.word	0x08006695
 8006634:	08006759 	.word	0x08006759
 8006638:	08006759 	.word	0x08006759
 800663c:	08006759 	.word	0x08006759
 8006640:	080066d7 	.word	0x080066d7
 8006644:	08006759 	.word	0x08006759
 8006648:	08006759 	.word	0x08006759
 800664c:	08006759 	.word	0x08006759
 8006650:	08006717 	.word	0x08006717
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	68b9      	ldr	r1, [r7, #8]
 800665a:	4618      	mov	r0, r3
 800665c:	f000 fa18 	bl	8006a90 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	699a      	ldr	r2, [r3, #24]
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f042 0208 	orr.w	r2, r2, #8
 800666e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	699a      	ldr	r2, [r3, #24]
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f022 0204 	bic.w	r2, r2, #4
 800667e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	6999      	ldr	r1, [r3, #24]
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	691a      	ldr	r2, [r3, #16]
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	430a      	orrs	r2, r1
 8006690:	619a      	str	r2, [r3, #24]
      break;
 8006692:	e064      	b.n	800675e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	68b9      	ldr	r1, [r7, #8]
 800669a:	4618      	mov	r0, r3
 800669c:	f000 fa68 	bl	8006b70 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	699a      	ldr	r2, [r3, #24]
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80066ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	699a      	ldr	r2, [r3, #24]
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	6999      	ldr	r1, [r3, #24]
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	691b      	ldr	r3, [r3, #16]
 80066ca:	021a      	lsls	r2, r3, #8
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	430a      	orrs	r2, r1
 80066d2:	619a      	str	r2, [r3, #24]
      break;
 80066d4:	e043      	b.n	800675e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	68b9      	ldr	r1, [r7, #8]
 80066dc:	4618      	mov	r0, r3
 80066de:	f000 fabd 	bl	8006c5c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	69da      	ldr	r2, [r3, #28]
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f042 0208 	orr.w	r2, r2, #8
 80066f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	69da      	ldr	r2, [r3, #28]
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f022 0204 	bic.w	r2, r2, #4
 8006700:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	69d9      	ldr	r1, [r3, #28]
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	691a      	ldr	r2, [r3, #16]
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	430a      	orrs	r2, r1
 8006712:	61da      	str	r2, [r3, #28]
      break;
 8006714:	e023      	b.n	800675e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	68b9      	ldr	r1, [r7, #8]
 800671c:	4618      	mov	r0, r3
 800671e:	f000 fb11 	bl	8006d44 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	69da      	ldr	r2, [r3, #28]
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006730:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	69da      	ldr	r2, [r3, #28]
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006740:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	69d9      	ldr	r1, [r3, #28]
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	691b      	ldr	r3, [r3, #16]
 800674c:	021a      	lsls	r2, r3, #8
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	430a      	orrs	r2, r1
 8006754:	61da      	str	r2, [r3, #28]
      break;
 8006756:	e002      	b.n	800675e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006758:	2301      	movs	r3, #1
 800675a:	75fb      	strb	r3, [r7, #23]
      break;
 800675c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	2200      	movs	r2, #0
 8006762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006766:	7dfb      	ldrb	r3, [r7, #23]
}
 8006768:	4618      	mov	r0, r3
 800676a:	3718      	adds	r7, #24
 800676c:	46bd      	mov	sp, r7
 800676e:	bd80      	pop	{r7, pc}

08006770 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b084      	sub	sp, #16
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
 8006778:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800677a:	2300      	movs	r3, #0
 800677c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006784:	2b01      	cmp	r3, #1
 8006786:	d101      	bne.n	800678c <HAL_TIM_ConfigClockSource+0x1c>
 8006788:	2302      	movs	r3, #2
 800678a:	e0b4      	b.n	80068f6 <HAL_TIM_ConfigClockSource+0x186>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2201      	movs	r2, #1
 8006790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2202      	movs	r2, #2
 8006798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	689b      	ldr	r3, [r3, #8]
 80067a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80067aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80067b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	68ba      	ldr	r2, [r7, #8]
 80067ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067c4:	d03e      	beq.n	8006844 <HAL_TIM_ConfigClockSource+0xd4>
 80067c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067ca:	f200 8087 	bhi.w	80068dc <HAL_TIM_ConfigClockSource+0x16c>
 80067ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067d2:	f000 8086 	beq.w	80068e2 <HAL_TIM_ConfigClockSource+0x172>
 80067d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067da:	d87f      	bhi.n	80068dc <HAL_TIM_ConfigClockSource+0x16c>
 80067dc:	2b70      	cmp	r3, #112	; 0x70
 80067de:	d01a      	beq.n	8006816 <HAL_TIM_ConfigClockSource+0xa6>
 80067e0:	2b70      	cmp	r3, #112	; 0x70
 80067e2:	d87b      	bhi.n	80068dc <HAL_TIM_ConfigClockSource+0x16c>
 80067e4:	2b60      	cmp	r3, #96	; 0x60
 80067e6:	d050      	beq.n	800688a <HAL_TIM_ConfigClockSource+0x11a>
 80067e8:	2b60      	cmp	r3, #96	; 0x60
 80067ea:	d877      	bhi.n	80068dc <HAL_TIM_ConfigClockSource+0x16c>
 80067ec:	2b50      	cmp	r3, #80	; 0x50
 80067ee:	d03c      	beq.n	800686a <HAL_TIM_ConfigClockSource+0xfa>
 80067f0:	2b50      	cmp	r3, #80	; 0x50
 80067f2:	d873      	bhi.n	80068dc <HAL_TIM_ConfigClockSource+0x16c>
 80067f4:	2b40      	cmp	r3, #64	; 0x40
 80067f6:	d058      	beq.n	80068aa <HAL_TIM_ConfigClockSource+0x13a>
 80067f8:	2b40      	cmp	r3, #64	; 0x40
 80067fa:	d86f      	bhi.n	80068dc <HAL_TIM_ConfigClockSource+0x16c>
 80067fc:	2b30      	cmp	r3, #48	; 0x30
 80067fe:	d064      	beq.n	80068ca <HAL_TIM_ConfigClockSource+0x15a>
 8006800:	2b30      	cmp	r3, #48	; 0x30
 8006802:	d86b      	bhi.n	80068dc <HAL_TIM_ConfigClockSource+0x16c>
 8006804:	2b20      	cmp	r3, #32
 8006806:	d060      	beq.n	80068ca <HAL_TIM_ConfigClockSource+0x15a>
 8006808:	2b20      	cmp	r3, #32
 800680a:	d867      	bhi.n	80068dc <HAL_TIM_ConfigClockSource+0x16c>
 800680c:	2b00      	cmp	r3, #0
 800680e:	d05c      	beq.n	80068ca <HAL_TIM_ConfigClockSource+0x15a>
 8006810:	2b10      	cmp	r3, #16
 8006812:	d05a      	beq.n	80068ca <HAL_TIM_ConfigClockSource+0x15a>
 8006814:	e062      	b.n	80068dc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6818      	ldr	r0, [r3, #0]
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	6899      	ldr	r1, [r3, #8]
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	685a      	ldr	r2, [r3, #4]
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	68db      	ldr	r3, [r3, #12]
 8006826:	f000 fb5d 	bl	8006ee4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	689b      	ldr	r3, [r3, #8]
 8006830:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006838:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	68ba      	ldr	r2, [r7, #8]
 8006840:	609a      	str	r2, [r3, #8]
      break;
 8006842:	e04f      	b.n	80068e4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6818      	ldr	r0, [r3, #0]
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	6899      	ldr	r1, [r3, #8]
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	685a      	ldr	r2, [r3, #4]
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	68db      	ldr	r3, [r3, #12]
 8006854:	f000 fb46 	bl	8006ee4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	689a      	ldr	r2, [r3, #8]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006866:	609a      	str	r2, [r3, #8]
      break;
 8006868:	e03c      	b.n	80068e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6818      	ldr	r0, [r3, #0]
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	6859      	ldr	r1, [r3, #4]
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	68db      	ldr	r3, [r3, #12]
 8006876:	461a      	mov	r2, r3
 8006878:	f000 faba 	bl	8006df0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	2150      	movs	r1, #80	; 0x50
 8006882:	4618      	mov	r0, r3
 8006884:	f000 fb13 	bl	8006eae <TIM_ITRx_SetConfig>
      break;
 8006888:	e02c      	b.n	80068e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6818      	ldr	r0, [r3, #0]
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	6859      	ldr	r1, [r3, #4]
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	68db      	ldr	r3, [r3, #12]
 8006896:	461a      	mov	r2, r3
 8006898:	f000 fad9 	bl	8006e4e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	2160      	movs	r1, #96	; 0x60
 80068a2:	4618      	mov	r0, r3
 80068a4:	f000 fb03 	bl	8006eae <TIM_ITRx_SetConfig>
      break;
 80068a8:	e01c      	b.n	80068e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6818      	ldr	r0, [r3, #0]
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	6859      	ldr	r1, [r3, #4]
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	68db      	ldr	r3, [r3, #12]
 80068b6:	461a      	mov	r2, r3
 80068b8:	f000 fa9a 	bl	8006df0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	2140      	movs	r1, #64	; 0x40
 80068c2:	4618      	mov	r0, r3
 80068c4:	f000 faf3 	bl	8006eae <TIM_ITRx_SetConfig>
      break;
 80068c8:	e00c      	b.n	80068e4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681a      	ldr	r2, [r3, #0]
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4619      	mov	r1, r3
 80068d4:	4610      	mov	r0, r2
 80068d6:	f000 faea 	bl	8006eae <TIM_ITRx_SetConfig>
      break;
 80068da:	e003      	b.n	80068e4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80068dc:	2301      	movs	r3, #1
 80068de:	73fb      	strb	r3, [r7, #15]
      break;
 80068e0:	e000      	b.n	80068e4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80068e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2201      	movs	r2, #1
 80068e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2200      	movs	r2, #0
 80068f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80068f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	3710      	adds	r7, #16
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bd80      	pop	{r7, pc}

080068fe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80068fe:	b480      	push	{r7}
 8006900:	b083      	sub	sp, #12
 8006902:	af00      	add	r7, sp, #0
 8006904:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006906:	bf00      	nop
 8006908:	370c      	adds	r7, #12
 800690a:	46bd      	mov	sp, r7
 800690c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006910:	4770      	bx	lr

08006912 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006912:	b480      	push	{r7}
 8006914:	b083      	sub	sp, #12
 8006916:	af00      	add	r7, sp, #0
 8006918:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800691a:	bf00      	nop
 800691c:	370c      	adds	r7, #12
 800691e:	46bd      	mov	sp, r7
 8006920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006924:	4770      	bx	lr

08006926 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006926:	b480      	push	{r7}
 8006928:	b083      	sub	sp, #12
 800692a:	af00      	add	r7, sp, #0
 800692c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800692e:	bf00      	nop
 8006930:	370c      	adds	r7, #12
 8006932:	46bd      	mov	sp, r7
 8006934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006938:	4770      	bx	lr

0800693a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800693a:	b480      	push	{r7}
 800693c:	b083      	sub	sp, #12
 800693e:	af00      	add	r7, sp, #0
 8006940:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006942:	bf00      	nop
 8006944:	370c      	adds	r7, #12
 8006946:	46bd      	mov	sp, r7
 8006948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694c:	4770      	bx	lr
	...

08006950 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006950:	b480      	push	{r7}
 8006952:	b085      	sub	sp, #20
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
 8006958:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	4a40      	ldr	r2, [pc, #256]	; (8006a64 <TIM_Base_SetConfig+0x114>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d013      	beq.n	8006990 <TIM_Base_SetConfig+0x40>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800696e:	d00f      	beq.n	8006990 <TIM_Base_SetConfig+0x40>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	4a3d      	ldr	r2, [pc, #244]	; (8006a68 <TIM_Base_SetConfig+0x118>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d00b      	beq.n	8006990 <TIM_Base_SetConfig+0x40>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	4a3c      	ldr	r2, [pc, #240]	; (8006a6c <TIM_Base_SetConfig+0x11c>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d007      	beq.n	8006990 <TIM_Base_SetConfig+0x40>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	4a3b      	ldr	r2, [pc, #236]	; (8006a70 <TIM_Base_SetConfig+0x120>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d003      	beq.n	8006990 <TIM_Base_SetConfig+0x40>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	4a3a      	ldr	r2, [pc, #232]	; (8006a74 <TIM_Base_SetConfig+0x124>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d108      	bne.n	80069a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006996:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	685b      	ldr	r3, [r3, #4]
 800699c:	68fa      	ldr	r2, [r7, #12]
 800699e:	4313      	orrs	r3, r2
 80069a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	4a2f      	ldr	r2, [pc, #188]	; (8006a64 <TIM_Base_SetConfig+0x114>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d02b      	beq.n	8006a02 <TIM_Base_SetConfig+0xb2>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069b0:	d027      	beq.n	8006a02 <TIM_Base_SetConfig+0xb2>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	4a2c      	ldr	r2, [pc, #176]	; (8006a68 <TIM_Base_SetConfig+0x118>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d023      	beq.n	8006a02 <TIM_Base_SetConfig+0xb2>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	4a2b      	ldr	r2, [pc, #172]	; (8006a6c <TIM_Base_SetConfig+0x11c>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d01f      	beq.n	8006a02 <TIM_Base_SetConfig+0xb2>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	4a2a      	ldr	r2, [pc, #168]	; (8006a70 <TIM_Base_SetConfig+0x120>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d01b      	beq.n	8006a02 <TIM_Base_SetConfig+0xb2>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	4a29      	ldr	r2, [pc, #164]	; (8006a74 <TIM_Base_SetConfig+0x124>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d017      	beq.n	8006a02 <TIM_Base_SetConfig+0xb2>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	4a28      	ldr	r2, [pc, #160]	; (8006a78 <TIM_Base_SetConfig+0x128>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d013      	beq.n	8006a02 <TIM_Base_SetConfig+0xb2>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	4a27      	ldr	r2, [pc, #156]	; (8006a7c <TIM_Base_SetConfig+0x12c>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d00f      	beq.n	8006a02 <TIM_Base_SetConfig+0xb2>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	4a26      	ldr	r2, [pc, #152]	; (8006a80 <TIM_Base_SetConfig+0x130>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d00b      	beq.n	8006a02 <TIM_Base_SetConfig+0xb2>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	4a25      	ldr	r2, [pc, #148]	; (8006a84 <TIM_Base_SetConfig+0x134>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d007      	beq.n	8006a02 <TIM_Base_SetConfig+0xb2>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	4a24      	ldr	r2, [pc, #144]	; (8006a88 <TIM_Base_SetConfig+0x138>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d003      	beq.n	8006a02 <TIM_Base_SetConfig+0xb2>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	4a23      	ldr	r2, [pc, #140]	; (8006a8c <TIM_Base_SetConfig+0x13c>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d108      	bne.n	8006a14 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	68db      	ldr	r3, [r3, #12]
 8006a0e:	68fa      	ldr	r2, [r7, #12]
 8006a10:	4313      	orrs	r3, r2
 8006a12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	695b      	ldr	r3, [r3, #20]
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	68fa      	ldr	r2, [r7, #12]
 8006a26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	689a      	ldr	r2, [r3, #8]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	681a      	ldr	r2, [r3, #0]
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	4a0a      	ldr	r2, [pc, #40]	; (8006a64 <TIM_Base_SetConfig+0x114>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d003      	beq.n	8006a48 <TIM_Base_SetConfig+0xf8>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	4a0c      	ldr	r2, [pc, #48]	; (8006a74 <TIM_Base_SetConfig+0x124>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d103      	bne.n	8006a50 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	691a      	ldr	r2, [r3, #16]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2201      	movs	r2, #1
 8006a54:	615a      	str	r2, [r3, #20]
}
 8006a56:	bf00      	nop
 8006a58:	3714      	adds	r7, #20
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a60:	4770      	bx	lr
 8006a62:	bf00      	nop
 8006a64:	40010000 	.word	0x40010000
 8006a68:	40000400 	.word	0x40000400
 8006a6c:	40000800 	.word	0x40000800
 8006a70:	40000c00 	.word	0x40000c00
 8006a74:	40010400 	.word	0x40010400
 8006a78:	40014000 	.word	0x40014000
 8006a7c:	40014400 	.word	0x40014400
 8006a80:	40014800 	.word	0x40014800
 8006a84:	40001800 	.word	0x40001800
 8006a88:	40001c00 	.word	0x40001c00
 8006a8c:	40002000 	.word	0x40002000

08006a90 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a90:	b480      	push	{r7}
 8006a92:	b087      	sub	sp, #28
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
 8006a98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6a1b      	ldr	r3, [r3, #32]
 8006a9e:	f023 0201 	bic.w	r2, r3, #1
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6a1b      	ldr	r3, [r3, #32]
 8006aaa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	685b      	ldr	r3, [r3, #4]
 8006ab0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	699b      	ldr	r3, [r3, #24]
 8006ab6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006abe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	f023 0303 	bic.w	r3, r3, #3
 8006ac6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	68fa      	ldr	r2, [r7, #12]
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	f023 0302 	bic.w	r3, r3, #2
 8006ad8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	689b      	ldr	r3, [r3, #8]
 8006ade:	697a      	ldr	r2, [r7, #20]
 8006ae0:	4313      	orrs	r3, r2
 8006ae2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	4a20      	ldr	r2, [pc, #128]	; (8006b68 <TIM_OC1_SetConfig+0xd8>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d003      	beq.n	8006af4 <TIM_OC1_SetConfig+0x64>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	4a1f      	ldr	r2, [pc, #124]	; (8006b6c <TIM_OC1_SetConfig+0xdc>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d10c      	bne.n	8006b0e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006af4:	697b      	ldr	r3, [r7, #20]
 8006af6:	f023 0308 	bic.w	r3, r3, #8
 8006afa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	68db      	ldr	r3, [r3, #12]
 8006b00:	697a      	ldr	r2, [r7, #20]
 8006b02:	4313      	orrs	r3, r2
 8006b04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006b06:	697b      	ldr	r3, [r7, #20]
 8006b08:	f023 0304 	bic.w	r3, r3, #4
 8006b0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	4a15      	ldr	r2, [pc, #84]	; (8006b68 <TIM_OC1_SetConfig+0xd8>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d003      	beq.n	8006b1e <TIM_OC1_SetConfig+0x8e>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	4a14      	ldr	r2, [pc, #80]	; (8006b6c <TIM_OC1_SetConfig+0xdc>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d111      	bne.n	8006b42 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006b26:	693b      	ldr	r3, [r7, #16]
 8006b28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006b2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	695b      	ldr	r3, [r3, #20]
 8006b32:	693a      	ldr	r2, [r7, #16]
 8006b34:	4313      	orrs	r3, r2
 8006b36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	699b      	ldr	r3, [r3, #24]
 8006b3c:	693a      	ldr	r2, [r7, #16]
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	693a      	ldr	r2, [r7, #16]
 8006b46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	68fa      	ldr	r2, [r7, #12]
 8006b4c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	685a      	ldr	r2, [r3, #4]
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	697a      	ldr	r2, [r7, #20]
 8006b5a:	621a      	str	r2, [r3, #32]
}
 8006b5c:	bf00      	nop
 8006b5e:	371c      	adds	r7, #28
 8006b60:	46bd      	mov	sp, r7
 8006b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b66:	4770      	bx	lr
 8006b68:	40010000 	.word	0x40010000
 8006b6c:	40010400 	.word	0x40010400

08006b70 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b70:	b480      	push	{r7}
 8006b72:	b087      	sub	sp, #28
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
 8006b78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6a1b      	ldr	r3, [r3, #32]
 8006b7e:	f023 0210 	bic.w	r2, r3, #16
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6a1b      	ldr	r3, [r3, #32]
 8006b8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	685b      	ldr	r3, [r3, #4]
 8006b90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	699b      	ldr	r3, [r3, #24]
 8006b96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ba6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	021b      	lsls	r3, r3, #8
 8006bae:	68fa      	ldr	r2, [r7, #12]
 8006bb0:	4313      	orrs	r3, r2
 8006bb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006bb4:	697b      	ldr	r3, [r7, #20]
 8006bb6:	f023 0320 	bic.w	r3, r3, #32
 8006bba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	689b      	ldr	r3, [r3, #8]
 8006bc0:	011b      	lsls	r3, r3, #4
 8006bc2:	697a      	ldr	r2, [r7, #20]
 8006bc4:	4313      	orrs	r3, r2
 8006bc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	4a22      	ldr	r2, [pc, #136]	; (8006c54 <TIM_OC2_SetConfig+0xe4>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d003      	beq.n	8006bd8 <TIM_OC2_SetConfig+0x68>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	4a21      	ldr	r2, [pc, #132]	; (8006c58 <TIM_OC2_SetConfig+0xe8>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d10d      	bne.n	8006bf4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006bd8:	697b      	ldr	r3, [r7, #20]
 8006bda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006bde:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	68db      	ldr	r3, [r3, #12]
 8006be4:	011b      	lsls	r3, r3, #4
 8006be6:	697a      	ldr	r2, [r7, #20]
 8006be8:	4313      	orrs	r3, r2
 8006bea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bf2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	4a17      	ldr	r2, [pc, #92]	; (8006c54 <TIM_OC2_SetConfig+0xe4>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d003      	beq.n	8006c04 <TIM_OC2_SetConfig+0x94>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	4a16      	ldr	r2, [pc, #88]	; (8006c58 <TIM_OC2_SetConfig+0xe8>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d113      	bne.n	8006c2c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006c0a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006c0c:	693b      	ldr	r3, [r7, #16]
 8006c0e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006c12:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	695b      	ldr	r3, [r3, #20]
 8006c18:	009b      	lsls	r3, r3, #2
 8006c1a:	693a      	ldr	r2, [r7, #16]
 8006c1c:	4313      	orrs	r3, r2
 8006c1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	699b      	ldr	r3, [r3, #24]
 8006c24:	009b      	lsls	r3, r3, #2
 8006c26:	693a      	ldr	r2, [r7, #16]
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	693a      	ldr	r2, [r7, #16]
 8006c30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	68fa      	ldr	r2, [r7, #12]
 8006c36:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	685a      	ldr	r2, [r3, #4]
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	697a      	ldr	r2, [r7, #20]
 8006c44:	621a      	str	r2, [r3, #32]
}
 8006c46:	bf00      	nop
 8006c48:	371c      	adds	r7, #28
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c50:	4770      	bx	lr
 8006c52:	bf00      	nop
 8006c54:	40010000 	.word	0x40010000
 8006c58:	40010400 	.word	0x40010400

08006c5c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b087      	sub	sp, #28
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
 8006c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6a1b      	ldr	r3, [r3, #32]
 8006c6a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6a1b      	ldr	r3, [r3, #32]
 8006c76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	685b      	ldr	r3, [r3, #4]
 8006c7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	69db      	ldr	r3, [r3, #28]
 8006c82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	f023 0303 	bic.w	r3, r3, #3
 8006c92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	68fa      	ldr	r2, [r7, #12]
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006c9e:	697b      	ldr	r3, [r7, #20]
 8006ca0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006ca4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	689b      	ldr	r3, [r3, #8]
 8006caa:	021b      	lsls	r3, r3, #8
 8006cac:	697a      	ldr	r2, [r7, #20]
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	4a21      	ldr	r2, [pc, #132]	; (8006d3c <TIM_OC3_SetConfig+0xe0>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d003      	beq.n	8006cc2 <TIM_OC3_SetConfig+0x66>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	4a20      	ldr	r2, [pc, #128]	; (8006d40 <TIM_OC3_SetConfig+0xe4>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d10d      	bne.n	8006cde <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006cc8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	68db      	ldr	r3, [r3, #12]
 8006cce:	021b      	lsls	r3, r3, #8
 8006cd0:	697a      	ldr	r2, [r7, #20]
 8006cd2:	4313      	orrs	r3, r2
 8006cd4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006cd6:	697b      	ldr	r3, [r7, #20]
 8006cd8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006cdc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	4a16      	ldr	r2, [pc, #88]	; (8006d3c <TIM_OC3_SetConfig+0xe0>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d003      	beq.n	8006cee <TIM_OC3_SetConfig+0x92>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	4a15      	ldr	r2, [pc, #84]	; (8006d40 <TIM_OC3_SetConfig+0xe4>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d113      	bne.n	8006d16 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006cee:	693b      	ldr	r3, [r7, #16]
 8006cf0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006cf4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006cf6:	693b      	ldr	r3, [r7, #16]
 8006cf8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006cfc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	695b      	ldr	r3, [r3, #20]
 8006d02:	011b      	lsls	r3, r3, #4
 8006d04:	693a      	ldr	r2, [r7, #16]
 8006d06:	4313      	orrs	r3, r2
 8006d08:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	699b      	ldr	r3, [r3, #24]
 8006d0e:	011b      	lsls	r3, r3, #4
 8006d10:	693a      	ldr	r2, [r7, #16]
 8006d12:	4313      	orrs	r3, r2
 8006d14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	693a      	ldr	r2, [r7, #16]
 8006d1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	68fa      	ldr	r2, [r7, #12]
 8006d20:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	685a      	ldr	r2, [r3, #4]
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	697a      	ldr	r2, [r7, #20]
 8006d2e:	621a      	str	r2, [r3, #32]
}
 8006d30:	bf00      	nop
 8006d32:	371c      	adds	r7, #28
 8006d34:	46bd      	mov	sp, r7
 8006d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3a:	4770      	bx	lr
 8006d3c:	40010000 	.word	0x40010000
 8006d40:	40010400 	.word	0x40010400

08006d44 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d44:	b480      	push	{r7}
 8006d46:	b087      	sub	sp, #28
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
 8006d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6a1b      	ldr	r3, [r3, #32]
 8006d52:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6a1b      	ldr	r3, [r3, #32]
 8006d5e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	685b      	ldr	r3, [r3, #4]
 8006d64:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	69db      	ldr	r3, [r3, #28]
 8006d6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	021b      	lsls	r3, r3, #8
 8006d82:	68fa      	ldr	r2, [r7, #12]
 8006d84:	4313      	orrs	r3, r2
 8006d86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006d88:	693b      	ldr	r3, [r7, #16]
 8006d8a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006d8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	689b      	ldr	r3, [r3, #8]
 8006d94:	031b      	lsls	r3, r3, #12
 8006d96:	693a      	ldr	r2, [r7, #16]
 8006d98:	4313      	orrs	r3, r2
 8006d9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	4a12      	ldr	r2, [pc, #72]	; (8006de8 <TIM_OC4_SetConfig+0xa4>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d003      	beq.n	8006dac <TIM_OC4_SetConfig+0x68>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	4a11      	ldr	r2, [pc, #68]	; (8006dec <TIM_OC4_SetConfig+0xa8>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d109      	bne.n	8006dc0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006dac:	697b      	ldr	r3, [r7, #20]
 8006dae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006db2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	695b      	ldr	r3, [r3, #20]
 8006db8:	019b      	lsls	r3, r3, #6
 8006dba:	697a      	ldr	r2, [r7, #20]
 8006dbc:	4313      	orrs	r3, r2
 8006dbe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	697a      	ldr	r2, [r7, #20]
 8006dc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	68fa      	ldr	r2, [r7, #12]
 8006dca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	685a      	ldr	r2, [r3, #4]
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	693a      	ldr	r2, [r7, #16]
 8006dd8:	621a      	str	r2, [r3, #32]
}
 8006dda:	bf00      	nop
 8006ddc:	371c      	adds	r7, #28
 8006dde:	46bd      	mov	sp, r7
 8006de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de4:	4770      	bx	lr
 8006de6:	bf00      	nop
 8006de8:	40010000 	.word	0x40010000
 8006dec:	40010400 	.word	0x40010400

08006df0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006df0:	b480      	push	{r7}
 8006df2:	b087      	sub	sp, #28
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	60f8      	str	r0, [r7, #12]
 8006df8:	60b9      	str	r1, [r7, #8]
 8006dfa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	6a1b      	ldr	r3, [r3, #32]
 8006e00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	6a1b      	ldr	r3, [r3, #32]
 8006e06:	f023 0201 	bic.w	r2, r3, #1
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	699b      	ldr	r3, [r3, #24]
 8006e12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006e14:	693b      	ldr	r3, [r7, #16]
 8006e16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	011b      	lsls	r3, r3, #4
 8006e20:	693a      	ldr	r2, [r7, #16]
 8006e22:	4313      	orrs	r3, r2
 8006e24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	f023 030a 	bic.w	r3, r3, #10
 8006e2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006e2e:	697a      	ldr	r2, [r7, #20]
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	4313      	orrs	r3, r2
 8006e34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	693a      	ldr	r2, [r7, #16]
 8006e3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	697a      	ldr	r2, [r7, #20]
 8006e40:	621a      	str	r2, [r3, #32]
}
 8006e42:	bf00      	nop
 8006e44:	371c      	adds	r7, #28
 8006e46:	46bd      	mov	sp, r7
 8006e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4c:	4770      	bx	lr

08006e4e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e4e:	b480      	push	{r7}
 8006e50:	b087      	sub	sp, #28
 8006e52:	af00      	add	r7, sp, #0
 8006e54:	60f8      	str	r0, [r7, #12]
 8006e56:	60b9      	str	r1, [r7, #8]
 8006e58:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	6a1b      	ldr	r3, [r3, #32]
 8006e5e:	f023 0210 	bic.w	r2, r3, #16
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	699b      	ldr	r3, [r3, #24]
 8006e6a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	6a1b      	ldr	r3, [r3, #32]
 8006e70:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006e78:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	031b      	lsls	r3, r3, #12
 8006e7e:	697a      	ldr	r2, [r7, #20]
 8006e80:	4313      	orrs	r3, r2
 8006e82:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006e84:	693b      	ldr	r3, [r7, #16]
 8006e86:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006e8a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	011b      	lsls	r3, r3, #4
 8006e90:	693a      	ldr	r2, [r7, #16]
 8006e92:	4313      	orrs	r3, r2
 8006e94:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	697a      	ldr	r2, [r7, #20]
 8006e9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	693a      	ldr	r2, [r7, #16]
 8006ea0:	621a      	str	r2, [r3, #32]
}
 8006ea2:	bf00      	nop
 8006ea4:	371c      	adds	r7, #28
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eac:	4770      	bx	lr

08006eae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006eae:	b480      	push	{r7}
 8006eb0:	b085      	sub	sp, #20
 8006eb2:	af00      	add	r7, sp, #0
 8006eb4:	6078      	str	r0, [r7, #4]
 8006eb6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	689b      	ldr	r3, [r3, #8]
 8006ebc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ec4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006ec6:	683a      	ldr	r2, [r7, #0]
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	4313      	orrs	r3, r2
 8006ecc:	f043 0307 	orr.w	r3, r3, #7
 8006ed0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	68fa      	ldr	r2, [r7, #12]
 8006ed6:	609a      	str	r2, [r3, #8]
}
 8006ed8:	bf00      	nop
 8006eda:	3714      	adds	r7, #20
 8006edc:	46bd      	mov	sp, r7
 8006ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee2:	4770      	bx	lr

08006ee4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b087      	sub	sp, #28
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	60f8      	str	r0, [r7, #12]
 8006eec:	60b9      	str	r1, [r7, #8]
 8006eee:	607a      	str	r2, [r7, #4]
 8006ef0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	689b      	ldr	r3, [r3, #8]
 8006ef6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ef8:	697b      	ldr	r3, [r7, #20]
 8006efa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006efe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	021a      	lsls	r2, r3, #8
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	431a      	orrs	r2, r3
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	4313      	orrs	r3, r2
 8006f0c:	697a      	ldr	r2, [r7, #20]
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	697a      	ldr	r2, [r7, #20]
 8006f16:	609a      	str	r2, [r3, #8]
}
 8006f18:	bf00      	nop
 8006f1a:	371c      	adds	r7, #28
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f22:	4770      	bx	lr

08006f24 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b087      	sub	sp, #28
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	60f8      	str	r0, [r7, #12]
 8006f2c:	60b9      	str	r1, [r7, #8]
 8006f2e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	f003 031f 	and.w	r3, r3, #31
 8006f36:	2201      	movs	r2, #1
 8006f38:	fa02 f303 	lsl.w	r3, r2, r3
 8006f3c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	6a1a      	ldr	r2, [r3, #32]
 8006f42:	697b      	ldr	r3, [r7, #20]
 8006f44:	43db      	mvns	r3, r3
 8006f46:	401a      	ands	r2, r3
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	6a1a      	ldr	r2, [r3, #32]
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	f003 031f 	and.w	r3, r3, #31
 8006f56:	6879      	ldr	r1, [r7, #4]
 8006f58:	fa01 f303 	lsl.w	r3, r1, r3
 8006f5c:	431a      	orrs	r2, r3
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	621a      	str	r2, [r3, #32]
}
 8006f62:	bf00      	nop
 8006f64:	371c      	adds	r7, #28
 8006f66:	46bd      	mov	sp, r7
 8006f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6c:	4770      	bx	lr
	...

08006f70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006f70:	b480      	push	{r7}
 8006f72:	b085      	sub	sp, #20
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
 8006f78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f80:	2b01      	cmp	r3, #1
 8006f82:	d101      	bne.n	8006f88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006f84:	2302      	movs	r3, #2
 8006f86:	e05a      	b.n	800703e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2202      	movs	r2, #2
 8006f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	685b      	ldr	r3, [r3, #4]
 8006f9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	689b      	ldr	r3, [r3, #8]
 8006fa6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	68fa      	ldr	r2, [r7, #12]
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	68fa      	ldr	r2, [r7, #12]
 8006fc0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a21      	ldr	r2, [pc, #132]	; (800704c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d022      	beq.n	8007012 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fd4:	d01d      	beq.n	8007012 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a1d      	ldr	r2, [pc, #116]	; (8007050 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d018      	beq.n	8007012 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a1b      	ldr	r2, [pc, #108]	; (8007054 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d013      	beq.n	8007012 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4a1a      	ldr	r2, [pc, #104]	; (8007058 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d00e      	beq.n	8007012 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4a18      	ldr	r2, [pc, #96]	; (800705c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d009      	beq.n	8007012 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4a17      	ldr	r2, [pc, #92]	; (8007060 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d004      	beq.n	8007012 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4a15      	ldr	r2, [pc, #84]	; (8007064 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d10c      	bne.n	800702c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007018:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	685b      	ldr	r3, [r3, #4]
 800701e:	68ba      	ldr	r2, [r7, #8]
 8007020:	4313      	orrs	r3, r2
 8007022:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	68ba      	ldr	r2, [r7, #8]
 800702a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2201      	movs	r2, #1
 8007030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2200      	movs	r2, #0
 8007038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800703c:	2300      	movs	r3, #0
}
 800703e:	4618      	mov	r0, r3
 8007040:	3714      	adds	r7, #20
 8007042:	46bd      	mov	sp, r7
 8007044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007048:	4770      	bx	lr
 800704a:	bf00      	nop
 800704c:	40010000 	.word	0x40010000
 8007050:	40000400 	.word	0x40000400
 8007054:	40000800 	.word	0x40000800
 8007058:	40000c00 	.word	0x40000c00
 800705c:	40010400 	.word	0x40010400
 8007060:	40014000 	.word	0x40014000
 8007064:	40001800 	.word	0x40001800

08007068 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007068:	b480      	push	{r7}
 800706a:	b083      	sub	sp, #12
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007070:	bf00      	nop
 8007072:	370c      	adds	r7, #12
 8007074:	46bd      	mov	sp, r7
 8007076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707a:	4770      	bx	lr

0800707c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800707c:	b480      	push	{r7}
 800707e:	b083      	sub	sp, #12
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007084:	bf00      	nop
 8007086:	370c      	adds	r7, #12
 8007088:	46bd      	mov	sp, r7
 800708a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708e:	4770      	bx	lr

08007090 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b082      	sub	sp, #8
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d101      	bne.n	80070a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800709e:	2301      	movs	r3, #1
 80070a0:	e03f      	b.n	8007122 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070a8:	b2db      	uxtb	r3, r3
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d106      	bne.n	80070bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2200      	movs	r2, #0
 80070b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f7fd f81e 	bl	80040f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2224      	movs	r2, #36	; 0x24
 80070c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	68da      	ldr	r2, [r3, #12]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80070d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	f000 ff43 	bl	8007f60 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	691a      	ldr	r2, [r3, #16]
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80070e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	695a      	ldr	r2, [r3, #20]
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80070f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	68da      	ldr	r2, [r3, #12]
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007108:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2200      	movs	r2, #0
 800710e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2220      	movs	r2, #32
 8007114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2220      	movs	r2, #32
 800711c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007120:	2300      	movs	r3, #0
}
 8007122:	4618      	mov	r0, r3
 8007124:	3708      	adds	r7, #8
 8007126:	46bd      	mov	sp, r7
 8007128:	bd80      	pop	{r7, pc}
	...

0800712c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b08c      	sub	sp, #48	; 0x30
 8007130:	af00      	add	r7, sp, #0
 8007132:	60f8      	str	r0, [r7, #12]
 8007134:	60b9      	str	r1, [r7, #8]
 8007136:	4613      	mov	r3, r2
 8007138:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007140:	b2db      	uxtb	r3, r3
 8007142:	2b20      	cmp	r3, #32
 8007144:	d165      	bne.n	8007212 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d002      	beq.n	8007152 <HAL_UART_Transmit_DMA+0x26>
 800714c:	88fb      	ldrh	r3, [r7, #6]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d101      	bne.n	8007156 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8007152:	2301      	movs	r3, #1
 8007154:	e05e      	b.n	8007214 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800715c:	2b01      	cmp	r3, #1
 800715e:	d101      	bne.n	8007164 <HAL_UART_Transmit_DMA+0x38>
 8007160:	2302      	movs	r3, #2
 8007162:	e057      	b.n	8007214 <HAL_UART_Transmit_DMA+0xe8>
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	2201      	movs	r2, #1
 8007168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800716c:	68ba      	ldr	r2, [r7, #8]
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	88fa      	ldrh	r2, [r7, #6]
 8007176:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	88fa      	ldrh	r2, [r7, #6]
 800717c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	2200      	movs	r2, #0
 8007182:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	2221      	movs	r2, #33	; 0x21
 8007188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007190:	4a22      	ldr	r2, [pc, #136]	; (800721c <HAL_UART_Transmit_DMA+0xf0>)
 8007192:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007198:	4a21      	ldr	r2, [pc, #132]	; (8007220 <HAL_UART_Transmit_DMA+0xf4>)
 800719a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071a0:	4a20      	ldr	r2, [pc, #128]	; (8007224 <HAL_UART_Transmit_DMA+0xf8>)
 80071a2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071a8:	2200      	movs	r2, #0
 80071aa:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80071ac:	f107 0308 	add.w	r3, r7, #8
 80071b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80071b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071b8:	6819      	ldr	r1, [r3, #0]
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	3304      	adds	r3, #4
 80071c0:	461a      	mov	r2, r3
 80071c2:	88fb      	ldrh	r3, [r7, #6]
 80071c4:	f7fd fba6 	bl	8004914 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80071d0:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	2200      	movs	r2, #0
 80071d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	3314      	adds	r3, #20
 80071e0:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071e2:	69bb      	ldr	r3, [r7, #24]
 80071e4:	e853 3f00 	ldrex	r3, [r3]
 80071e8:	617b      	str	r3, [r7, #20]
   return(result);
 80071ea:	697b      	ldr	r3, [r7, #20]
 80071ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	3314      	adds	r3, #20
 80071f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80071fa:	627a      	str	r2, [r7, #36]	; 0x24
 80071fc:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071fe:	6a39      	ldr	r1, [r7, #32]
 8007200:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007202:	e841 2300 	strex	r3, r2, [r1]
 8007206:	61fb      	str	r3, [r7, #28]
   return(result);
 8007208:	69fb      	ldr	r3, [r7, #28]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d1e5      	bne.n	80071da <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800720e:	2300      	movs	r3, #0
 8007210:	e000      	b.n	8007214 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8007212:	2302      	movs	r3, #2
  }
}
 8007214:	4618      	mov	r0, r3
 8007216:	3730      	adds	r7, #48	; 0x30
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}
 800721c:	080077f9 	.word	0x080077f9
 8007220:	08007893 	.word	0x08007893
 8007224:	08007a0b 	.word	0x08007a0b

08007228 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b084      	sub	sp, #16
 800722c:	af00      	add	r7, sp, #0
 800722e:	60f8      	str	r0, [r7, #12]
 8007230:	60b9      	str	r1, [r7, #8]
 8007232:	4613      	mov	r3, r2
 8007234:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800723c:	b2db      	uxtb	r3, r3
 800723e:	2b20      	cmp	r3, #32
 8007240:	d11d      	bne.n	800727e <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d002      	beq.n	800724e <HAL_UART_Receive_DMA+0x26>
 8007248:	88fb      	ldrh	r3, [r7, #6]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d101      	bne.n	8007252 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800724e:	2301      	movs	r3, #1
 8007250:	e016      	b.n	8007280 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007258:	2b01      	cmp	r3, #1
 800725a:	d101      	bne.n	8007260 <HAL_UART_Receive_DMA+0x38>
 800725c:	2302      	movs	r3, #2
 800725e:	e00f      	b.n	8007280 <HAL_UART_Receive_DMA+0x58>
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	2201      	movs	r2, #1
 8007264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	2200      	movs	r2, #0
 800726c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800726e:	88fb      	ldrh	r3, [r7, #6]
 8007270:	461a      	mov	r2, r3
 8007272:	68b9      	ldr	r1, [r7, #8]
 8007274:	68f8      	ldr	r0, [r7, #12]
 8007276:	f000 fc13 	bl	8007aa0 <UART_Start_Receive_DMA>
 800727a:	4603      	mov	r3, r0
 800727c:	e000      	b.n	8007280 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800727e:	2302      	movs	r3, #2
  }
}
 8007280:	4618      	mov	r0, r3
 8007282:	3710      	adds	r7, #16
 8007284:	46bd      	mov	sp, r7
 8007286:	bd80      	pop	{r7, pc}

08007288 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b0ba      	sub	sp, #232	; 0xe8
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	68db      	ldr	r3, [r3, #12]
 80072a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	695b      	ldr	r3, [r3, #20]
 80072aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80072ae:	2300      	movs	r3, #0
 80072b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80072b4:	2300      	movs	r3, #0
 80072b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80072ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072be:	f003 030f 	and.w	r3, r3, #15
 80072c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80072c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d10f      	bne.n	80072ee <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80072ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072d2:	f003 0320 	and.w	r3, r3, #32
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d009      	beq.n	80072ee <HAL_UART_IRQHandler+0x66>
 80072da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072de:	f003 0320 	and.w	r3, r3, #32
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d003      	beq.n	80072ee <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f000 fd7f 	bl	8007dea <UART_Receive_IT>
      return;
 80072ec:	e256      	b.n	800779c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80072ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	f000 80de 	beq.w	80074b4 <HAL_UART_IRQHandler+0x22c>
 80072f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80072fc:	f003 0301 	and.w	r3, r3, #1
 8007300:	2b00      	cmp	r3, #0
 8007302:	d106      	bne.n	8007312 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007304:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007308:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800730c:	2b00      	cmp	r3, #0
 800730e:	f000 80d1 	beq.w	80074b4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007312:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007316:	f003 0301 	and.w	r3, r3, #1
 800731a:	2b00      	cmp	r3, #0
 800731c:	d00b      	beq.n	8007336 <HAL_UART_IRQHandler+0xae>
 800731e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007322:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007326:	2b00      	cmp	r3, #0
 8007328:	d005      	beq.n	8007336 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800732e:	f043 0201 	orr.w	r2, r3, #1
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007336:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800733a:	f003 0304 	and.w	r3, r3, #4
 800733e:	2b00      	cmp	r3, #0
 8007340:	d00b      	beq.n	800735a <HAL_UART_IRQHandler+0xd2>
 8007342:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007346:	f003 0301 	and.w	r3, r3, #1
 800734a:	2b00      	cmp	r3, #0
 800734c:	d005      	beq.n	800735a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007352:	f043 0202 	orr.w	r2, r3, #2
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800735a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800735e:	f003 0302 	and.w	r3, r3, #2
 8007362:	2b00      	cmp	r3, #0
 8007364:	d00b      	beq.n	800737e <HAL_UART_IRQHandler+0xf6>
 8007366:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800736a:	f003 0301 	and.w	r3, r3, #1
 800736e:	2b00      	cmp	r3, #0
 8007370:	d005      	beq.n	800737e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007376:	f043 0204 	orr.w	r2, r3, #4
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800737e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007382:	f003 0308 	and.w	r3, r3, #8
 8007386:	2b00      	cmp	r3, #0
 8007388:	d011      	beq.n	80073ae <HAL_UART_IRQHandler+0x126>
 800738a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800738e:	f003 0320 	and.w	r3, r3, #32
 8007392:	2b00      	cmp	r3, #0
 8007394:	d105      	bne.n	80073a2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007396:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800739a:	f003 0301 	and.w	r3, r3, #1
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d005      	beq.n	80073ae <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073a6:	f043 0208 	orr.w	r2, r3, #8
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	f000 81ed 	beq.w	8007792 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80073b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073bc:	f003 0320 	and.w	r3, r3, #32
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d008      	beq.n	80073d6 <HAL_UART_IRQHandler+0x14e>
 80073c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073c8:	f003 0320 	and.w	r3, r3, #32
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d002      	beq.n	80073d6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f000 fd0a 	bl	8007dea <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	695b      	ldr	r3, [r3, #20]
 80073dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073e0:	2b40      	cmp	r3, #64	; 0x40
 80073e2:	bf0c      	ite	eq
 80073e4:	2301      	moveq	r3, #1
 80073e6:	2300      	movne	r3, #0
 80073e8:	b2db      	uxtb	r3, r3
 80073ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073f2:	f003 0308 	and.w	r3, r3, #8
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d103      	bne.n	8007402 <HAL_UART_IRQHandler+0x17a>
 80073fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d04f      	beq.n	80074a2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f000 fc12 	bl	8007c2c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	695b      	ldr	r3, [r3, #20]
 800740e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007412:	2b40      	cmp	r3, #64	; 0x40
 8007414:	d141      	bne.n	800749a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	3314      	adds	r3, #20
 800741c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007420:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007424:	e853 3f00 	ldrex	r3, [r3]
 8007428:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800742c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007430:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007434:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	3314      	adds	r3, #20
 800743e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007442:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007446:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800744a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800744e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007452:	e841 2300 	strex	r3, r2, [r1]
 8007456:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800745a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800745e:	2b00      	cmp	r3, #0
 8007460:	d1d9      	bne.n	8007416 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007466:	2b00      	cmp	r3, #0
 8007468:	d013      	beq.n	8007492 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800746e:	4a7d      	ldr	r2, [pc, #500]	; (8007664 <HAL_UART_IRQHandler+0x3dc>)
 8007470:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007476:	4618      	mov	r0, r3
 8007478:	f7fd fb14 	bl	8004aa4 <HAL_DMA_Abort_IT>
 800747c:	4603      	mov	r3, r0
 800747e:	2b00      	cmp	r3, #0
 8007480:	d016      	beq.n	80074b0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007486:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007488:	687a      	ldr	r2, [r7, #4]
 800748a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800748c:	4610      	mov	r0, r2
 800748e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007490:	e00e      	b.n	80074b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f000 f99a 	bl	80077cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007498:	e00a      	b.n	80074b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f000 f996 	bl	80077cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074a0:	e006      	b.n	80074b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f000 f992 	bl	80077cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2200      	movs	r2, #0
 80074ac:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80074ae:	e170      	b.n	8007792 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074b0:	bf00      	nop
    return;
 80074b2:	e16e      	b.n	8007792 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074b8:	2b01      	cmp	r3, #1
 80074ba:	f040 814a 	bne.w	8007752 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80074be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074c2:	f003 0310 	and.w	r3, r3, #16
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	f000 8143 	beq.w	8007752 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80074cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074d0:	f003 0310 	and.w	r3, r3, #16
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	f000 813c 	beq.w	8007752 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80074da:	2300      	movs	r3, #0
 80074dc:	60bb      	str	r3, [r7, #8]
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	60bb      	str	r3, [r7, #8]
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	685b      	ldr	r3, [r3, #4]
 80074ec:	60bb      	str	r3, [r7, #8]
 80074ee:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	695b      	ldr	r3, [r3, #20]
 80074f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074fa:	2b40      	cmp	r3, #64	; 0x40
 80074fc:	f040 80b4 	bne.w	8007668 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	685b      	ldr	r3, [r3, #4]
 8007508:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800750c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007510:	2b00      	cmp	r3, #0
 8007512:	f000 8140 	beq.w	8007796 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800751a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800751e:	429a      	cmp	r2, r3
 8007520:	f080 8139 	bcs.w	8007796 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800752a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007530:	69db      	ldr	r3, [r3, #28]
 8007532:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007536:	f000 8088 	beq.w	800764a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	330c      	adds	r3, #12
 8007540:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007544:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007548:	e853 3f00 	ldrex	r3, [r3]
 800754c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007550:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007554:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007558:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	330c      	adds	r3, #12
 8007562:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007566:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800756a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800756e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007572:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007576:	e841 2300 	strex	r3, r2, [r1]
 800757a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800757e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007582:	2b00      	cmp	r3, #0
 8007584:	d1d9      	bne.n	800753a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	3314      	adds	r3, #20
 800758c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800758e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007590:	e853 3f00 	ldrex	r3, [r3]
 8007594:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007596:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007598:	f023 0301 	bic.w	r3, r3, #1
 800759c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	3314      	adds	r3, #20
 80075a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80075aa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80075ae:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075b0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80075b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80075b6:	e841 2300 	strex	r3, r2, [r1]
 80075ba:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80075bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d1e1      	bne.n	8007586 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	3314      	adds	r3, #20
 80075c8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80075cc:	e853 3f00 	ldrex	r3, [r3]
 80075d0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80075d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80075d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	3314      	adds	r3, #20
 80075e2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80075e6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80075e8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ea:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80075ec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80075ee:	e841 2300 	strex	r3, r2, [r1]
 80075f2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80075f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d1e3      	bne.n	80075c2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2220      	movs	r2, #32
 80075fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2200      	movs	r2, #0
 8007606:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	330c      	adds	r3, #12
 800760e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007610:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007612:	e853 3f00 	ldrex	r3, [r3]
 8007616:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007618:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800761a:	f023 0310 	bic.w	r3, r3, #16
 800761e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	330c      	adds	r3, #12
 8007628:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800762c:	65ba      	str	r2, [r7, #88]	; 0x58
 800762e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007630:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007632:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007634:	e841 2300 	strex	r3, r2, [r1]
 8007638:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800763a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800763c:	2b00      	cmp	r3, #0
 800763e:	d1e3      	bne.n	8007608 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007644:	4618      	mov	r0, r3
 8007646:	f7fd f9bd 	bl	80049c4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007652:	b29b      	uxth	r3, r3
 8007654:	1ad3      	subs	r3, r2, r3
 8007656:	b29b      	uxth	r3, r3
 8007658:	4619      	mov	r1, r3
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	f000 f8c0 	bl	80077e0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007660:	e099      	b.n	8007796 <HAL_UART_IRQHandler+0x50e>
 8007662:	bf00      	nop
 8007664:	08007cf3 	.word	0x08007cf3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007670:	b29b      	uxth	r3, r3
 8007672:	1ad3      	subs	r3, r2, r3
 8007674:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800767c:	b29b      	uxth	r3, r3
 800767e:	2b00      	cmp	r3, #0
 8007680:	f000 808b 	beq.w	800779a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007684:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007688:	2b00      	cmp	r3, #0
 800768a:	f000 8086 	beq.w	800779a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	330c      	adds	r3, #12
 8007694:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007698:	e853 3f00 	ldrex	r3, [r3]
 800769c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800769e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80076a4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	330c      	adds	r3, #12
 80076ae:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80076b2:	647a      	str	r2, [r7, #68]	; 0x44
 80076b4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076b6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80076b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80076ba:	e841 2300 	strex	r3, r2, [r1]
 80076be:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80076c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d1e3      	bne.n	800768e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	3314      	adds	r3, #20
 80076cc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076d0:	e853 3f00 	ldrex	r3, [r3]
 80076d4:	623b      	str	r3, [r7, #32]
   return(result);
 80076d6:	6a3b      	ldr	r3, [r7, #32]
 80076d8:	f023 0301 	bic.w	r3, r3, #1
 80076dc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	3314      	adds	r3, #20
 80076e6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80076ea:	633a      	str	r2, [r7, #48]	; 0x30
 80076ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80076f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076f2:	e841 2300 	strex	r3, r2, [r1]
 80076f6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80076f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d1e3      	bne.n	80076c6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2220      	movs	r2, #32
 8007702:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2200      	movs	r2, #0
 800770a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	330c      	adds	r3, #12
 8007712:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007714:	693b      	ldr	r3, [r7, #16]
 8007716:	e853 3f00 	ldrex	r3, [r3]
 800771a:	60fb      	str	r3, [r7, #12]
   return(result);
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	f023 0310 	bic.w	r3, r3, #16
 8007722:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	330c      	adds	r3, #12
 800772c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007730:	61fa      	str	r2, [r7, #28]
 8007732:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007734:	69b9      	ldr	r1, [r7, #24]
 8007736:	69fa      	ldr	r2, [r7, #28]
 8007738:	e841 2300 	strex	r3, r2, [r1]
 800773c:	617b      	str	r3, [r7, #20]
   return(result);
 800773e:	697b      	ldr	r3, [r7, #20]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d1e3      	bne.n	800770c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007744:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007748:	4619      	mov	r1, r3
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	f000 f848 	bl	80077e0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007750:	e023      	b.n	800779a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007752:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800775a:	2b00      	cmp	r3, #0
 800775c:	d009      	beq.n	8007772 <HAL_UART_IRQHandler+0x4ea>
 800775e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007762:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007766:	2b00      	cmp	r3, #0
 8007768:	d003      	beq.n	8007772 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f000 fad5 	bl	8007d1a <UART_Transmit_IT>
    return;
 8007770:	e014      	b.n	800779c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007772:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007776:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800777a:	2b00      	cmp	r3, #0
 800777c:	d00e      	beq.n	800779c <HAL_UART_IRQHandler+0x514>
 800777e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007782:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007786:	2b00      	cmp	r3, #0
 8007788:	d008      	beq.n	800779c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f000 fb15 	bl	8007dba <UART_EndTransmit_IT>
    return;
 8007790:	e004      	b.n	800779c <HAL_UART_IRQHandler+0x514>
    return;
 8007792:	bf00      	nop
 8007794:	e002      	b.n	800779c <HAL_UART_IRQHandler+0x514>
      return;
 8007796:	bf00      	nop
 8007798:	e000      	b.n	800779c <HAL_UART_IRQHandler+0x514>
      return;
 800779a:	bf00      	nop
  }
}
 800779c:	37e8      	adds	r7, #232	; 0xe8
 800779e:	46bd      	mov	sp, r7
 80077a0:	bd80      	pop	{r7, pc}
 80077a2:	bf00      	nop

080077a4 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80077a4:	b480      	push	{r7}
 80077a6:	b083      	sub	sp, #12
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80077ac:	bf00      	nop
 80077ae:	370c      	adds	r7, #12
 80077b0:	46bd      	mov	sp, r7
 80077b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b6:	4770      	bx	lr

080077b8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80077b8:	b480      	push	{r7}
 80077ba:	b083      	sub	sp, #12
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80077c0:	bf00      	nop
 80077c2:	370c      	adds	r7, #12
 80077c4:	46bd      	mov	sp, r7
 80077c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ca:	4770      	bx	lr

080077cc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80077cc:	b480      	push	{r7}
 80077ce:	b083      	sub	sp, #12
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80077d4:	bf00      	nop
 80077d6:	370c      	adds	r7, #12
 80077d8:	46bd      	mov	sp, r7
 80077da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077de:	4770      	bx	lr

080077e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80077e0:	b480      	push	{r7}
 80077e2:	b083      	sub	sp, #12
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
 80077e8:	460b      	mov	r3, r1
 80077ea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80077ec:	bf00      	nop
 80077ee:	370c      	adds	r7, #12
 80077f0:	46bd      	mov	sp, r7
 80077f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f6:	4770      	bx	lr

080077f8 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b090      	sub	sp, #64	; 0x40
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007804:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007810:	2b00      	cmp	r3, #0
 8007812:	d137      	bne.n	8007884 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8007814:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007816:	2200      	movs	r2, #0
 8007818:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800781a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	3314      	adds	r3, #20
 8007820:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007824:	e853 3f00 	ldrex	r3, [r3]
 8007828:	623b      	str	r3, [r7, #32]
   return(result);
 800782a:	6a3b      	ldr	r3, [r7, #32]
 800782c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007830:	63bb      	str	r3, [r7, #56]	; 0x38
 8007832:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	3314      	adds	r3, #20
 8007838:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800783a:	633a      	str	r2, [r7, #48]	; 0x30
 800783c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800783e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007840:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007842:	e841 2300 	strex	r3, r2, [r1]
 8007846:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800784a:	2b00      	cmp	r3, #0
 800784c:	d1e5      	bne.n	800781a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800784e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	330c      	adds	r3, #12
 8007854:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007856:	693b      	ldr	r3, [r7, #16]
 8007858:	e853 3f00 	ldrex	r3, [r3]
 800785c:	60fb      	str	r3, [r7, #12]
   return(result);
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007864:	637b      	str	r3, [r7, #52]	; 0x34
 8007866:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	330c      	adds	r3, #12
 800786c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800786e:	61fa      	str	r2, [r7, #28]
 8007870:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007872:	69b9      	ldr	r1, [r7, #24]
 8007874:	69fa      	ldr	r2, [r7, #28]
 8007876:	e841 2300 	strex	r3, r2, [r1]
 800787a:	617b      	str	r3, [r7, #20]
   return(result);
 800787c:	697b      	ldr	r3, [r7, #20]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d1e5      	bne.n	800784e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007882:	e002      	b.n	800788a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8007884:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007886:	f7fb fd05 	bl	8003294 <HAL_UART_TxCpltCallback>
}
 800788a:	bf00      	nop
 800788c:	3740      	adds	r7, #64	; 0x40
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}

08007892 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007892:	b580      	push	{r7, lr}
 8007894:	b084      	sub	sp, #16
 8007896:	af00      	add	r7, sp, #0
 8007898:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800789e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80078a0:	68f8      	ldr	r0, [r7, #12]
 80078a2:	f7ff ff7f 	bl	80077a4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80078a6:	bf00      	nop
 80078a8:	3710      	adds	r7, #16
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}

080078ae <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80078ae:	b580      	push	{r7, lr}
 80078b0:	b09c      	sub	sp, #112	; 0x70
 80078b2:	af00      	add	r7, sp, #0
 80078b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078ba:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d172      	bne.n	80079b0 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80078ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078cc:	2200      	movs	r2, #0
 80078ce:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80078d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	330c      	adds	r3, #12
 80078d6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078da:	e853 3f00 	ldrex	r3, [r3]
 80078de:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80078e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80078e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80078e6:	66bb      	str	r3, [r7, #104]	; 0x68
 80078e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	330c      	adds	r3, #12
 80078ee:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80078f0:	65ba      	str	r2, [r7, #88]	; 0x58
 80078f2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078f4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80078f6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80078f8:	e841 2300 	strex	r3, r2, [r1]
 80078fc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80078fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007900:	2b00      	cmp	r3, #0
 8007902:	d1e5      	bne.n	80078d0 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007904:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	3314      	adds	r3, #20
 800790a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800790c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800790e:	e853 3f00 	ldrex	r3, [r3]
 8007912:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007914:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007916:	f023 0301 	bic.w	r3, r3, #1
 800791a:	667b      	str	r3, [r7, #100]	; 0x64
 800791c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	3314      	adds	r3, #20
 8007922:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007924:	647a      	str	r2, [r7, #68]	; 0x44
 8007926:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007928:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800792a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800792c:	e841 2300 	strex	r3, r2, [r1]
 8007930:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007932:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007934:	2b00      	cmp	r3, #0
 8007936:	d1e5      	bne.n	8007904 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007938:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	3314      	adds	r3, #20
 800793e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007942:	e853 3f00 	ldrex	r3, [r3]
 8007946:	623b      	str	r3, [r7, #32]
   return(result);
 8007948:	6a3b      	ldr	r3, [r7, #32]
 800794a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800794e:	663b      	str	r3, [r7, #96]	; 0x60
 8007950:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	3314      	adds	r3, #20
 8007956:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007958:	633a      	str	r2, [r7, #48]	; 0x30
 800795a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800795c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800795e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007960:	e841 2300 	strex	r3, r2, [r1]
 8007964:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007968:	2b00      	cmp	r3, #0
 800796a:	d1e5      	bne.n	8007938 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800796c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800796e:	2220      	movs	r2, #32
 8007970:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007974:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007978:	2b01      	cmp	r3, #1
 800797a:	d119      	bne.n	80079b0 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800797c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	330c      	adds	r3, #12
 8007982:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007984:	693b      	ldr	r3, [r7, #16]
 8007986:	e853 3f00 	ldrex	r3, [r3]
 800798a:	60fb      	str	r3, [r7, #12]
   return(result);
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	f023 0310 	bic.w	r3, r3, #16
 8007992:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007994:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	330c      	adds	r3, #12
 800799a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800799c:	61fa      	str	r2, [r7, #28]
 800799e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079a0:	69b9      	ldr	r1, [r7, #24]
 80079a2:	69fa      	ldr	r2, [r7, #28]
 80079a4:	e841 2300 	strex	r3, r2, [r1]
 80079a8:	617b      	str	r3, [r7, #20]
   return(result);
 80079aa:	697b      	ldr	r3, [r7, #20]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d1e5      	bne.n	800797c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079b4:	2b01      	cmp	r3, #1
 80079b6:	d106      	bne.n	80079c6 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80079b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079ba:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80079bc:	4619      	mov	r1, r3
 80079be:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80079c0:	f7ff ff0e 	bl	80077e0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80079c4:	e002      	b.n	80079cc <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80079c6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80079c8:	f7fb fc76 	bl	80032b8 <HAL_UART_RxCpltCallback>
}
 80079cc:	bf00      	nop
 80079ce:	3770      	adds	r7, #112	; 0x70
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bd80      	pop	{r7, pc}

080079d4 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b084      	sub	sp, #16
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079e0:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079e6:	2b01      	cmp	r3, #1
 80079e8:	d108      	bne.n	80079fc <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80079ee:	085b      	lsrs	r3, r3, #1
 80079f0:	b29b      	uxth	r3, r3
 80079f2:	4619      	mov	r1, r3
 80079f4:	68f8      	ldr	r0, [r7, #12]
 80079f6:	f7ff fef3 	bl	80077e0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80079fa:	e002      	b.n	8007a02 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80079fc:	68f8      	ldr	r0, [r7, #12]
 80079fe:	f7ff fedb 	bl	80077b8 <HAL_UART_RxHalfCpltCallback>
}
 8007a02:	bf00      	nop
 8007a04:	3710      	adds	r7, #16
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bd80      	pop	{r7, pc}

08007a0a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007a0a:	b580      	push	{r7, lr}
 8007a0c:	b084      	sub	sp, #16
 8007a0e:	af00      	add	r7, sp, #0
 8007a10:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007a12:	2300      	movs	r3, #0
 8007a14:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a1a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007a1c:	68bb      	ldr	r3, [r7, #8]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	695b      	ldr	r3, [r3, #20]
 8007a22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a26:	2b80      	cmp	r3, #128	; 0x80
 8007a28:	bf0c      	ite	eq
 8007a2a:	2301      	moveq	r3, #1
 8007a2c:	2300      	movne	r3, #0
 8007a2e:	b2db      	uxtb	r3, r3
 8007a30:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a38:	b2db      	uxtb	r3, r3
 8007a3a:	2b21      	cmp	r3, #33	; 0x21
 8007a3c:	d108      	bne.n	8007a50 <UART_DMAError+0x46>
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d005      	beq.n	8007a50 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007a44:	68bb      	ldr	r3, [r7, #8]
 8007a46:	2200      	movs	r2, #0
 8007a48:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8007a4a:	68b8      	ldr	r0, [r7, #8]
 8007a4c:	f000 f8c6 	bl	8007bdc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	695b      	ldr	r3, [r3, #20]
 8007a56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a5a:	2b40      	cmp	r3, #64	; 0x40
 8007a5c:	bf0c      	ite	eq
 8007a5e:	2301      	moveq	r3, #1
 8007a60:	2300      	movne	r3, #0
 8007a62:	b2db      	uxtb	r3, r3
 8007a64:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007a66:	68bb      	ldr	r3, [r7, #8]
 8007a68:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007a6c:	b2db      	uxtb	r3, r3
 8007a6e:	2b22      	cmp	r3, #34	; 0x22
 8007a70:	d108      	bne.n	8007a84 <UART_DMAError+0x7a>
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d005      	beq.n	8007a84 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007a7e:	68b8      	ldr	r0, [r7, #8]
 8007a80:	f000 f8d4 	bl	8007c2c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007a84:	68bb      	ldr	r3, [r7, #8]
 8007a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a88:	f043 0210 	orr.w	r2, r3, #16
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007a90:	68b8      	ldr	r0, [r7, #8]
 8007a92:	f7ff fe9b 	bl	80077cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a96:	bf00      	nop
 8007a98:	3710      	adds	r7, #16
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}
	...

08007aa0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b098      	sub	sp, #96	; 0x60
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	60f8      	str	r0, [r7, #12]
 8007aa8:	60b9      	str	r1, [r7, #8]
 8007aaa:	4613      	mov	r3, r2
 8007aac:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8007aae:	68ba      	ldr	r2, [r7, #8]
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	88fa      	ldrh	r2, [r7, #6]
 8007ab8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	2200      	movs	r2, #0
 8007abe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	2222      	movs	r2, #34	; 0x22
 8007ac4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007acc:	4a40      	ldr	r2, [pc, #256]	; (8007bd0 <UART_Start_Receive_DMA+0x130>)
 8007ace:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ad4:	4a3f      	ldr	r2, [pc, #252]	; (8007bd4 <UART_Start_Receive_DMA+0x134>)
 8007ad6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007adc:	4a3e      	ldr	r2, [pc, #248]	; (8007bd8 <UART_Start_Receive_DMA+0x138>)
 8007ade:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007ae8:	f107 0308 	add.w	r3, r7, #8
 8007aec:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	3304      	adds	r3, #4
 8007af8:	4619      	mov	r1, r3
 8007afa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007afc:	681a      	ldr	r2, [r3, #0]
 8007afe:	88fb      	ldrh	r3, [r7, #6]
 8007b00:	f7fc ff08 	bl	8004914 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007b04:	2300      	movs	r3, #0
 8007b06:	613b      	str	r3, [r7, #16]
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	613b      	str	r3, [r7, #16]
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	685b      	ldr	r3, [r3, #4]
 8007b16:	613b      	str	r3, [r7, #16]
 8007b18:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	691b      	ldr	r3, [r3, #16]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d019      	beq.n	8007b5e <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	330c      	adds	r3, #12
 8007b30:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b34:	e853 3f00 	ldrex	r3, [r3]
 8007b38:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007b3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b40:	65bb      	str	r3, [r7, #88]	; 0x58
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	330c      	adds	r3, #12
 8007b48:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007b4a:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007b4c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b4e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007b50:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007b52:	e841 2300 	strex	r3, r2, [r1]
 8007b56:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007b58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d1e5      	bne.n	8007b2a <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	3314      	adds	r3, #20
 8007b64:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b68:	e853 3f00 	ldrex	r3, [r3]
 8007b6c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b70:	f043 0301 	orr.w	r3, r3, #1
 8007b74:	657b      	str	r3, [r7, #84]	; 0x54
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	3314      	adds	r3, #20
 8007b7c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007b7e:	63ba      	str	r2, [r7, #56]	; 0x38
 8007b80:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b82:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007b84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b86:	e841 2300 	strex	r3, r2, [r1]
 8007b8a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d1e5      	bne.n	8007b5e <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	3314      	adds	r3, #20
 8007b98:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b9a:	69bb      	ldr	r3, [r7, #24]
 8007b9c:	e853 3f00 	ldrex	r3, [r3]
 8007ba0:	617b      	str	r3, [r7, #20]
   return(result);
 8007ba2:	697b      	ldr	r3, [r7, #20]
 8007ba4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ba8:	653b      	str	r3, [r7, #80]	; 0x50
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	3314      	adds	r3, #20
 8007bb0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007bb2:	627a      	str	r2, [r7, #36]	; 0x24
 8007bb4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bb6:	6a39      	ldr	r1, [r7, #32]
 8007bb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bba:	e841 2300 	strex	r3, r2, [r1]
 8007bbe:	61fb      	str	r3, [r7, #28]
   return(result);
 8007bc0:	69fb      	ldr	r3, [r7, #28]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d1e5      	bne.n	8007b92 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8007bc6:	2300      	movs	r3, #0
}
 8007bc8:	4618      	mov	r0, r3
 8007bca:	3760      	adds	r7, #96	; 0x60
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bd80      	pop	{r7, pc}
 8007bd0:	080078af 	.word	0x080078af
 8007bd4:	080079d5 	.word	0x080079d5
 8007bd8:	08007a0b 	.word	0x08007a0b

08007bdc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b089      	sub	sp, #36	; 0x24
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	330c      	adds	r3, #12
 8007bea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	e853 3f00 	ldrex	r3, [r3]
 8007bf2:	60bb      	str	r3, [r7, #8]
   return(result);
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007bfa:	61fb      	str	r3, [r7, #28]
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	330c      	adds	r3, #12
 8007c02:	69fa      	ldr	r2, [r7, #28]
 8007c04:	61ba      	str	r2, [r7, #24]
 8007c06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c08:	6979      	ldr	r1, [r7, #20]
 8007c0a:	69ba      	ldr	r2, [r7, #24]
 8007c0c:	e841 2300 	strex	r3, r2, [r1]
 8007c10:	613b      	str	r3, [r7, #16]
   return(result);
 8007c12:	693b      	ldr	r3, [r7, #16]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d1e5      	bne.n	8007be4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2220      	movs	r2, #32
 8007c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8007c20:	bf00      	nop
 8007c22:	3724      	adds	r7, #36	; 0x24
 8007c24:	46bd      	mov	sp, r7
 8007c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2a:	4770      	bx	lr

08007c2c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	b095      	sub	sp, #84	; 0x54
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	330c      	adds	r3, #12
 8007c3a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c3e:	e853 3f00 	ldrex	r3, [r3]
 8007c42:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c46:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007c4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	330c      	adds	r3, #12
 8007c52:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007c54:	643a      	str	r2, [r7, #64]	; 0x40
 8007c56:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c58:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007c5a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007c5c:	e841 2300 	strex	r3, r2, [r1]
 8007c60:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d1e5      	bne.n	8007c34 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	3314      	adds	r3, #20
 8007c6e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c70:	6a3b      	ldr	r3, [r7, #32]
 8007c72:	e853 3f00 	ldrex	r3, [r3]
 8007c76:	61fb      	str	r3, [r7, #28]
   return(result);
 8007c78:	69fb      	ldr	r3, [r7, #28]
 8007c7a:	f023 0301 	bic.w	r3, r3, #1
 8007c7e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	3314      	adds	r3, #20
 8007c86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c88:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007c8a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007c8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c90:	e841 2300 	strex	r3, r2, [r1]
 8007c94:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d1e5      	bne.n	8007c68 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ca0:	2b01      	cmp	r3, #1
 8007ca2:	d119      	bne.n	8007cd8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	330c      	adds	r3, #12
 8007caa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	e853 3f00 	ldrex	r3, [r3]
 8007cb2:	60bb      	str	r3, [r7, #8]
   return(result);
 8007cb4:	68bb      	ldr	r3, [r7, #8]
 8007cb6:	f023 0310 	bic.w	r3, r3, #16
 8007cba:	647b      	str	r3, [r7, #68]	; 0x44
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	330c      	adds	r3, #12
 8007cc2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007cc4:	61ba      	str	r2, [r7, #24]
 8007cc6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cc8:	6979      	ldr	r1, [r7, #20]
 8007cca:	69ba      	ldr	r2, [r7, #24]
 8007ccc:	e841 2300 	strex	r3, r2, [r1]
 8007cd0:	613b      	str	r3, [r7, #16]
   return(result);
 8007cd2:	693b      	ldr	r3, [r7, #16]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d1e5      	bne.n	8007ca4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2220      	movs	r2, #32
 8007cdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007ce6:	bf00      	nop
 8007ce8:	3754      	adds	r7, #84	; 0x54
 8007cea:	46bd      	mov	sp, r7
 8007cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf0:	4770      	bx	lr

08007cf2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007cf2:	b580      	push	{r7, lr}
 8007cf4:	b084      	sub	sp, #16
 8007cf6:	af00      	add	r7, sp, #0
 8007cf8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cfe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	2200      	movs	r2, #0
 8007d04:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	2200      	movs	r2, #0
 8007d0a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007d0c:	68f8      	ldr	r0, [r7, #12]
 8007d0e:	f7ff fd5d 	bl	80077cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d12:	bf00      	nop
 8007d14:	3710      	adds	r7, #16
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bd80      	pop	{r7, pc}

08007d1a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007d1a:	b480      	push	{r7}
 8007d1c:	b085      	sub	sp, #20
 8007d1e:	af00      	add	r7, sp, #0
 8007d20:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d28:	b2db      	uxtb	r3, r3
 8007d2a:	2b21      	cmp	r3, #33	; 0x21
 8007d2c:	d13e      	bne.n	8007dac <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	689b      	ldr	r3, [r3, #8]
 8007d32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d36:	d114      	bne.n	8007d62 <UART_Transmit_IT+0x48>
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	691b      	ldr	r3, [r3, #16]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d110      	bne.n	8007d62 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6a1b      	ldr	r3, [r3, #32]
 8007d44:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	881b      	ldrh	r3, [r3, #0]
 8007d4a:	461a      	mov	r2, r3
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007d54:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6a1b      	ldr	r3, [r3, #32]
 8007d5a:	1c9a      	adds	r2, r3, #2
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	621a      	str	r2, [r3, #32]
 8007d60:	e008      	b.n	8007d74 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6a1b      	ldr	r3, [r3, #32]
 8007d66:	1c59      	adds	r1, r3, #1
 8007d68:	687a      	ldr	r2, [r7, #4]
 8007d6a:	6211      	str	r1, [r2, #32]
 8007d6c:	781a      	ldrb	r2, [r3, #0]
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007d78:	b29b      	uxth	r3, r3
 8007d7a:	3b01      	subs	r3, #1
 8007d7c:	b29b      	uxth	r3, r3
 8007d7e:	687a      	ldr	r2, [r7, #4]
 8007d80:	4619      	mov	r1, r3
 8007d82:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d10f      	bne.n	8007da8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	68da      	ldr	r2, [r3, #12]
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007d96:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	68da      	ldr	r2, [r3, #12]
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007da6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007da8:	2300      	movs	r3, #0
 8007daa:	e000      	b.n	8007dae <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007dac:	2302      	movs	r3, #2
  }
}
 8007dae:	4618      	mov	r0, r3
 8007db0:	3714      	adds	r7, #20
 8007db2:	46bd      	mov	sp, r7
 8007db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db8:	4770      	bx	lr

08007dba <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007dba:	b580      	push	{r7, lr}
 8007dbc:	b082      	sub	sp, #8
 8007dbe:	af00      	add	r7, sp, #0
 8007dc0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	68da      	ldr	r2, [r3, #12]
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007dd0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2220      	movs	r2, #32
 8007dd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	f7fb fa5a 	bl	8003294 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007de0:	2300      	movs	r3, #0
}
 8007de2:	4618      	mov	r0, r3
 8007de4:	3708      	adds	r7, #8
 8007de6:	46bd      	mov	sp, r7
 8007de8:	bd80      	pop	{r7, pc}

08007dea <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007dea:	b580      	push	{r7, lr}
 8007dec:	b08c      	sub	sp, #48	; 0x30
 8007dee:	af00      	add	r7, sp, #0
 8007df0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007df8:	b2db      	uxtb	r3, r3
 8007dfa:	2b22      	cmp	r3, #34	; 0x22
 8007dfc:	f040 80ab 	bne.w	8007f56 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	689b      	ldr	r3, [r3, #8]
 8007e04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e08:	d117      	bne.n	8007e3a <UART_Receive_IT+0x50>
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	691b      	ldr	r3, [r3, #16]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d113      	bne.n	8007e3a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007e12:	2300      	movs	r3, #0
 8007e14:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e1a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	685b      	ldr	r3, [r3, #4]
 8007e22:	b29b      	uxth	r3, r3
 8007e24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e28:	b29a      	uxth	r2, r3
 8007e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e2c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e32:	1c9a      	adds	r2, r3, #2
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	629a      	str	r2, [r3, #40]	; 0x28
 8007e38:	e026      	b.n	8007e88 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007e40:	2300      	movs	r3, #0
 8007e42:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	689b      	ldr	r3, [r3, #8]
 8007e48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e4c:	d007      	beq.n	8007e5e <UART_Receive_IT+0x74>
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	689b      	ldr	r3, [r3, #8]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d10a      	bne.n	8007e6c <UART_Receive_IT+0x82>
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	691b      	ldr	r3, [r3, #16]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d106      	bne.n	8007e6c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	685b      	ldr	r3, [r3, #4]
 8007e64:	b2da      	uxtb	r2, r3
 8007e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e68:	701a      	strb	r2, [r3, #0]
 8007e6a:	e008      	b.n	8007e7e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	685b      	ldr	r3, [r3, #4]
 8007e72:	b2db      	uxtb	r3, r3
 8007e74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e78:	b2da      	uxtb	r2, r3
 8007e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e7c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e82:	1c5a      	adds	r2, r3, #1
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007e8c:	b29b      	uxth	r3, r3
 8007e8e:	3b01      	subs	r3, #1
 8007e90:	b29b      	uxth	r3, r3
 8007e92:	687a      	ldr	r2, [r7, #4]
 8007e94:	4619      	mov	r1, r3
 8007e96:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d15a      	bne.n	8007f52 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	68da      	ldr	r2, [r3, #12]
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f022 0220 	bic.w	r2, r2, #32
 8007eaa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	68da      	ldr	r2, [r3, #12]
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007eba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	695a      	ldr	r2, [r3, #20]
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f022 0201 	bic.w	r2, r2, #1
 8007eca:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2220      	movs	r2, #32
 8007ed0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ed8:	2b01      	cmp	r3, #1
 8007eda:	d135      	bne.n	8007f48 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2200      	movs	r2, #0
 8007ee0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	330c      	adds	r3, #12
 8007ee8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eea:	697b      	ldr	r3, [r7, #20]
 8007eec:	e853 3f00 	ldrex	r3, [r3]
 8007ef0:	613b      	str	r3, [r7, #16]
   return(result);
 8007ef2:	693b      	ldr	r3, [r7, #16]
 8007ef4:	f023 0310 	bic.w	r3, r3, #16
 8007ef8:	627b      	str	r3, [r7, #36]	; 0x24
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	330c      	adds	r3, #12
 8007f00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f02:	623a      	str	r2, [r7, #32]
 8007f04:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f06:	69f9      	ldr	r1, [r7, #28]
 8007f08:	6a3a      	ldr	r2, [r7, #32]
 8007f0a:	e841 2300 	strex	r3, r2, [r1]
 8007f0e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007f10:	69bb      	ldr	r3, [r7, #24]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d1e5      	bne.n	8007ee2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f003 0310 	and.w	r3, r3, #16
 8007f20:	2b10      	cmp	r3, #16
 8007f22:	d10a      	bne.n	8007f3a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007f24:	2300      	movs	r3, #0
 8007f26:	60fb      	str	r3, [r7, #12]
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	60fb      	str	r3, [r7, #12]
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	685b      	ldr	r3, [r3, #4]
 8007f36:	60fb      	str	r3, [r7, #12]
 8007f38:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007f3e:	4619      	mov	r1, r3
 8007f40:	6878      	ldr	r0, [r7, #4]
 8007f42:	f7ff fc4d 	bl	80077e0 <HAL_UARTEx_RxEventCallback>
 8007f46:	e002      	b.n	8007f4e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007f48:	6878      	ldr	r0, [r7, #4]
 8007f4a:	f7fb f9b5 	bl	80032b8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007f4e:	2300      	movs	r3, #0
 8007f50:	e002      	b.n	8007f58 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007f52:	2300      	movs	r3, #0
 8007f54:	e000      	b.n	8007f58 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007f56:	2302      	movs	r3, #2
  }
}
 8007f58:	4618      	mov	r0, r3
 8007f5a:	3730      	adds	r7, #48	; 0x30
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bd80      	pop	{r7, pc}

08007f60 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007f60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007f64:	b0c0      	sub	sp, #256	; 0x100
 8007f66:	af00      	add	r7, sp, #0
 8007f68:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007f6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	691b      	ldr	r3, [r3, #16]
 8007f74:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007f78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f7c:	68d9      	ldr	r1, [r3, #12]
 8007f7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f82:	681a      	ldr	r2, [r3, #0]
 8007f84:	ea40 0301 	orr.w	r3, r0, r1
 8007f88:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007f8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f8e:	689a      	ldr	r2, [r3, #8]
 8007f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f94:	691b      	ldr	r3, [r3, #16]
 8007f96:	431a      	orrs	r2, r3
 8007f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f9c:	695b      	ldr	r3, [r3, #20]
 8007f9e:	431a      	orrs	r2, r3
 8007fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fa4:	69db      	ldr	r3, [r3, #28]
 8007fa6:	4313      	orrs	r3, r2
 8007fa8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007fac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	68db      	ldr	r3, [r3, #12]
 8007fb4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007fb8:	f021 010c 	bic.w	r1, r1, #12
 8007fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fc0:	681a      	ldr	r2, [r3, #0]
 8007fc2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007fc6:	430b      	orrs	r3, r1
 8007fc8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007fca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	695b      	ldr	r3, [r3, #20]
 8007fd2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007fd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fda:	6999      	ldr	r1, [r3, #24]
 8007fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fe0:	681a      	ldr	r2, [r3, #0]
 8007fe2:	ea40 0301 	orr.w	r3, r0, r1
 8007fe6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fec:	681a      	ldr	r2, [r3, #0]
 8007fee:	4b8f      	ldr	r3, [pc, #572]	; (800822c <UART_SetConfig+0x2cc>)
 8007ff0:	429a      	cmp	r2, r3
 8007ff2:	d005      	beq.n	8008000 <UART_SetConfig+0xa0>
 8007ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ff8:	681a      	ldr	r2, [r3, #0]
 8007ffa:	4b8d      	ldr	r3, [pc, #564]	; (8008230 <UART_SetConfig+0x2d0>)
 8007ffc:	429a      	cmp	r2, r3
 8007ffe:	d104      	bne.n	800800a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008000:	f7fd fac0 	bl	8005584 <HAL_RCC_GetPCLK2Freq>
 8008004:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008008:	e003      	b.n	8008012 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800800a:	f7fd faa7 	bl	800555c <HAL_RCC_GetPCLK1Freq>
 800800e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008012:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008016:	69db      	ldr	r3, [r3, #28]
 8008018:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800801c:	f040 810c 	bne.w	8008238 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008020:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008024:	2200      	movs	r2, #0
 8008026:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800802a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800802e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008032:	4622      	mov	r2, r4
 8008034:	462b      	mov	r3, r5
 8008036:	1891      	adds	r1, r2, r2
 8008038:	65b9      	str	r1, [r7, #88]	; 0x58
 800803a:	415b      	adcs	r3, r3
 800803c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800803e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008042:	4621      	mov	r1, r4
 8008044:	eb12 0801 	adds.w	r8, r2, r1
 8008048:	4629      	mov	r1, r5
 800804a:	eb43 0901 	adc.w	r9, r3, r1
 800804e:	f04f 0200 	mov.w	r2, #0
 8008052:	f04f 0300 	mov.w	r3, #0
 8008056:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800805a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800805e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008062:	4690      	mov	r8, r2
 8008064:	4699      	mov	r9, r3
 8008066:	4623      	mov	r3, r4
 8008068:	eb18 0303 	adds.w	r3, r8, r3
 800806c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008070:	462b      	mov	r3, r5
 8008072:	eb49 0303 	adc.w	r3, r9, r3
 8008076:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800807a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800807e:	685b      	ldr	r3, [r3, #4]
 8008080:	2200      	movs	r2, #0
 8008082:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008086:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800808a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800808e:	460b      	mov	r3, r1
 8008090:	18db      	adds	r3, r3, r3
 8008092:	653b      	str	r3, [r7, #80]	; 0x50
 8008094:	4613      	mov	r3, r2
 8008096:	eb42 0303 	adc.w	r3, r2, r3
 800809a:	657b      	str	r3, [r7, #84]	; 0x54
 800809c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80080a0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80080a4:	f7f8 fcfe 	bl	8000aa4 <__aeabi_uldivmod>
 80080a8:	4602      	mov	r2, r0
 80080aa:	460b      	mov	r3, r1
 80080ac:	4b61      	ldr	r3, [pc, #388]	; (8008234 <UART_SetConfig+0x2d4>)
 80080ae:	fba3 2302 	umull	r2, r3, r3, r2
 80080b2:	095b      	lsrs	r3, r3, #5
 80080b4:	011c      	lsls	r4, r3, #4
 80080b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80080ba:	2200      	movs	r2, #0
 80080bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80080c0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80080c4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80080c8:	4642      	mov	r2, r8
 80080ca:	464b      	mov	r3, r9
 80080cc:	1891      	adds	r1, r2, r2
 80080ce:	64b9      	str	r1, [r7, #72]	; 0x48
 80080d0:	415b      	adcs	r3, r3
 80080d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80080d4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80080d8:	4641      	mov	r1, r8
 80080da:	eb12 0a01 	adds.w	sl, r2, r1
 80080de:	4649      	mov	r1, r9
 80080e0:	eb43 0b01 	adc.w	fp, r3, r1
 80080e4:	f04f 0200 	mov.w	r2, #0
 80080e8:	f04f 0300 	mov.w	r3, #0
 80080ec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80080f0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80080f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80080f8:	4692      	mov	sl, r2
 80080fa:	469b      	mov	fp, r3
 80080fc:	4643      	mov	r3, r8
 80080fe:	eb1a 0303 	adds.w	r3, sl, r3
 8008102:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008106:	464b      	mov	r3, r9
 8008108:	eb4b 0303 	adc.w	r3, fp, r3
 800810c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008114:	685b      	ldr	r3, [r3, #4]
 8008116:	2200      	movs	r2, #0
 8008118:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800811c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008120:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008124:	460b      	mov	r3, r1
 8008126:	18db      	adds	r3, r3, r3
 8008128:	643b      	str	r3, [r7, #64]	; 0x40
 800812a:	4613      	mov	r3, r2
 800812c:	eb42 0303 	adc.w	r3, r2, r3
 8008130:	647b      	str	r3, [r7, #68]	; 0x44
 8008132:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008136:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800813a:	f7f8 fcb3 	bl	8000aa4 <__aeabi_uldivmod>
 800813e:	4602      	mov	r2, r0
 8008140:	460b      	mov	r3, r1
 8008142:	4611      	mov	r1, r2
 8008144:	4b3b      	ldr	r3, [pc, #236]	; (8008234 <UART_SetConfig+0x2d4>)
 8008146:	fba3 2301 	umull	r2, r3, r3, r1
 800814a:	095b      	lsrs	r3, r3, #5
 800814c:	2264      	movs	r2, #100	; 0x64
 800814e:	fb02 f303 	mul.w	r3, r2, r3
 8008152:	1acb      	subs	r3, r1, r3
 8008154:	00db      	lsls	r3, r3, #3
 8008156:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800815a:	4b36      	ldr	r3, [pc, #216]	; (8008234 <UART_SetConfig+0x2d4>)
 800815c:	fba3 2302 	umull	r2, r3, r3, r2
 8008160:	095b      	lsrs	r3, r3, #5
 8008162:	005b      	lsls	r3, r3, #1
 8008164:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008168:	441c      	add	r4, r3
 800816a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800816e:	2200      	movs	r2, #0
 8008170:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008174:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008178:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800817c:	4642      	mov	r2, r8
 800817e:	464b      	mov	r3, r9
 8008180:	1891      	adds	r1, r2, r2
 8008182:	63b9      	str	r1, [r7, #56]	; 0x38
 8008184:	415b      	adcs	r3, r3
 8008186:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008188:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800818c:	4641      	mov	r1, r8
 800818e:	1851      	adds	r1, r2, r1
 8008190:	6339      	str	r1, [r7, #48]	; 0x30
 8008192:	4649      	mov	r1, r9
 8008194:	414b      	adcs	r3, r1
 8008196:	637b      	str	r3, [r7, #52]	; 0x34
 8008198:	f04f 0200 	mov.w	r2, #0
 800819c:	f04f 0300 	mov.w	r3, #0
 80081a0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80081a4:	4659      	mov	r1, fp
 80081a6:	00cb      	lsls	r3, r1, #3
 80081a8:	4651      	mov	r1, sl
 80081aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80081ae:	4651      	mov	r1, sl
 80081b0:	00ca      	lsls	r2, r1, #3
 80081b2:	4610      	mov	r0, r2
 80081b4:	4619      	mov	r1, r3
 80081b6:	4603      	mov	r3, r0
 80081b8:	4642      	mov	r2, r8
 80081ba:	189b      	adds	r3, r3, r2
 80081bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80081c0:	464b      	mov	r3, r9
 80081c2:	460a      	mov	r2, r1
 80081c4:	eb42 0303 	adc.w	r3, r2, r3
 80081c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80081cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081d0:	685b      	ldr	r3, [r3, #4]
 80081d2:	2200      	movs	r2, #0
 80081d4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80081d8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80081dc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80081e0:	460b      	mov	r3, r1
 80081e2:	18db      	adds	r3, r3, r3
 80081e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80081e6:	4613      	mov	r3, r2
 80081e8:	eb42 0303 	adc.w	r3, r2, r3
 80081ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80081ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80081f2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80081f6:	f7f8 fc55 	bl	8000aa4 <__aeabi_uldivmod>
 80081fa:	4602      	mov	r2, r0
 80081fc:	460b      	mov	r3, r1
 80081fe:	4b0d      	ldr	r3, [pc, #52]	; (8008234 <UART_SetConfig+0x2d4>)
 8008200:	fba3 1302 	umull	r1, r3, r3, r2
 8008204:	095b      	lsrs	r3, r3, #5
 8008206:	2164      	movs	r1, #100	; 0x64
 8008208:	fb01 f303 	mul.w	r3, r1, r3
 800820c:	1ad3      	subs	r3, r2, r3
 800820e:	00db      	lsls	r3, r3, #3
 8008210:	3332      	adds	r3, #50	; 0x32
 8008212:	4a08      	ldr	r2, [pc, #32]	; (8008234 <UART_SetConfig+0x2d4>)
 8008214:	fba2 2303 	umull	r2, r3, r2, r3
 8008218:	095b      	lsrs	r3, r3, #5
 800821a:	f003 0207 	and.w	r2, r3, #7
 800821e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	4422      	add	r2, r4
 8008226:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008228:	e106      	b.n	8008438 <UART_SetConfig+0x4d8>
 800822a:	bf00      	nop
 800822c:	40011000 	.word	0x40011000
 8008230:	40011400 	.word	0x40011400
 8008234:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008238:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800823c:	2200      	movs	r2, #0
 800823e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008242:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008246:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800824a:	4642      	mov	r2, r8
 800824c:	464b      	mov	r3, r9
 800824e:	1891      	adds	r1, r2, r2
 8008250:	6239      	str	r1, [r7, #32]
 8008252:	415b      	adcs	r3, r3
 8008254:	627b      	str	r3, [r7, #36]	; 0x24
 8008256:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800825a:	4641      	mov	r1, r8
 800825c:	1854      	adds	r4, r2, r1
 800825e:	4649      	mov	r1, r9
 8008260:	eb43 0501 	adc.w	r5, r3, r1
 8008264:	f04f 0200 	mov.w	r2, #0
 8008268:	f04f 0300 	mov.w	r3, #0
 800826c:	00eb      	lsls	r3, r5, #3
 800826e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008272:	00e2      	lsls	r2, r4, #3
 8008274:	4614      	mov	r4, r2
 8008276:	461d      	mov	r5, r3
 8008278:	4643      	mov	r3, r8
 800827a:	18e3      	adds	r3, r4, r3
 800827c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008280:	464b      	mov	r3, r9
 8008282:	eb45 0303 	adc.w	r3, r5, r3
 8008286:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800828a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800828e:	685b      	ldr	r3, [r3, #4]
 8008290:	2200      	movs	r2, #0
 8008292:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008296:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800829a:	f04f 0200 	mov.w	r2, #0
 800829e:	f04f 0300 	mov.w	r3, #0
 80082a2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80082a6:	4629      	mov	r1, r5
 80082a8:	008b      	lsls	r3, r1, #2
 80082aa:	4621      	mov	r1, r4
 80082ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80082b0:	4621      	mov	r1, r4
 80082b2:	008a      	lsls	r2, r1, #2
 80082b4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80082b8:	f7f8 fbf4 	bl	8000aa4 <__aeabi_uldivmod>
 80082bc:	4602      	mov	r2, r0
 80082be:	460b      	mov	r3, r1
 80082c0:	4b60      	ldr	r3, [pc, #384]	; (8008444 <UART_SetConfig+0x4e4>)
 80082c2:	fba3 2302 	umull	r2, r3, r3, r2
 80082c6:	095b      	lsrs	r3, r3, #5
 80082c8:	011c      	lsls	r4, r3, #4
 80082ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80082ce:	2200      	movs	r2, #0
 80082d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80082d4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80082d8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80082dc:	4642      	mov	r2, r8
 80082de:	464b      	mov	r3, r9
 80082e0:	1891      	adds	r1, r2, r2
 80082e2:	61b9      	str	r1, [r7, #24]
 80082e4:	415b      	adcs	r3, r3
 80082e6:	61fb      	str	r3, [r7, #28]
 80082e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80082ec:	4641      	mov	r1, r8
 80082ee:	1851      	adds	r1, r2, r1
 80082f0:	6139      	str	r1, [r7, #16]
 80082f2:	4649      	mov	r1, r9
 80082f4:	414b      	adcs	r3, r1
 80082f6:	617b      	str	r3, [r7, #20]
 80082f8:	f04f 0200 	mov.w	r2, #0
 80082fc:	f04f 0300 	mov.w	r3, #0
 8008300:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008304:	4659      	mov	r1, fp
 8008306:	00cb      	lsls	r3, r1, #3
 8008308:	4651      	mov	r1, sl
 800830a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800830e:	4651      	mov	r1, sl
 8008310:	00ca      	lsls	r2, r1, #3
 8008312:	4610      	mov	r0, r2
 8008314:	4619      	mov	r1, r3
 8008316:	4603      	mov	r3, r0
 8008318:	4642      	mov	r2, r8
 800831a:	189b      	adds	r3, r3, r2
 800831c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008320:	464b      	mov	r3, r9
 8008322:	460a      	mov	r2, r1
 8008324:	eb42 0303 	adc.w	r3, r2, r3
 8008328:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800832c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008330:	685b      	ldr	r3, [r3, #4]
 8008332:	2200      	movs	r2, #0
 8008334:	67bb      	str	r3, [r7, #120]	; 0x78
 8008336:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008338:	f04f 0200 	mov.w	r2, #0
 800833c:	f04f 0300 	mov.w	r3, #0
 8008340:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008344:	4649      	mov	r1, r9
 8008346:	008b      	lsls	r3, r1, #2
 8008348:	4641      	mov	r1, r8
 800834a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800834e:	4641      	mov	r1, r8
 8008350:	008a      	lsls	r2, r1, #2
 8008352:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008356:	f7f8 fba5 	bl	8000aa4 <__aeabi_uldivmod>
 800835a:	4602      	mov	r2, r0
 800835c:	460b      	mov	r3, r1
 800835e:	4611      	mov	r1, r2
 8008360:	4b38      	ldr	r3, [pc, #224]	; (8008444 <UART_SetConfig+0x4e4>)
 8008362:	fba3 2301 	umull	r2, r3, r3, r1
 8008366:	095b      	lsrs	r3, r3, #5
 8008368:	2264      	movs	r2, #100	; 0x64
 800836a:	fb02 f303 	mul.w	r3, r2, r3
 800836e:	1acb      	subs	r3, r1, r3
 8008370:	011b      	lsls	r3, r3, #4
 8008372:	3332      	adds	r3, #50	; 0x32
 8008374:	4a33      	ldr	r2, [pc, #204]	; (8008444 <UART_SetConfig+0x4e4>)
 8008376:	fba2 2303 	umull	r2, r3, r2, r3
 800837a:	095b      	lsrs	r3, r3, #5
 800837c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008380:	441c      	add	r4, r3
 8008382:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008386:	2200      	movs	r2, #0
 8008388:	673b      	str	r3, [r7, #112]	; 0x70
 800838a:	677a      	str	r2, [r7, #116]	; 0x74
 800838c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008390:	4642      	mov	r2, r8
 8008392:	464b      	mov	r3, r9
 8008394:	1891      	adds	r1, r2, r2
 8008396:	60b9      	str	r1, [r7, #8]
 8008398:	415b      	adcs	r3, r3
 800839a:	60fb      	str	r3, [r7, #12]
 800839c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80083a0:	4641      	mov	r1, r8
 80083a2:	1851      	adds	r1, r2, r1
 80083a4:	6039      	str	r1, [r7, #0]
 80083a6:	4649      	mov	r1, r9
 80083a8:	414b      	adcs	r3, r1
 80083aa:	607b      	str	r3, [r7, #4]
 80083ac:	f04f 0200 	mov.w	r2, #0
 80083b0:	f04f 0300 	mov.w	r3, #0
 80083b4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80083b8:	4659      	mov	r1, fp
 80083ba:	00cb      	lsls	r3, r1, #3
 80083bc:	4651      	mov	r1, sl
 80083be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80083c2:	4651      	mov	r1, sl
 80083c4:	00ca      	lsls	r2, r1, #3
 80083c6:	4610      	mov	r0, r2
 80083c8:	4619      	mov	r1, r3
 80083ca:	4603      	mov	r3, r0
 80083cc:	4642      	mov	r2, r8
 80083ce:	189b      	adds	r3, r3, r2
 80083d0:	66bb      	str	r3, [r7, #104]	; 0x68
 80083d2:	464b      	mov	r3, r9
 80083d4:	460a      	mov	r2, r1
 80083d6:	eb42 0303 	adc.w	r3, r2, r3
 80083da:	66fb      	str	r3, [r7, #108]	; 0x6c
 80083dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083e0:	685b      	ldr	r3, [r3, #4]
 80083e2:	2200      	movs	r2, #0
 80083e4:	663b      	str	r3, [r7, #96]	; 0x60
 80083e6:	667a      	str	r2, [r7, #100]	; 0x64
 80083e8:	f04f 0200 	mov.w	r2, #0
 80083ec:	f04f 0300 	mov.w	r3, #0
 80083f0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80083f4:	4649      	mov	r1, r9
 80083f6:	008b      	lsls	r3, r1, #2
 80083f8:	4641      	mov	r1, r8
 80083fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80083fe:	4641      	mov	r1, r8
 8008400:	008a      	lsls	r2, r1, #2
 8008402:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008406:	f7f8 fb4d 	bl	8000aa4 <__aeabi_uldivmod>
 800840a:	4602      	mov	r2, r0
 800840c:	460b      	mov	r3, r1
 800840e:	4b0d      	ldr	r3, [pc, #52]	; (8008444 <UART_SetConfig+0x4e4>)
 8008410:	fba3 1302 	umull	r1, r3, r3, r2
 8008414:	095b      	lsrs	r3, r3, #5
 8008416:	2164      	movs	r1, #100	; 0x64
 8008418:	fb01 f303 	mul.w	r3, r1, r3
 800841c:	1ad3      	subs	r3, r2, r3
 800841e:	011b      	lsls	r3, r3, #4
 8008420:	3332      	adds	r3, #50	; 0x32
 8008422:	4a08      	ldr	r2, [pc, #32]	; (8008444 <UART_SetConfig+0x4e4>)
 8008424:	fba2 2303 	umull	r2, r3, r2, r3
 8008428:	095b      	lsrs	r3, r3, #5
 800842a:	f003 020f 	and.w	r2, r3, #15
 800842e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	4422      	add	r2, r4
 8008436:	609a      	str	r2, [r3, #8]
}
 8008438:	bf00      	nop
 800843a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800843e:	46bd      	mov	sp, r7
 8008440:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008444:	51eb851f 	.word	0x51eb851f

08008448 <realloc>:
 8008448:	4b02      	ldr	r3, [pc, #8]	; (8008454 <realloc+0xc>)
 800844a:	460a      	mov	r2, r1
 800844c:	4601      	mov	r1, r0
 800844e:	6818      	ldr	r0, [r3, #0]
 8008450:	f000 b802 	b.w	8008458 <_realloc_r>
 8008454:	20000058 	.word	0x20000058

08008458 <_realloc_r>:
 8008458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800845c:	4680      	mov	r8, r0
 800845e:	4614      	mov	r4, r2
 8008460:	460e      	mov	r6, r1
 8008462:	b921      	cbnz	r1, 800846e <_realloc_r+0x16>
 8008464:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008468:	4611      	mov	r1, r2
 800846a:	f000 b8d3 	b.w	8008614 <_malloc_r>
 800846e:	b92a      	cbnz	r2, 800847c <_realloc_r+0x24>
 8008470:	f000 f864 	bl	800853c <_free_r>
 8008474:	4625      	mov	r5, r4
 8008476:	4628      	mov	r0, r5
 8008478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800847c:	f000 f956 	bl	800872c <_malloc_usable_size_r>
 8008480:	4284      	cmp	r4, r0
 8008482:	4607      	mov	r7, r0
 8008484:	d802      	bhi.n	800848c <_realloc_r+0x34>
 8008486:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800848a:	d812      	bhi.n	80084b2 <_realloc_r+0x5a>
 800848c:	4621      	mov	r1, r4
 800848e:	4640      	mov	r0, r8
 8008490:	f000 f8c0 	bl	8008614 <_malloc_r>
 8008494:	4605      	mov	r5, r0
 8008496:	2800      	cmp	r0, #0
 8008498:	d0ed      	beq.n	8008476 <_realloc_r+0x1e>
 800849a:	42bc      	cmp	r4, r7
 800849c:	4622      	mov	r2, r4
 800849e:	4631      	mov	r1, r6
 80084a0:	bf28      	it	cs
 80084a2:	463a      	movcs	r2, r7
 80084a4:	f000 f83c 	bl	8008520 <memcpy>
 80084a8:	4631      	mov	r1, r6
 80084aa:	4640      	mov	r0, r8
 80084ac:	f000 f846 	bl	800853c <_free_r>
 80084b0:	e7e1      	b.n	8008476 <_realloc_r+0x1e>
 80084b2:	4635      	mov	r5, r6
 80084b4:	e7df      	b.n	8008476 <_realloc_r+0x1e>

080084b6 <memset>:
 80084b6:	4402      	add	r2, r0
 80084b8:	4603      	mov	r3, r0
 80084ba:	4293      	cmp	r3, r2
 80084bc:	d100      	bne.n	80084c0 <memset+0xa>
 80084be:	4770      	bx	lr
 80084c0:	f803 1b01 	strb.w	r1, [r3], #1
 80084c4:	e7f9      	b.n	80084ba <memset+0x4>
	...

080084c8 <__errno>:
 80084c8:	4b01      	ldr	r3, [pc, #4]	; (80084d0 <__errno+0x8>)
 80084ca:	6818      	ldr	r0, [r3, #0]
 80084cc:	4770      	bx	lr
 80084ce:	bf00      	nop
 80084d0:	20000058 	.word	0x20000058

080084d4 <__libc_init_array>:
 80084d4:	b570      	push	{r4, r5, r6, lr}
 80084d6:	4d0d      	ldr	r5, [pc, #52]	; (800850c <__libc_init_array+0x38>)
 80084d8:	4c0d      	ldr	r4, [pc, #52]	; (8008510 <__libc_init_array+0x3c>)
 80084da:	1b64      	subs	r4, r4, r5
 80084dc:	10a4      	asrs	r4, r4, #2
 80084de:	2600      	movs	r6, #0
 80084e0:	42a6      	cmp	r6, r4
 80084e2:	d109      	bne.n	80084f8 <__libc_init_array+0x24>
 80084e4:	4d0b      	ldr	r5, [pc, #44]	; (8008514 <__libc_init_array+0x40>)
 80084e6:	4c0c      	ldr	r4, [pc, #48]	; (8008518 <__libc_init_array+0x44>)
 80084e8:	f000 f938 	bl	800875c <_init>
 80084ec:	1b64      	subs	r4, r4, r5
 80084ee:	10a4      	asrs	r4, r4, #2
 80084f0:	2600      	movs	r6, #0
 80084f2:	42a6      	cmp	r6, r4
 80084f4:	d105      	bne.n	8008502 <__libc_init_array+0x2e>
 80084f6:	bd70      	pop	{r4, r5, r6, pc}
 80084f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80084fc:	4798      	blx	r3
 80084fe:	3601      	adds	r6, #1
 8008500:	e7ee      	b.n	80084e0 <__libc_init_array+0xc>
 8008502:	f855 3b04 	ldr.w	r3, [r5], #4
 8008506:	4798      	blx	r3
 8008508:	3601      	adds	r6, #1
 800850a:	e7f2      	b.n	80084f2 <__libc_init_array+0x1e>
 800850c:	08008aa0 	.word	0x08008aa0
 8008510:	08008aa0 	.word	0x08008aa0
 8008514:	08008aa0 	.word	0x08008aa0
 8008518:	08008aa8 	.word	0x08008aa8

0800851c <__retarget_lock_acquire_recursive>:
 800851c:	4770      	bx	lr

0800851e <__retarget_lock_release_recursive>:
 800851e:	4770      	bx	lr

08008520 <memcpy>:
 8008520:	440a      	add	r2, r1
 8008522:	4291      	cmp	r1, r2
 8008524:	f100 33ff 	add.w	r3, r0, #4294967295
 8008528:	d100      	bne.n	800852c <memcpy+0xc>
 800852a:	4770      	bx	lr
 800852c:	b510      	push	{r4, lr}
 800852e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008532:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008536:	4291      	cmp	r1, r2
 8008538:	d1f9      	bne.n	800852e <memcpy+0xe>
 800853a:	bd10      	pop	{r4, pc}

0800853c <_free_r>:
 800853c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800853e:	2900      	cmp	r1, #0
 8008540:	d044      	beq.n	80085cc <_free_r+0x90>
 8008542:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008546:	9001      	str	r0, [sp, #4]
 8008548:	2b00      	cmp	r3, #0
 800854a:	f1a1 0404 	sub.w	r4, r1, #4
 800854e:	bfb8      	it	lt
 8008550:	18e4      	addlt	r4, r4, r3
 8008552:	f000 f8df 	bl	8008714 <__malloc_lock>
 8008556:	4a1e      	ldr	r2, [pc, #120]	; (80085d0 <_free_r+0x94>)
 8008558:	9801      	ldr	r0, [sp, #4]
 800855a:	6813      	ldr	r3, [r2, #0]
 800855c:	b933      	cbnz	r3, 800856c <_free_r+0x30>
 800855e:	6063      	str	r3, [r4, #4]
 8008560:	6014      	str	r4, [r2, #0]
 8008562:	b003      	add	sp, #12
 8008564:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008568:	f000 b8da 	b.w	8008720 <__malloc_unlock>
 800856c:	42a3      	cmp	r3, r4
 800856e:	d908      	bls.n	8008582 <_free_r+0x46>
 8008570:	6825      	ldr	r5, [r4, #0]
 8008572:	1961      	adds	r1, r4, r5
 8008574:	428b      	cmp	r3, r1
 8008576:	bf01      	itttt	eq
 8008578:	6819      	ldreq	r1, [r3, #0]
 800857a:	685b      	ldreq	r3, [r3, #4]
 800857c:	1949      	addeq	r1, r1, r5
 800857e:	6021      	streq	r1, [r4, #0]
 8008580:	e7ed      	b.n	800855e <_free_r+0x22>
 8008582:	461a      	mov	r2, r3
 8008584:	685b      	ldr	r3, [r3, #4]
 8008586:	b10b      	cbz	r3, 800858c <_free_r+0x50>
 8008588:	42a3      	cmp	r3, r4
 800858a:	d9fa      	bls.n	8008582 <_free_r+0x46>
 800858c:	6811      	ldr	r1, [r2, #0]
 800858e:	1855      	adds	r5, r2, r1
 8008590:	42a5      	cmp	r5, r4
 8008592:	d10b      	bne.n	80085ac <_free_r+0x70>
 8008594:	6824      	ldr	r4, [r4, #0]
 8008596:	4421      	add	r1, r4
 8008598:	1854      	adds	r4, r2, r1
 800859a:	42a3      	cmp	r3, r4
 800859c:	6011      	str	r1, [r2, #0]
 800859e:	d1e0      	bne.n	8008562 <_free_r+0x26>
 80085a0:	681c      	ldr	r4, [r3, #0]
 80085a2:	685b      	ldr	r3, [r3, #4]
 80085a4:	6053      	str	r3, [r2, #4]
 80085a6:	440c      	add	r4, r1
 80085a8:	6014      	str	r4, [r2, #0]
 80085aa:	e7da      	b.n	8008562 <_free_r+0x26>
 80085ac:	d902      	bls.n	80085b4 <_free_r+0x78>
 80085ae:	230c      	movs	r3, #12
 80085b0:	6003      	str	r3, [r0, #0]
 80085b2:	e7d6      	b.n	8008562 <_free_r+0x26>
 80085b4:	6825      	ldr	r5, [r4, #0]
 80085b6:	1961      	adds	r1, r4, r5
 80085b8:	428b      	cmp	r3, r1
 80085ba:	bf04      	itt	eq
 80085bc:	6819      	ldreq	r1, [r3, #0]
 80085be:	685b      	ldreq	r3, [r3, #4]
 80085c0:	6063      	str	r3, [r4, #4]
 80085c2:	bf04      	itt	eq
 80085c4:	1949      	addeq	r1, r1, r5
 80085c6:	6021      	streq	r1, [r4, #0]
 80085c8:	6054      	str	r4, [r2, #4]
 80085ca:	e7ca      	b.n	8008562 <_free_r+0x26>
 80085cc:	b003      	add	sp, #12
 80085ce:	bd30      	pop	{r4, r5, pc}
 80085d0:	20000d70 	.word	0x20000d70

080085d4 <sbrk_aligned>:
 80085d4:	b570      	push	{r4, r5, r6, lr}
 80085d6:	4e0e      	ldr	r6, [pc, #56]	; (8008610 <sbrk_aligned+0x3c>)
 80085d8:	460c      	mov	r4, r1
 80085da:	6831      	ldr	r1, [r6, #0]
 80085dc:	4605      	mov	r5, r0
 80085de:	b911      	cbnz	r1, 80085e6 <sbrk_aligned+0x12>
 80085e0:	f000 f8ac 	bl	800873c <_sbrk_r>
 80085e4:	6030      	str	r0, [r6, #0]
 80085e6:	4621      	mov	r1, r4
 80085e8:	4628      	mov	r0, r5
 80085ea:	f000 f8a7 	bl	800873c <_sbrk_r>
 80085ee:	1c43      	adds	r3, r0, #1
 80085f0:	d00a      	beq.n	8008608 <sbrk_aligned+0x34>
 80085f2:	1cc4      	adds	r4, r0, #3
 80085f4:	f024 0403 	bic.w	r4, r4, #3
 80085f8:	42a0      	cmp	r0, r4
 80085fa:	d007      	beq.n	800860c <sbrk_aligned+0x38>
 80085fc:	1a21      	subs	r1, r4, r0
 80085fe:	4628      	mov	r0, r5
 8008600:	f000 f89c 	bl	800873c <_sbrk_r>
 8008604:	3001      	adds	r0, #1
 8008606:	d101      	bne.n	800860c <sbrk_aligned+0x38>
 8008608:	f04f 34ff 	mov.w	r4, #4294967295
 800860c:	4620      	mov	r0, r4
 800860e:	bd70      	pop	{r4, r5, r6, pc}
 8008610:	20000d74 	.word	0x20000d74

08008614 <_malloc_r>:
 8008614:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008618:	1ccd      	adds	r5, r1, #3
 800861a:	f025 0503 	bic.w	r5, r5, #3
 800861e:	3508      	adds	r5, #8
 8008620:	2d0c      	cmp	r5, #12
 8008622:	bf38      	it	cc
 8008624:	250c      	movcc	r5, #12
 8008626:	2d00      	cmp	r5, #0
 8008628:	4607      	mov	r7, r0
 800862a:	db01      	blt.n	8008630 <_malloc_r+0x1c>
 800862c:	42a9      	cmp	r1, r5
 800862e:	d905      	bls.n	800863c <_malloc_r+0x28>
 8008630:	230c      	movs	r3, #12
 8008632:	603b      	str	r3, [r7, #0]
 8008634:	2600      	movs	r6, #0
 8008636:	4630      	mov	r0, r6
 8008638:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800863c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008710 <_malloc_r+0xfc>
 8008640:	f000 f868 	bl	8008714 <__malloc_lock>
 8008644:	f8d8 3000 	ldr.w	r3, [r8]
 8008648:	461c      	mov	r4, r3
 800864a:	bb5c      	cbnz	r4, 80086a4 <_malloc_r+0x90>
 800864c:	4629      	mov	r1, r5
 800864e:	4638      	mov	r0, r7
 8008650:	f7ff ffc0 	bl	80085d4 <sbrk_aligned>
 8008654:	1c43      	adds	r3, r0, #1
 8008656:	4604      	mov	r4, r0
 8008658:	d155      	bne.n	8008706 <_malloc_r+0xf2>
 800865a:	f8d8 4000 	ldr.w	r4, [r8]
 800865e:	4626      	mov	r6, r4
 8008660:	2e00      	cmp	r6, #0
 8008662:	d145      	bne.n	80086f0 <_malloc_r+0xdc>
 8008664:	2c00      	cmp	r4, #0
 8008666:	d048      	beq.n	80086fa <_malloc_r+0xe6>
 8008668:	6823      	ldr	r3, [r4, #0]
 800866a:	4631      	mov	r1, r6
 800866c:	4638      	mov	r0, r7
 800866e:	eb04 0903 	add.w	r9, r4, r3
 8008672:	f000 f863 	bl	800873c <_sbrk_r>
 8008676:	4581      	cmp	r9, r0
 8008678:	d13f      	bne.n	80086fa <_malloc_r+0xe6>
 800867a:	6821      	ldr	r1, [r4, #0]
 800867c:	1a6d      	subs	r5, r5, r1
 800867e:	4629      	mov	r1, r5
 8008680:	4638      	mov	r0, r7
 8008682:	f7ff ffa7 	bl	80085d4 <sbrk_aligned>
 8008686:	3001      	adds	r0, #1
 8008688:	d037      	beq.n	80086fa <_malloc_r+0xe6>
 800868a:	6823      	ldr	r3, [r4, #0]
 800868c:	442b      	add	r3, r5
 800868e:	6023      	str	r3, [r4, #0]
 8008690:	f8d8 3000 	ldr.w	r3, [r8]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d038      	beq.n	800870a <_malloc_r+0xf6>
 8008698:	685a      	ldr	r2, [r3, #4]
 800869a:	42a2      	cmp	r2, r4
 800869c:	d12b      	bne.n	80086f6 <_malloc_r+0xe2>
 800869e:	2200      	movs	r2, #0
 80086a0:	605a      	str	r2, [r3, #4]
 80086a2:	e00f      	b.n	80086c4 <_malloc_r+0xb0>
 80086a4:	6822      	ldr	r2, [r4, #0]
 80086a6:	1b52      	subs	r2, r2, r5
 80086a8:	d41f      	bmi.n	80086ea <_malloc_r+0xd6>
 80086aa:	2a0b      	cmp	r2, #11
 80086ac:	d917      	bls.n	80086de <_malloc_r+0xca>
 80086ae:	1961      	adds	r1, r4, r5
 80086b0:	42a3      	cmp	r3, r4
 80086b2:	6025      	str	r5, [r4, #0]
 80086b4:	bf18      	it	ne
 80086b6:	6059      	strne	r1, [r3, #4]
 80086b8:	6863      	ldr	r3, [r4, #4]
 80086ba:	bf08      	it	eq
 80086bc:	f8c8 1000 	streq.w	r1, [r8]
 80086c0:	5162      	str	r2, [r4, r5]
 80086c2:	604b      	str	r3, [r1, #4]
 80086c4:	4638      	mov	r0, r7
 80086c6:	f104 060b 	add.w	r6, r4, #11
 80086ca:	f000 f829 	bl	8008720 <__malloc_unlock>
 80086ce:	f026 0607 	bic.w	r6, r6, #7
 80086d2:	1d23      	adds	r3, r4, #4
 80086d4:	1af2      	subs	r2, r6, r3
 80086d6:	d0ae      	beq.n	8008636 <_malloc_r+0x22>
 80086d8:	1b9b      	subs	r3, r3, r6
 80086da:	50a3      	str	r3, [r4, r2]
 80086dc:	e7ab      	b.n	8008636 <_malloc_r+0x22>
 80086de:	42a3      	cmp	r3, r4
 80086e0:	6862      	ldr	r2, [r4, #4]
 80086e2:	d1dd      	bne.n	80086a0 <_malloc_r+0x8c>
 80086e4:	f8c8 2000 	str.w	r2, [r8]
 80086e8:	e7ec      	b.n	80086c4 <_malloc_r+0xb0>
 80086ea:	4623      	mov	r3, r4
 80086ec:	6864      	ldr	r4, [r4, #4]
 80086ee:	e7ac      	b.n	800864a <_malloc_r+0x36>
 80086f0:	4634      	mov	r4, r6
 80086f2:	6876      	ldr	r6, [r6, #4]
 80086f4:	e7b4      	b.n	8008660 <_malloc_r+0x4c>
 80086f6:	4613      	mov	r3, r2
 80086f8:	e7cc      	b.n	8008694 <_malloc_r+0x80>
 80086fa:	230c      	movs	r3, #12
 80086fc:	603b      	str	r3, [r7, #0]
 80086fe:	4638      	mov	r0, r7
 8008700:	f000 f80e 	bl	8008720 <__malloc_unlock>
 8008704:	e797      	b.n	8008636 <_malloc_r+0x22>
 8008706:	6025      	str	r5, [r4, #0]
 8008708:	e7dc      	b.n	80086c4 <_malloc_r+0xb0>
 800870a:	605b      	str	r3, [r3, #4]
 800870c:	deff      	udf	#255	; 0xff
 800870e:	bf00      	nop
 8008710:	20000d70 	.word	0x20000d70

08008714 <__malloc_lock>:
 8008714:	4801      	ldr	r0, [pc, #4]	; (800871c <__malloc_lock+0x8>)
 8008716:	f7ff bf01 	b.w	800851c <__retarget_lock_acquire_recursive>
 800871a:	bf00      	nop
 800871c:	20000d6c 	.word	0x20000d6c

08008720 <__malloc_unlock>:
 8008720:	4801      	ldr	r0, [pc, #4]	; (8008728 <__malloc_unlock+0x8>)
 8008722:	f7ff befc 	b.w	800851e <__retarget_lock_release_recursive>
 8008726:	bf00      	nop
 8008728:	20000d6c 	.word	0x20000d6c

0800872c <_malloc_usable_size_r>:
 800872c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008730:	1f18      	subs	r0, r3, #4
 8008732:	2b00      	cmp	r3, #0
 8008734:	bfbc      	itt	lt
 8008736:	580b      	ldrlt	r3, [r1, r0]
 8008738:	18c0      	addlt	r0, r0, r3
 800873a:	4770      	bx	lr

0800873c <_sbrk_r>:
 800873c:	b538      	push	{r3, r4, r5, lr}
 800873e:	4d06      	ldr	r5, [pc, #24]	; (8008758 <_sbrk_r+0x1c>)
 8008740:	2300      	movs	r3, #0
 8008742:	4604      	mov	r4, r0
 8008744:	4608      	mov	r0, r1
 8008746:	602b      	str	r3, [r5, #0]
 8008748:	f7fb fdf0 	bl	800432c <_sbrk>
 800874c:	1c43      	adds	r3, r0, #1
 800874e:	d102      	bne.n	8008756 <_sbrk_r+0x1a>
 8008750:	682b      	ldr	r3, [r5, #0]
 8008752:	b103      	cbz	r3, 8008756 <_sbrk_r+0x1a>
 8008754:	6023      	str	r3, [r4, #0]
 8008756:	bd38      	pop	{r3, r4, r5, pc}
 8008758:	20000d68 	.word	0x20000d68

0800875c <_init>:
 800875c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800875e:	bf00      	nop
 8008760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008762:	bc08      	pop	{r3}
 8008764:	469e      	mov	lr, r3
 8008766:	4770      	bx	lr

08008768 <_fini>:
 8008768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800876a:	bf00      	nop
 800876c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800876e:	bc08      	pop	{r3}
 8008770:	469e      	mov	lr, r3
 8008772:	4770      	bx	lr
