
wheelencodercpp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007afc  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000324  08007cc4  08007cc4  00017cc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007fe8  08007fe8  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08007fe8  08007fe8  00017fe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007ff0  08007ff0  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08007ff0  08007ff0  00017ff0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ff8  08007ff8  00017ff8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08007ffc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000cd0  20000060  08008058  00020060  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000d30  08008058  00020d30  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000158e1  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a8f  00000000  00000000  000359b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fa0  00000000  00000000  00038440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c41  00000000  00000000  000393e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000232d5  00000000  00000000  0003a021  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013bfd  00000000  00000000  0005d2f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d742f  00000000  00000000  00070ef3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004754  00000000  00000000  00148324  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  0014ca78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000060 	.word	0x20000060
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08007cac 	.word	0x08007cac

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000064 	.word	0x20000064
 8000204:	08007cac 	.word	0x08007cac

08000208 <strlen>:
 8000208:	4603      	mov	r3, r0
 800020a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020e:	2a00      	cmp	r2, #0
 8000210:	d1fb      	bne.n	800020a <strlen+0x2>
 8000212:	1a18      	subs	r0, r3, r0
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2iz>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009bc:	d215      	bcs.n	80009ea <__aeabi_d2iz+0x36>
 80009be:	d511      	bpl.n	80009e4 <__aeabi_d2iz+0x30>
 80009c0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d912      	bls.n	80009f0 <__aeabi_d2iz+0x3c>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009da:	fa23 f002 	lsr.w	r0, r3, r2
 80009de:	bf18      	it	ne
 80009e0:	4240      	negne	r0, r0
 80009e2:	4770      	bx	lr
 80009e4:	f04f 0000 	mov.w	r0, #0
 80009e8:	4770      	bx	lr
 80009ea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ee:	d105      	bne.n	80009fc <__aeabi_d2iz+0x48>
 80009f0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009f4:	bf08      	it	eq
 80009f6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009fa:	4770      	bx	lr
 80009fc:	f04f 0000 	mov.w	r0, #0
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_d2f>:
 8000a04:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a08:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a0c:	bf24      	itt	cs
 8000a0e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a12:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a16:	d90d      	bls.n	8000a34 <__aeabi_d2f+0x30>
 8000a18:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a1c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a20:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a24:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a28:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a2c:	bf08      	it	eq
 8000a2e:	f020 0001 	biceq.w	r0, r0, #1
 8000a32:	4770      	bx	lr
 8000a34:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a38:	d121      	bne.n	8000a7e <__aeabi_d2f+0x7a>
 8000a3a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a3e:	bfbc      	itt	lt
 8000a40:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a44:	4770      	bxlt	lr
 8000a46:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a4a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a4e:	f1c2 0218 	rsb	r2, r2, #24
 8000a52:	f1c2 0c20 	rsb	ip, r2, #32
 8000a56:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a5a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a5e:	bf18      	it	ne
 8000a60:	f040 0001 	orrne.w	r0, r0, #1
 8000a64:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a68:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a6c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a70:	ea40 000c 	orr.w	r0, r0, ip
 8000a74:	fa23 f302 	lsr.w	r3, r3, r2
 8000a78:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a7c:	e7cc      	b.n	8000a18 <__aeabi_d2f+0x14>
 8000a7e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a82:	d107      	bne.n	8000a94 <__aeabi_d2f+0x90>
 8000a84:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a88:	bf1e      	ittt	ne
 8000a8a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a8e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a92:	4770      	bxne	lr
 8000a94:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_uldivmod>:
 8000aa4:	b953      	cbnz	r3, 8000abc <__aeabi_uldivmod+0x18>
 8000aa6:	b94a      	cbnz	r2, 8000abc <__aeabi_uldivmod+0x18>
 8000aa8:	2900      	cmp	r1, #0
 8000aaa:	bf08      	it	eq
 8000aac:	2800      	cmpeq	r0, #0
 8000aae:	bf1c      	itt	ne
 8000ab0:	f04f 31ff 	movne.w	r1, #4294967295
 8000ab4:	f04f 30ff 	movne.w	r0, #4294967295
 8000ab8:	f000 b970 	b.w	8000d9c <__aeabi_idiv0>
 8000abc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ac0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ac4:	f000 f806 	bl	8000ad4 <__udivmoddi4>
 8000ac8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000acc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad0:	b004      	add	sp, #16
 8000ad2:	4770      	bx	lr

08000ad4 <__udivmoddi4>:
 8000ad4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ad8:	9e08      	ldr	r6, [sp, #32]
 8000ada:	460d      	mov	r5, r1
 8000adc:	4604      	mov	r4, r0
 8000ade:	460f      	mov	r7, r1
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d14a      	bne.n	8000b7a <__udivmoddi4+0xa6>
 8000ae4:	428a      	cmp	r2, r1
 8000ae6:	4694      	mov	ip, r2
 8000ae8:	d965      	bls.n	8000bb6 <__udivmoddi4+0xe2>
 8000aea:	fab2 f382 	clz	r3, r2
 8000aee:	b143      	cbz	r3, 8000b02 <__udivmoddi4+0x2e>
 8000af0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000af4:	f1c3 0220 	rsb	r2, r3, #32
 8000af8:	409f      	lsls	r7, r3
 8000afa:	fa20 f202 	lsr.w	r2, r0, r2
 8000afe:	4317      	orrs	r7, r2
 8000b00:	409c      	lsls	r4, r3
 8000b02:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b06:	fa1f f58c 	uxth.w	r5, ip
 8000b0a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000b0e:	0c22      	lsrs	r2, r4, #16
 8000b10:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b14:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b18:	fb01 f005 	mul.w	r0, r1, r5
 8000b1c:	4290      	cmp	r0, r2
 8000b1e:	d90a      	bls.n	8000b36 <__udivmoddi4+0x62>
 8000b20:	eb1c 0202 	adds.w	r2, ip, r2
 8000b24:	f101 37ff 	add.w	r7, r1, #4294967295
 8000b28:	f080 811c 	bcs.w	8000d64 <__udivmoddi4+0x290>
 8000b2c:	4290      	cmp	r0, r2
 8000b2e:	f240 8119 	bls.w	8000d64 <__udivmoddi4+0x290>
 8000b32:	3902      	subs	r1, #2
 8000b34:	4462      	add	r2, ip
 8000b36:	1a12      	subs	r2, r2, r0
 8000b38:	b2a4      	uxth	r4, r4
 8000b3a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b3e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b42:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b46:	fb00 f505 	mul.w	r5, r0, r5
 8000b4a:	42a5      	cmp	r5, r4
 8000b4c:	d90a      	bls.n	8000b64 <__udivmoddi4+0x90>
 8000b4e:	eb1c 0404 	adds.w	r4, ip, r4
 8000b52:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b56:	f080 8107 	bcs.w	8000d68 <__udivmoddi4+0x294>
 8000b5a:	42a5      	cmp	r5, r4
 8000b5c:	f240 8104 	bls.w	8000d68 <__udivmoddi4+0x294>
 8000b60:	4464      	add	r4, ip
 8000b62:	3802      	subs	r0, #2
 8000b64:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b68:	1b64      	subs	r4, r4, r5
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	b11e      	cbz	r6, 8000b76 <__udivmoddi4+0xa2>
 8000b6e:	40dc      	lsrs	r4, r3
 8000b70:	2300      	movs	r3, #0
 8000b72:	e9c6 4300 	strd	r4, r3, [r6]
 8000b76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b7a:	428b      	cmp	r3, r1
 8000b7c:	d908      	bls.n	8000b90 <__udivmoddi4+0xbc>
 8000b7e:	2e00      	cmp	r6, #0
 8000b80:	f000 80ed 	beq.w	8000d5e <__udivmoddi4+0x28a>
 8000b84:	2100      	movs	r1, #0
 8000b86:	e9c6 0500 	strd	r0, r5, [r6]
 8000b8a:	4608      	mov	r0, r1
 8000b8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b90:	fab3 f183 	clz	r1, r3
 8000b94:	2900      	cmp	r1, #0
 8000b96:	d149      	bne.n	8000c2c <__udivmoddi4+0x158>
 8000b98:	42ab      	cmp	r3, r5
 8000b9a:	d302      	bcc.n	8000ba2 <__udivmoddi4+0xce>
 8000b9c:	4282      	cmp	r2, r0
 8000b9e:	f200 80f8 	bhi.w	8000d92 <__udivmoddi4+0x2be>
 8000ba2:	1a84      	subs	r4, r0, r2
 8000ba4:	eb65 0203 	sbc.w	r2, r5, r3
 8000ba8:	2001      	movs	r0, #1
 8000baa:	4617      	mov	r7, r2
 8000bac:	2e00      	cmp	r6, #0
 8000bae:	d0e2      	beq.n	8000b76 <__udivmoddi4+0xa2>
 8000bb0:	e9c6 4700 	strd	r4, r7, [r6]
 8000bb4:	e7df      	b.n	8000b76 <__udivmoddi4+0xa2>
 8000bb6:	b902      	cbnz	r2, 8000bba <__udivmoddi4+0xe6>
 8000bb8:	deff      	udf	#255	; 0xff
 8000bba:	fab2 f382 	clz	r3, r2
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	f040 8090 	bne.w	8000ce4 <__udivmoddi4+0x210>
 8000bc4:	1a8a      	subs	r2, r1, r2
 8000bc6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bca:	fa1f fe8c 	uxth.w	lr, ip
 8000bce:	2101      	movs	r1, #1
 8000bd0:	fbb2 f5f7 	udiv	r5, r2, r7
 8000bd4:	fb07 2015 	mls	r0, r7, r5, r2
 8000bd8:	0c22      	lsrs	r2, r4, #16
 8000bda:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000bde:	fb0e f005 	mul.w	r0, lr, r5
 8000be2:	4290      	cmp	r0, r2
 8000be4:	d908      	bls.n	8000bf8 <__udivmoddi4+0x124>
 8000be6:	eb1c 0202 	adds.w	r2, ip, r2
 8000bea:	f105 38ff 	add.w	r8, r5, #4294967295
 8000bee:	d202      	bcs.n	8000bf6 <__udivmoddi4+0x122>
 8000bf0:	4290      	cmp	r0, r2
 8000bf2:	f200 80cb 	bhi.w	8000d8c <__udivmoddi4+0x2b8>
 8000bf6:	4645      	mov	r5, r8
 8000bf8:	1a12      	subs	r2, r2, r0
 8000bfa:	b2a4      	uxth	r4, r4
 8000bfc:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c00:	fb07 2210 	mls	r2, r7, r0, r2
 8000c04:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c08:	fb0e fe00 	mul.w	lr, lr, r0
 8000c0c:	45a6      	cmp	lr, r4
 8000c0e:	d908      	bls.n	8000c22 <__udivmoddi4+0x14e>
 8000c10:	eb1c 0404 	adds.w	r4, ip, r4
 8000c14:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c18:	d202      	bcs.n	8000c20 <__udivmoddi4+0x14c>
 8000c1a:	45a6      	cmp	lr, r4
 8000c1c:	f200 80bb 	bhi.w	8000d96 <__udivmoddi4+0x2c2>
 8000c20:	4610      	mov	r0, r2
 8000c22:	eba4 040e 	sub.w	r4, r4, lr
 8000c26:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c2a:	e79f      	b.n	8000b6c <__udivmoddi4+0x98>
 8000c2c:	f1c1 0720 	rsb	r7, r1, #32
 8000c30:	408b      	lsls	r3, r1
 8000c32:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c36:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c3a:	fa05 f401 	lsl.w	r4, r5, r1
 8000c3e:	fa20 f307 	lsr.w	r3, r0, r7
 8000c42:	40fd      	lsrs	r5, r7
 8000c44:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c48:	4323      	orrs	r3, r4
 8000c4a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c4e:	fa1f fe8c 	uxth.w	lr, ip
 8000c52:	fb09 5518 	mls	r5, r9, r8, r5
 8000c56:	0c1c      	lsrs	r4, r3, #16
 8000c58:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c5c:	fb08 f50e 	mul.w	r5, r8, lr
 8000c60:	42a5      	cmp	r5, r4
 8000c62:	fa02 f201 	lsl.w	r2, r2, r1
 8000c66:	fa00 f001 	lsl.w	r0, r0, r1
 8000c6a:	d90b      	bls.n	8000c84 <__udivmoddi4+0x1b0>
 8000c6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c70:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c74:	f080 8088 	bcs.w	8000d88 <__udivmoddi4+0x2b4>
 8000c78:	42a5      	cmp	r5, r4
 8000c7a:	f240 8085 	bls.w	8000d88 <__udivmoddi4+0x2b4>
 8000c7e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c82:	4464      	add	r4, ip
 8000c84:	1b64      	subs	r4, r4, r5
 8000c86:	b29d      	uxth	r5, r3
 8000c88:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c8c:	fb09 4413 	mls	r4, r9, r3, r4
 8000c90:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c94:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c98:	45a6      	cmp	lr, r4
 8000c9a:	d908      	bls.n	8000cae <__udivmoddi4+0x1da>
 8000c9c:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ca4:	d26c      	bcs.n	8000d80 <__udivmoddi4+0x2ac>
 8000ca6:	45a6      	cmp	lr, r4
 8000ca8:	d96a      	bls.n	8000d80 <__udivmoddi4+0x2ac>
 8000caa:	3b02      	subs	r3, #2
 8000cac:	4464      	add	r4, ip
 8000cae:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cb2:	fba3 9502 	umull	r9, r5, r3, r2
 8000cb6:	eba4 040e 	sub.w	r4, r4, lr
 8000cba:	42ac      	cmp	r4, r5
 8000cbc:	46c8      	mov	r8, r9
 8000cbe:	46ae      	mov	lr, r5
 8000cc0:	d356      	bcc.n	8000d70 <__udivmoddi4+0x29c>
 8000cc2:	d053      	beq.n	8000d6c <__udivmoddi4+0x298>
 8000cc4:	b156      	cbz	r6, 8000cdc <__udivmoddi4+0x208>
 8000cc6:	ebb0 0208 	subs.w	r2, r0, r8
 8000cca:	eb64 040e 	sbc.w	r4, r4, lr
 8000cce:	fa04 f707 	lsl.w	r7, r4, r7
 8000cd2:	40ca      	lsrs	r2, r1
 8000cd4:	40cc      	lsrs	r4, r1
 8000cd6:	4317      	orrs	r7, r2
 8000cd8:	e9c6 7400 	strd	r7, r4, [r6]
 8000cdc:	4618      	mov	r0, r3
 8000cde:	2100      	movs	r1, #0
 8000ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce4:	f1c3 0120 	rsb	r1, r3, #32
 8000ce8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cec:	fa20 f201 	lsr.w	r2, r0, r1
 8000cf0:	fa25 f101 	lsr.w	r1, r5, r1
 8000cf4:	409d      	lsls	r5, r3
 8000cf6:	432a      	orrs	r2, r5
 8000cf8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfc:	fa1f fe8c 	uxth.w	lr, ip
 8000d00:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d04:	fb07 1510 	mls	r5, r7, r0, r1
 8000d08:	0c11      	lsrs	r1, r2, #16
 8000d0a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d0e:	fb00 f50e 	mul.w	r5, r0, lr
 8000d12:	428d      	cmp	r5, r1
 8000d14:	fa04 f403 	lsl.w	r4, r4, r3
 8000d18:	d908      	bls.n	8000d2c <__udivmoddi4+0x258>
 8000d1a:	eb1c 0101 	adds.w	r1, ip, r1
 8000d1e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d22:	d22f      	bcs.n	8000d84 <__udivmoddi4+0x2b0>
 8000d24:	428d      	cmp	r5, r1
 8000d26:	d92d      	bls.n	8000d84 <__udivmoddi4+0x2b0>
 8000d28:	3802      	subs	r0, #2
 8000d2a:	4461      	add	r1, ip
 8000d2c:	1b49      	subs	r1, r1, r5
 8000d2e:	b292      	uxth	r2, r2
 8000d30:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d34:	fb07 1115 	mls	r1, r7, r5, r1
 8000d38:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d3c:	fb05 f10e 	mul.w	r1, r5, lr
 8000d40:	4291      	cmp	r1, r2
 8000d42:	d908      	bls.n	8000d56 <__udivmoddi4+0x282>
 8000d44:	eb1c 0202 	adds.w	r2, ip, r2
 8000d48:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d4c:	d216      	bcs.n	8000d7c <__udivmoddi4+0x2a8>
 8000d4e:	4291      	cmp	r1, r2
 8000d50:	d914      	bls.n	8000d7c <__udivmoddi4+0x2a8>
 8000d52:	3d02      	subs	r5, #2
 8000d54:	4462      	add	r2, ip
 8000d56:	1a52      	subs	r2, r2, r1
 8000d58:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d5c:	e738      	b.n	8000bd0 <__udivmoddi4+0xfc>
 8000d5e:	4631      	mov	r1, r6
 8000d60:	4630      	mov	r0, r6
 8000d62:	e708      	b.n	8000b76 <__udivmoddi4+0xa2>
 8000d64:	4639      	mov	r1, r7
 8000d66:	e6e6      	b.n	8000b36 <__udivmoddi4+0x62>
 8000d68:	4610      	mov	r0, r2
 8000d6a:	e6fb      	b.n	8000b64 <__udivmoddi4+0x90>
 8000d6c:	4548      	cmp	r0, r9
 8000d6e:	d2a9      	bcs.n	8000cc4 <__udivmoddi4+0x1f0>
 8000d70:	ebb9 0802 	subs.w	r8, r9, r2
 8000d74:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d78:	3b01      	subs	r3, #1
 8000d7a:	e7a3      	b.n	8000cc4 <__udivmoddi4+0x1f0>
 8000d7c:	4645      	mov	r5, r8
 8000d7e:	e7ea      	b.n	8000d56 <__udivmoddi4+0x282>
 8000d80:	462b      	mov	r3, r5
 8000d82:	e794      	b.n	8000cae <__udivmoddi4+0x1da>
 8000d84:	4640      	mov	r0, r8
 8000d86:	e7d1      	b.n	8000d2c <__udivmoddi4+0x258>
 8000d88:	46d0      	mov	r8, sl
 8000d8a:	e77b      	b.n	8000c84 <__udivmoddi4+0x1b0>
 8000d8c:	3d02      	subs	r5, #2
 8000d8e:	4462      	add	r2, ip
 8000d90:	e732      	b.n	8000bf8 <__udivmoddi4+0x124>
 8000d92:	4608      	mov	r0, r1
 8000d94:	e70a      	b.n	8000bac <__udivmoddi4+0xd8>
 8000d96:	4464      	add	r4, ip
 8000d98:	3802      	subs	r0, #2
 8000d9a:	e742      	b.n	8000c22 <__udivmoddi4+0x14e>

08000d9c <__aeabi_idiv0>:
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop

08000da0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000da4:	f003 fa10 	bl	80041c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000da8:	f000 f812 	bl	8000dd0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dac:	f000 f91a 	bl	8000fe4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000db0:	f000 f8f0 	bl	8000f94 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000db4:	f000 f8c4 	bl	8000f40 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000db8:	f000 f876 	bl	8000ea8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000dbc:	4803      	ldr	r0, [pc, #12]	; (8000dcc <main+0x2c>)
 8000dbe:	f004 ffdd 	bl	8005d7c <HAL_TIM_Base_Start_IT>
  setup();
 8000dc2:	f002 f9eb 	bl	800319c <setup>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  loop();
 8000dc6:	f002 fa05 	bl	80031d4 <loop>
 8000dca:	e7fc      	b.n	8000dc6 <main+0x26>
 8000dcc:	2000007c 	.word	0x2000007c

08000dd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b094      	sub	sp, #80	; 0x50
 8000dd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dd6:	f107 031c 	add.w	r3, r7, #28
 8000dda:	2234      	movs	r2, #52	; 0x34
 8000ddc:	2100      	movs	r1, #0
 8000dde:	4618      	mov	r0, r3
 8000de0:	f006 fe11 	bl	8007a06 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000de4:	f107 0308 	add.w	r3, r7, #8
 8000de8:	2200      	movs	r2, #0
 8000dea:	601a      	str	r2, [r3, #0]
 8000dec:	605a      	str	r2, [r3, #4]
 8000dee:	609a      	str	r2, [r3, #8]
 8000df0:	60da      	str	r2, [r3, #12]
 8000df2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000df4:	2300      	movs	r3, #0
 8000df6:	607b      	str	r3, [r7, #4]
 8000df8:	4b29      	ldr	r3, [pc, #164]	; (8000ea0 <SystemClock_Config+0xd0>)
 8000dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfc:	4a28      	ldr	r2, [pc, #160]	; (8000ea0 <SystemClock_Config+0xd0>)
 8000dfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e02:	6413      	str	r3, [r2, #64]	; 0x40
 8000e04:	4b26      	ldr	r3, [pc, #152]	; (8000ea0 <SystemClock_Config+0xd0>)
 8000e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e0c:	607b      	str	r3, [r7, #4]
 8000e0e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000e10:	2300      	movs	r3, #0
 8000e12:	603b      	str	r3, [r7, #0]
 8000e14:	4b23      	ldr	r3, [pc, #140]	; (8000ea4 <SystemClock_Config+0xd4>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000e1c:	4a21      	ldr	r2, [pc, #132]	; (8000ea4 <SystemClock_Config+0xd4>)
 8000e1e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e22:	6013      	str	r3, [r2, #0]
 8000e24:	4b1f      	ldr	r3, [pc, #124]	; (8000ea4 <SystemClock_Config+0xd4>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e2c:	603b      	str	r3, [r7, #0]
 8000e2e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e30:	2301      	movs	r3, #1
 8000e32:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e34:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e38:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e3e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e42:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000e44:	2304      	movs	r3, #4
 8000e46:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 90;
 8000e48:	235a      	movs	r3, #90	; 0x5a
 8000e4a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000e50:	2302      	movs	r3, #2
 8000e52:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e54:	2302      	movs	r3, #2
 8000e56:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e58:	f107 031c 	add.w	r3, r7, #28
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f004 fc9f 	bl	80057a0 <HAL_RCC_OscConfig>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000e68:	f000 f964 	bl	8001134 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e6c:	230f      	movs	r3, #15
 8000e6e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e70:	2302      	movs	r3, #2
 8000e72:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e74:	2300      	movs	r3, #0
 8000e76:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e7c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e82:	f107 0308 	add.w	r3, r7, #8
 8000e86:	2102      	movs	r1, #2
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f004 f93f 	bl	800510c <HAL_RCC_ClockConfig>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000e94:	f000 f94e 	bl	8001134 <Error_Handler>
  }
}
 8000e98:	bf00      	nop
 8000e9a:	3750      	adds	r7, #80	; 0x50
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	40023800 	.word	0x40023800
 8000ea4:	40007000 	.word	0x40007000

08000ea8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b086      	sub	sp, #24
 8000eac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000eae:	f107 0308 	add.w	r3, r7, #8
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	601a      	str	r2, [r3, #0]
 8000eb6:	605a      	str	r2, [r3, #4]
 8000eb8:	609a      	str	r2, [r3, #8]
 8000eba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ebc:	463b      	mov	r3, r7
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	601a      	str	r2, [r3, #0]
 8000ec2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ec4:	4b1d      	ldr	r3, [pc, #116]	; (8000f3c <MX_TIM2_Init+0x94>)
 8000ec6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000eca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 60000;
 8000ecc:	4b1b      	ldr	r3, [pc, #108]	; (8000f3c <MX_TIM2_Init+0x94>)
 8000ece:	f64e 2260 	movw	r2, #60000	; 0xea60
 8000ed2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ed4:	4b19      	ldr	r3, [pc, #100]	; (8000f3c <MX_TIM2_Init+0x94>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 150;
 8000eda:	4b18      	ldr	r3, [pc, #96]	; (8000f3c <MX_TIM2_Init+0x94>)
 8000edc:	2296      	movs	r2, #150	; 0x96
 8000ede:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ee0:	4b16      	ldr	r3, [pc, #88]	; (8000f3c <MX_TIM2_Init+0x94>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ee6:	4b15      	ldr	r3, [pc, #84]	; (8000f3c <MX_TIM2_Init+0x94>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000eec:	4813      	ldr	r0, [pc, #76]	; (8000f3c <MX_TIM2_Init+0x94>)
 8000eee:	f004 fef5 	bl	8005cdc <HAL_TIM_Base_Init>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000ef8:	f000 f91c 	bl	8001134 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000efc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f00:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f02:	f107 0308 	add.w	r3, r7, #8
 8000f06:	4619      	mov	r1, r3
 8000f08:	480c      	ldr	r0, [pc, #48]	; (8000f3c <MX_TIM2_Init+0x94>)
 8000f0a:	f005 f8af 	bl	800606c <HAL_TIM_ConfigClockSource>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000f14:	f000 f90e 	bl	8001134 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f20:	463b      	mov	r3, r7
 8000f22:	4619      	mov	r1, r3
 8000f24:	4805      	ldr	r0, [pc, #20]	; (8000f3c <MX_TIM2_Init+0x94>)
 8000f26:	f005 facb 	bl	80064c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000f30:	f000 f900 	bl	8001134 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f34:	bf00      	nop
 8000f36:	3718      	adds	r7, #24
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	2000007c 	.word	0x2000007c

08000f40 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f44:	4b11      	ldr	r3, [pc, #68]	; (8000f8c <MX_USART2_UART_Init+0x4c>)
 8000f46:	4a12      	ldr	r2, [pc, #72]	; (8000f90 <MX_USART2_UART_Init+0x50>)
 8000f48:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 8000f4a:	4b10      	ldr	r3, [pc, #64]	; (8000f8c <MX_USART2_UART_Init+0x4c>)
 8000f4c:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8000f50:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f52:	4b0e      	ldr	r3, [pc, #56]	; (8000f8c <MX_USART2_UART_Init+0x4c>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f58:	4b0c      	ldr	r3, [pc, #48]	; (8000f8c <MX_USART2_UART_Init+0x4c>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f5e:	4b0b      	ldr	r3, [pc, #44]	; (8000f8c <MX_USART2_UART_Init+0x4c>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f64:	4b09      	ldr	r3, [pc, #36]	; (8000f8c <MX_USART2_UART_Init+0x4c>)
 8000f66:	220c      	movs	r2, #12
 8000f68:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f6a:	4b08      	ldr	r3, [pc, #32]	; (8000f8c <MX_USART2_UART_Init+0x4c>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f70:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <MX_USART2_UART_Init+0x4c>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f76:	4805      	ldr	r0, [pc, #20]	; (8000f8c <MX_USART2_UART_Init+0x4c>)
 8000f78:	f005 fb32 	bl	80065e0 <HAL_UART_Init>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f82:	f000 f8d7 	bl	8001134 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	200000c4 	.word	0x200000c4
 8000f90:	40004400 	.word	0x40004400

08000f94 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	607b      	str	r3, [r7, #4]
 8000f9e:	4b10      	ldr	r3, [pc, #64]	; (8000fe0 <MX_DMA_Init+0x4c>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	4a0f      	ldr	r2, [pc, #60]	; (8000fe0 <MX_DMA_Init+0x4c>)
 8000fa4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000fa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000faa:	4b0d      	ldr	r3, [pc, #52]	; (8000fe0 <MX_DMA_Init+0x4c>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fb2:	607b      	str	r3, [r7, #4]
 8000fb4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	2100      	movs	r1, #0
 8000fba:	2010      	movs	r0, #16
 8000fbc:	f003 fa75 	bl	80044aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000fc0:	2010      	movs	r0, #16
 8000fc2:	f003 fa8e 	bl	80044e2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	2100      	movs	r1, #0
 8000fca:	2011      	movs	r0, #17
 8000fcc:	f003 fa6d 	bl	80044aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000fd0:	2011      	movs	r0, #17
 8000fd2:	f003 fa86 	bl	80044e2 <HAL_NVIC_EnableIRQ>

}
 8000fd6:	bf00      	nop
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	40023800 	.word	0x40023800

08000fe4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b08a      	sub	sp, #40	; 0x28
 8000fe8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fea:	f107 0314 	add.w	r3, r7, #20
 8000fee:	2200      	movs	r2, #0
 8000ff0:	601a      	str	r2, [r3, #0]
 8000ff2:	605a      	str	r2, [r3, #4]
 8000ff4:	609a      	str	r2, [r3, #8]
 8000ff6:	60da      	str	r2, [r3, #12]
 8000ff8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	613b      	str	r3, [r7, #16]
 8000ffe:	4b49      	ldr	r3, [pc, #292]	; (8001124 <MX_GPIO_Init+0x140>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	4a48      	ldr	r2, [pc, #288]	; (8001124 <MX_GPIO_Init+0x140>)
 8001004:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001008:	6313      	str	r3, [r2, #48]	; 0x30
 800100a:	4b46      	ldr	r3, [pc, #280]	; (8001124 <MX_GPIO_Init+0x140>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001012:	613b      	str	r3, [r7, #16]
 8001014:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001016:	2300      	movs	r3, #0
 8001018:	60fb      	str	r3, [r7, #12]
 800101a:	4b42      	ldr	r3, [pc, #264]	; (8001124 <MX_GPIO_Init+0x140>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101e:	4a41      	ldr	r2, [pc, #260]	; (8001124 <MX_GPIO_Init+0x140>)
 8001020:	f043 0301 	orr.w	r3, r3, #1
 8001024:	6313      	str	r3, [r2, #48]	; 0x30
 8001026:	4b3f      	ldr	r3, [pc, #252]	; (8001124 <MX_GPIO_Init+0x140>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	f003 0301 	and.w	r3, r3, #1
 800102e:	60fb      	str	r3, [r7, #12]
 8001030:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001032:	2300      	movs	r3, #0
 8001034:	60bb      	str	r3, [r7, #8]
 8001036:	4b3b      	ldr	r3, [pc, #236]	; (8001124 <MX_GPIO_Init+0x140>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103a:	4a3a      	ldr	r2, [pc, #232]	; (8001124 <MX_GPIO_Init+0x140>)
 800103c:	f043 0302 	orr.w	r3, r3, #2
 8001040:	6313      	str	r3, [r2, #48]	; 0x30
 8001042:	4b38      	ldr	r3, [pc, #224]	; (8001124 <MX_GPIO_Init+0x140>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	f003 0302 	and.w	r3, r3, #2
 800104a:	60bb      	str	r3, [r7, #8]
 800104c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800104e:	2300      	movs	r3, #0
 8001050:	607b      	str	r3, [r7, #4]
 8001052:	4b34      	ldr	r3, [pc, #208]	; (8001124 <MX_GPIO_Init+0x140>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001056:	4a33      	ldr	r2, [pc, #204]	; (8001124 <MX_GPIO_Init+0x140>)
 8001058:	f043 0304 	orr.w	r3, r3, #4
 800105c:	6313      	str	r3, [r2, #48]	; 0x30
 800105e:	4b31      	ldr	r3, [pc, #196]	; (8001124 <MX_GPIO_Init+0x140>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001062:	f003 0304 	and.w	r3, r3, #4
 8001066:	607b      	str	r3, [r7, #4]
 8001068:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800106a:	2200      	movs	r2, #0
 800106c:	2120      	movs	r1, #32
 800106e:	482e      	ldr	r0, [pc, #184]	; (8001128 <MX_GPIO_Init+0x144>)
 8001070:	f004 f800 	bl	8005074 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001074:	2320      	movs	r3, #32
 8001076:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001078:	2301      	movs	r3, #1
 800107a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107c:	2300      	movs	r3, #0
 800107e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001080:	2300      	movs	r3, #0
 8001082:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001084:	f107 0314 	add.w	r3, r7, #20
 8001088:	4619      	mov	r1, r3
 800108a:	4827      	ldr	r0, [pc, #156]	; (8001128 <MX_GPIO_Init+0x144>)
 800108c:	f003 fe46 	bl	8004d1c <HAL_GPIO_Init>

  /*Configure GPIO pin : LeftEncoderA_Pin */
  GPIO_InitStruct.Pin = LeftEncoderA_Pin;
 8001090:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001094:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001096:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800109a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800109c:	2301      	movs	r3, #1
 800109e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LeftEncoderA_GPIO_Port, &GPIO_InitStruct);
 80010a0:	f107 0314 	add.w	r3, r7, #20
 80010a4:	4619      	mov	r1, r3
 80010a6:	4821      	ldr	r0, [pc, #132]	; (800112c <MX_GPIO_Init+0x148>)
 80010a8:	f003 fe38 	bl	8004d1c <HAL_GPIO_Init>

  /*Configure GPIO pin : RightEncoderB_Pin */
  GPIO_InitStruct.Pin = RightEncoderB_Pin;
 80010ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010b2:	2300      	movs	r3, #0
 80010b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010b6:	2301      	movs	r3, #1
 80010b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RightEncoderB_GPIO_Port, &GPIO_InitStruct);
 80010ba:	f107 0314 	add.w	r3, r7, #20
 80010be:	4619      	mov	r1, r3
 80010c0:	481a      	ldr	r0, [pc, #104]	; (800112c <MX_GPIO_Init+0x148>)
 80010c2:	f003 fe2b 	bl	8004d1c <HAL_GPIO_Init>

  /*Configure GPIO pin : RightEncoderA_Pin */
  GPIO_InitStruct.Pin = RightEncoderA_Pin;
 80010c6:	2340      	movs	r3, #64	; 0x40
 80010c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80010ca:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80010ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010d0:	2301      	movs	r3, #1
 80010d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RightEncoderA_GPIO_Port, &GPIO_InitStruct);
 80010d4:	f107 0314 	add.w	r3, r7, #20
 80010d8:	4619      	mov	r1, r3
 80010da:	4815      	ldr	r0, [pc, #84]	; (8001130 <MX_GPIO_Init+0x14c>)
 80010dc:	f003 fe1e 	bl	8004d1c <HAL_GPIO_Init>

  /*Configure GPIO pin : LeftEncoderB_Pin */
  GPIO_InitStruct.Pin = LeftEncoderB_Pin;
 80010e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010e6:	2300      	movs	r3, #0
 80010e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010ea:	2301      	movs	r3, #1
 80010ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LeftEncoderB_GPIO_Port, &GPIO_InitStruct);
 80010ee:	f107 0314 	add.w	r3, r7, #20
 80010f2:	4619      	mov	r1, r3
 80010f4:	480c      	ldr	r0, [pc, #48]	; (8001128 <MX_GPIO_Init+0x144>)
 80010f6:	f003 fe11 	bl	8004d1c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80010fa:	2200      	movs	r2, #0
 80010fc:	2100      	movs	r1, #0
 80010fe:	2017      	movs	r0, #23
 8001100:	f003 f9d3 	bl	80044aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001104:	2017      	movs	r0, #23
 8001106:	f003 f9ec 	bl	80044e2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800110a:	2200      	movs	r2, #0
 800110c:	2100      	movs	r1, #0
 800110e:	2028      	movs	r0, #40	; 0x28
 8001110:	f003 f9cb 	bl	80044aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001114:	2028      	movs	r0, #40	; 0x28
 8001116:	f003 f9e4 	bl	80044e2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800111a:	bf00      	nop
 800111c:	3728      	adds	r7, #40	; 0x28
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	40023800 	.word	0x40023800
 8001128:	40020000 	.word	0x40020000
 800112c:	40020400 	.word	0x40020400
 8001130:	40020800 	.word	0x40020800

08001134 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001138:	b672      	cpsid	i
}
 800113a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800113c:	e7fe      	b.n	800113c <Error_Handler+0x8>

0800113e <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 800113e:	b480      	push	{r7}
 8001140:	b083      	sub	sp, #12
 8001142:	af00      	add	r7, sp, #0
 8001144:	6078      	str	r0, [r7, #4]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2200      	movs	r2, #0
 8001150:	605a      	str	r2, [r3, #4]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4618      	mov	r0, r3
 8001156:	370c      	adds	r7, #12
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr

08001160 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	4a04      	ldr	r2, [pc, #16]	; (800117c <_ZN3ros3MsgC1Ev+0x1c>)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	601a      	str	r2, [r3, #0]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4618      	mov	r0, r3
 8001172:	370c      	adds	r7, #12
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr
 800117c:	08007fb8 	.word	0x08007fb8

08001180 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
      data()
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff ffe8 	bl	8001160 <_ZN3ros3MsgC1Ev>
 8001190:	4a06      	ldr	r2, [pc, #24]	; (80011ac <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	601a      	str	r2, [r3, #0]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	3304      	adds	r3, #4
 800119a:	4618      	mov	r0, r3
 800119c:	f7ff ffcf 	bl	800113e <_ZN3ros4TimeC1Ev>
    {
    }
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	4618      	mov	r0, r3
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	08007fa0 	.word	0x08007fa0

080011b0 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80011b0:	b480      	push	{r7}
 80011b2:	b085      	sub	sp, #20
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80011ba:	2300      	movs	r3, #0
 80011bc:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6859      	ldr	r1, [r3, #4]
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	683a      	ldr	r2, [r7, #0]
 80011c6:	4413      	add	r3, r2
 80011c8:	b2ca      	uxtb	r2, r1
 80011ca:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	0a19      	lsrs	r1, r3, #8
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	3301      	adds	r3, #1
 80011d6:	683a      	ldr	r2, [r7, #0]
 80011d8:	4413      	add	r3, r2
 80011da:	b2ca      	uxtb	r2, r1
 80011dc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	0c19      	lsrs	r1, r3, #16
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	3302      	adds	r3, #2
 80011e8:	683a      	ldr	r2, [r7, #0]
 80011ea:	4413      	add	r3, r2
 80011ec:	b2ca      	uxtb	r2, r1
 80011ee:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	0e19      	lsrs	r1, r3, #24
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	3303      	adds	r3, #3
 80011fa:	683a      	ldr	r2, [r7, #0]
 80011fc:	4413      	add	r3, r2
 80011fe:	b2ca      	uxtb	r2, r1
 8001200:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	3304      	adds	r3, #4
 8001206:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6899      	ldr	r1, [r3, #8]
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	683a      	ldr	r2, [r7, #0]
 8001210:	4413      	add	r3, r2
 8001212:	b2ca      	uxtb	r2, r1
 8001214:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	689b      	ldr	r3, [r3, #8]
 800121a:	0a19      	lsrs	r1, r3, #8
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	3301      	adds	r3, #1
 8001220:	683a      	ldr	r2, [r7, #0]
 8001222:	4413      	add	r3, r2
 8001224:	b2ca      	uxtb	r2, r1
 8001226:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	0c19      	lsrs	r1, r3, #16
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	3302      	adds	r3, #2
 8001232:	683a      	ldr	r2, [r7, #0]
 8001234:	4413      	add	r3, r2
 8001236:	b2ca      	uxtb	r2, r1
 8001238:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	0e19      	lsrs	r1, r3, #24
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	3303      	adds	r3, #3
 8001244:	683a      	ldr	r2, [r7, #0]
 8001246:	4413      	add	r3, r2
 8001248:	b2ca      	uxtb	r2, r1
 800124a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	3304      	adds	r3, #4
 8001250:	60fb      	str	r3, [r7, #12]
      return offset;
 8001252:	68fb      	ldr	r3, [r7, #12]
    }
 8001254:	4618      	mov	r0, r3
 8001256:	3714      	adds	r7, #20
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr

08001260 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001260:	b480      	push	{r7}
 8001262:	b085      	sub	sp, #20
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800126a:	2300      	movs	r3, #0
 800126c:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	683a      	ldr	r2, [r7, #0]
 8001272:	4413      	add	r3, r2
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	461a      	mov	r2, r3
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	685a      	ldr	r2, [r3, #4]
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	3301      	adds	r3, #1
 8001284:	6839      	ldr	r1, [r7, #0]
 8001286:	440b      	add	r3, r1
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	021b      	lsls	r3, r3, #8
 800128c:	431a      	orrs	r2, r3
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	685a      	ldr	r2, [r3, #4]
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	3302      	adds	r3, #2
 800129a:	6839      	ldr	r1, [r7, #0]
 800129c:	440b      	add	r3, r1
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	041b      	lsls	r3, r3, #16
 80012a2:	431a      	orrs	r2, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	685a      	ldr	r2, [r3, #4]
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	3303      	adds	r3, #3
 80012b0:	6839      	ldr	r1, [r7, #0]
 80012b2:	440b      	add	r3, r1
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	061b      	lsls	r3, r3, #24
 80012b8:	431a      	orrs	r2, r3
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	3304      	adds	r3, #4
 80012c2:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	683a      	ldr	r2, [r7, #0]
 80012c8:	4413      	add	r3, r2
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	461a      	mov	r2, r3
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	689a      	ldr	r2, [r3, #8]
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	3301      	adds	r3, #1
 80012da:	6839      	ldr	r1, [r7, #0]
 80012dc:	440b      	add	r3, r1
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	021b      	lsls	r3, r3, #8
 80012e2:	431a      	orrs	r2, r3
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	689a      	ldr	r2, [r3, #8]
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	3302      	adds	r3, #2
 80012f0:	6839      	ldr	r1, [r7, #0]
 80012f2:	440b      	add	r3, r1
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	041b      	lsls	r3, r3, #16
 80012f8:	431a      	orrs	r2, r3
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	689a      	ldr	r2, [r3, #8]
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	3303      	adds	r3, #3
 8001306:	6839      	ldr	r1, [r7, #0]
 8001308:	440b      	add	r3, r1
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	061b      	lsls	r3, r3, #24
 800130e:	431a      	orrs	r2, r3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	3304      	adds	r3, #4
 8001318:	60fb      	str	r3, [r7, #12]
     return offset;
 800131a:	68fb      	ldr	r3, [r7, #12]
    }
 800131c:	4618      	mov	r0, r3
 800131e:	3714      	adds	r7, #20
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr

08001328 <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	4b03      	ldr	r3, [pc, #12]	; (8001340 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8001332:	4618      	mov	r0, r3
 8001334:	370c      	adds	r7, #12
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	08007cc4 	.word	0x08007cc4

08001344 <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	4b03      	ldr	r3, [pc, #12]	; (800135c <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 800134e:	4618      	mov	r0, r3
 8001350:	370c      	adds	r7, #12
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	08007cd4 	.word	0x08007cd4

08001360 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	4618      	mov	r0, r3
 800136c:	f7ff fef8 	bl	8001160 <_ZN3ros3MsgC1Ev>
 8001370:	4a0b      	ldr	r2, [pc, #44]	; (80013a0 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	601a      	str	r2, [r3, #0]
      topic_id(0),
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2200      	movs	r2, #0
 800137a:	809a      	strh	r2, [r3, #4]
      topic_name(""),
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	4a09      	ldr	r2, [pc, #36]	; (80013a4 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001380:	609a      	str	r2, [r3, #8]
      message_type(""),
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4a07      	ldr	r2, [pc, #28]	; (80013a4 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001386:	60da      	str	r2, [r3, #12]
      md5sum(""),
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	4a06      	ldr	r2, [pc, #24]	; (80013a4 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800138c:	611a      	str	r2, [r3, #16]
      buffer_size(0)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2200      	movs	r2, #0
 8001392:	615a      	str	r2, [r3, #20]
    {
    }
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	4618      	mov	r0, r3
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	08007f88 	.word	0x08007f88
 80013a4:	08007cf8 	.word	0x08007cf8

080013a8 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b088      	sub	sp, #32
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80013b2:	2300      	movs	r3, #0
 80013b4:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	8899      	ldrh	r1, [r3, #4]
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	683a      	ldr	r2, [r7, #0]
 80013be:	4413      	add	r3, r2
 80013c0:	b2ca      	uxtb	r2, r1
 80013c2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	889b      	ldrh	r3, [r3, #4]
 80013c8:	0a1b      	lsrs	r3, r3, #8
 80013ca:	b299      	uxth	r1, r3
 80013cc:	69fb      	ldr	r3, [r7, #28]
 80013ce:	3301      	adds	r3, #1
 80013d0:	683a      	ldr	r2, [r7, #0]
 80013d2:	4413      	add	r3, r2
 80013d4:	b2ca      	uxtb	r2, r1
 80013d6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	3302      	adds	r3, #2
 80013dc:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7fe ff10 	bl	8000208 <strlen>
 80013e8:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	683a      	ldr	r2, [r7, #0]
 80013ee:	4413      	add	r3, r2
 80013f0:	69b9      	ldr	r1, [r7, #24]
 80013f2:	4618      	mov	r0, r3
 80013f4:	f001 ff32 	bl	800325c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	3304      	adds	r3, #4
 80013fc:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	683a      	ldr	r2, [r7, #0]
 8001402:	18d0      	adds	r0, r2, r3
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	69ba      	ldr	r2, [r7, #24]
 800140a:	4619      	mov	r1, r3
 800140c:	f006 fb30 	bl	8007a70 <memcpy>
      offset += length_topic_name;
 8001410:	69fa      	ldr	r2, [r7, #28]
 8001412:	69bb      	ldr	r3, [r7, #24]
 8001414:	4413      	add	r3, r2
 8001416:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	4618      	mov	r0, r3
 800141e:	f7fe fef3 	bl	8000208 <strlen>
 8001422:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	683a      	ldr	r2, [r7, #0]
 8001428:	4413      	add	r3, r2
 800142a:	6979      	ldr	r1, [r7, #20]
 800142c:	4618      	mov	r0, r3
 800142e:	f001 ff15 	bl	800325c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	3304      	adds	r3, #4
 8001436:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8001438:	69fb      	ldr	r3, [r7, #28]
 800143a:	683a      	ldr	r2, [r7, #0]
 800143c:	18d0      	adds	r0, r2, r3
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	68db      	ldr	r3, [r3, #12]
 8001442:	697a      	ldr	r2, [r7, #20]
 8001444:	4619      	mov	r1, r3
 8001446:	f006 fb13 	bl	8007a70 <memcpy>
      offset += length_message_type;
 800144a:	69fa      	ldr	r2, [r7, #28]
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	4413      	add	r3, r2
 8001450:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	691b      	ldr	r3, [r3, #16]
 8001456:	4618      	mov	r0, r3
 8001458:	f7fe fed6 	bl	8000208 <strlen>
 800145c:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	683a      	ldr	r2, [r7, #0]
 8001462:	4413      	add	r3, r2
 8001464:	6939      	ldr	r1, [r7, #16]
 8001466:	4618      	mov	r0, r3
 8001468:	f001 fef8 	bl	800325c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800146c:	69fb      	ldr	r3, [r7, #28]
 800146e:	3304      	adds	r3, #4
 8001470:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	683a      	ldr	r2, [r7, #0]
 8001476:	18d0      	adds	r0, r2, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	691b      	ldr	r3, [r3, #16]
 800147c:	693a      	ldr	r2, [r7, #16]
 800147e:	4619      	mov	r1, r3
 8001480:	f006 faf6 	bl	8007a70 <memcpy>
      offset += length_md5sum;
 8001484:	69fa      	ldr	r2, [r7, #28]
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	4413      	add	r3, r2
 800148a:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	695b      	ldr	r3, [r3, #20]
 8001490:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8001492:	68f9      	ldr	r1, [r7, #12]
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	683a      	ldr	r2, [r7, #0]
 8001498:	4413      	add	r3, r2
 800149a:	b2ca      	uxtb	r2, r1
 800149c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	0a19      	lsrs	r1, r3, #8
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	3301      	adds	r3, #1
 80014a6:	683a      	ldr	r2, [r7, #0]
 80014a8:	4413      	add	r3, r2
 80014aa:	b2ca      	uxtb	r2, r1
 80014ac:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	0c19      	lsrs	r1, r3, #16
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	3302      	adds	r3, #2
 80014b6:	683a      	ldr	r2, [r7, #0]
 80014b8:	4413      	add	r3, r2
 80014ba:	b2ca      	uxtb	r2, r1
 80014bc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	0e19      	lsrs	r1, r3, #24
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	3303      	adds	r3, #3
 80014c6:	683a      	ldr	r2, [r7, #0]
 80014c8:	4413      	add	r3, r2
 80014ca:	b2ca      	uxtb	r2, r1
 80014cc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	3304      	adds	r3, #4
 80014d2:	61fb      	str	r3, [r7, #28]
      return offset;
 80014d4:	69fb      	ldr	r3, [r7, #28]
    }
 80014d6:	4618      	mov	r0, r3
 80014d8:	3720      	adds	r7, #32
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}

080014de <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80014de:	b580      	push	{r7, lr}
 80014e0:	b08a      	sub	sp, #40	; 0x28
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	6078      	str	r0, [r7, #4]
 80014e6:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80014e8:	2300      	movs	r3, #0
 80014ea:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 80014ec:	69bb      	ldr	r3, [r7, #24]
 80014ee:	683a      	ldr	r2, [r7, #0]
 80014f0:	4413      	add	r3, r2
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	b29a      	uxth	r2, r3
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	889b      	ldrh	r3, [r3, #4]
 80014fe:	b21a      	sxth	r2, r3
 8001500:	69bb      	ldr	r3, [r7, #24]
 8001502:	3301      	adds	r3, #1
 8001504:	6839      	ldr	r1, [r7, #0]
 8001506:	440b      	add	r3, r1
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	021b      	lsls	r3, r3, #8
 800150c:	b21b      	sxth	r3, r3
 800150e:	4313      	orrs	r3, r2
 8001510:	b21b      	sxth	r3, r3
 8001512:	b29a      	uxth	r2, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8001518:	69bb      	ldr	r3, [r7, #24]
 800151a:	3302      	adds	r3, #2
 800151c:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 800151e:	69bb      	ldr	r3, [r7, #24]
 8001520:	683a      	ldr	r2, [r7, #0]
 8001522:	441a      	add	r2, r3
 8001524:	f107 0314 	add.w	r3, r7, #20
 8001528:	4611      	mov	r1, r2
 800152a:	4618      	mov	r0, r3
 800152c:	f001 feb5 	bl	800329a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001530:	69bb      	ldr	r3, [r7, #24]
 8001532:	3304      	adds	r3, #4
 8001534:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001536:	69bb      	ldr	r3, [r7, #24]
 8001538:	627b      	str	r3, [r7, #36]	; 0x24
 800153a:	e00b      	b.n	8001554 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x76>
          inbuffer[k-1]=inbuffer[k];
 800153c:	683a      	ldr	r2, [r7, #0]
 800153e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001540:	441a      	add	r2, r3
 8001542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001544:	3b01      	subs	r3, #1
 8001546:	6839      	ldr	r1, [r7, #0]
 8001548:	440b      	add	r3, r1
 800154a:	7812      	ldrb	r2, [r2, #0]
 800154c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 800154e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001550:	3301      	adds	r3, #1
 8001552:	627b      	str	r3, [r7, #36]	; 0x24
 8001554:	69ba      	ldr	r2, [r7, #24]
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	4413      	add	r3, r2
 800155a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800155c:	429a      	cmp	r2, r3
 800155e:	d3ed      	bcc.n	800153c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5e>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	4413      	add	r3, r2
 8001566:	3b01      	subs	r3, #1
 8001568:	683a      	ldr	r2, [r7, #0]
 800156a:	4413      	add	r3, r2
 800156c:	2200      	movs	r2, #0
 800156e:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8001570:	69bb      	ldr	r3, [r7, #24]
 8001572:	3b01      	subs	r3, #1
 8001574:	683a      	ldr	r2, [r7, #0]
 8001576:	441a      	add	r2, r3
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 800157c:	69ba      	ldr	r2, [r7, #24]
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	4413      	add	r3, r2
 8001582:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8001584:	69bb      	ldr	r3, [r7, #24]
 8001586:	683a      	ldr	r2, [r7, #0]
 8001588:	441a      	add	r2, r3
 800158a:	f107 0310 	add.w	r3, r7, #16
 800158e:	4611      	mov	r1, r2
 8001590:	4618      	mov	r0, r3
 8001592:	f001 fe82 	bl	800329a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001596:	69bb      	ldr	r3, [r7, #24]
 8001598:	3304      	adds	r3, #4
 800159a:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 800159c:	69bb      	ldr	r3, [r7, #24]
 800159e:	623b      	str	r3, [r7, #32]
 80015a0:	e00b      	b.n	80015ba <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xdc>
          inbuffer[k-1]=inbuffer[k];
 80015a2:	683a      	ldr	r2, [r7, #0]
 80015a4:	6a3b      	ldr	r3, [r7, #32]
 80015a6:	441a      	add	r2, r3
 80015a8:	6a3b      	ldr	r3, [r7, #32]
 80015aa:	3b01      	subs	r3, #1
 80015ac:	6839      	ldr	r1, [r7, #0]
 80015ae:	440b      	add	r3, r1
 80015b0:	7812      	ldrb	r2, [r2, #0]
 80015b2:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80015b4:	6a3b      	ldr	r3, [r7, #32]
 80015b6:	3301      	adds	r3, #1
 80015b8:	623b      	str	r3, [r7, #32]
 80015ba:	69ba      	ldr	r2, [r7, #24]
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	4413      	add	r3, r2
 80015c0:	6a3a      	ldr	r2, [r7, #32]
 80015c2:	429a      	cmp	r2, r3
 80015c4:	d3ed      	bcc.n	80015a2 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc4>
      }
      inbuffer[offset+length_message_type-1]=0;
 80015c6:	69ba      	ldr	r2, [r7, #24]
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	4413      	add	r3, r2
 80015cc:	3b01      	subs	r3, #1
 80015ce:	683a      	ldr	r2, [r7, #0]
 80015d0:	4413      	add	r3, r2
 80015d2:	2200      	movs	r2, #0
 80015d4:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 80015d6:	69bb      	ldr	r3, [r7, #24]
 80015d8:	3b01      	subs	r3, #1
 80015da:	683a      	ldr	r2, [r7, #0]
 80015dc:	441a      	add	r2, r3
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 80015e2:	69ba      	ldr	r2, [r7, #24]
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	4413      	add	r3, r2
 80015e8:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 80015ea:	69bb      	ldr	r3, [r7, #24]
 80015ec:	683a      	ldr	r2, [r7, #0]
 80015ee:	441a      	add	r2, r3
 80015f0:	f107 030c 	add.w	r3, r7, #12
 80015f4:	4611      	mov	r1, r2
 80015f6:	4618      	mov	r0, r3
 80015f8:	f001 fe4f 	bl	800329a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80015fc:	69bb      	ldr	r3, [r7, #24]
 80015fe:	3304      	adds	r3, #4
 8001600:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001602:	69bb      	ldr	r3, [r7, #24]
 8001604:	61fb      	str	r3, [r7, #28]
 8001606:	e00b      	b.n	8001620 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x142>
          inbuffer[k-1]=inbuffer[k];
 8001608:	683a      	ldr	r2, [r7, #0]
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	441a      	add	r2, r3
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	3b01      	subs	r3, #1
 8001612:	6839      	ldr	r1, [r7, #0]
 8001614:	440b      	add	r3, r1
 8001616:	7812      	ldrb	r2, [r2, #0]
 8001618:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800161a:	69fb      	ldr	r3, [r7, #28]
 800161c:	3301      	adds	r3, #1
 800161e:	61fb      	str	r3, [r7, #28]
 8001620:	69ba      	ldr	r2, [r7, #24]
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	4413      	add	r3, r2
 8001626:	69fa      	ldr	r2, [r7, #28]
 8001628:	429a      	cmp	r2, r3
 800162a:	d3ed      	bcc.n	8001608 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x12a>
      }
      inbuffer[offset+length_md5sum-1]=0;
 800162c:	69ba      	ldr	r2, [r7, #24]
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	4413      	add	r3, r2
 8001632:	3b01      	subs	r3, #1
 8001634:	683a      	ldr	r2, [r7, #0]
 8001636:	4413      	add	r3, r2
 8001638:	2200      	movs	r2, #0
 800163a:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 800163c:	69bb      	ldr	r3, [r7, #24]
 800163e:	3b01      	subs	r3, #1
 8001640:	683a      	ldr	r2, [r7, #0]
 8001642:	441a      	add	r2, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8001648:	69ba      	ldr	r2, [r7, #24]
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	4413      	add	r3, r2
 800164e:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8001650:	2300      	movs	r3, #0
 8001652:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	69ba      	ldr	r2, [r7, #24]
 8001658:	6839      	ldr	r1, [r7, #0]
 800165a:	440a      	add	r2, r1
 800165c:	7812      	ldrb	r2, [r2, #0]
 800165e:	4313      	orrs	r3, r2
 8001660:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001662:	68ba      	ldr	r2, [r7, #8]
 8001664:	69bb      	ldr	r3, [r7, #24]
 8001666:	3301      	adds	r3, #1
 8001668:	6839      	ldr	r1, [r7, #0]
 800166a:	440b      	add	r3, r1
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	021b      	lsls	r3, r3, #8
 8001670:	4313      	orrs	r3, r2
 8001672:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001674:	68ba      	ldr	r2, [r7, #8]
 8001676:	69bb      	ldr	r3, [r7, #24]
 8001678:	3302      	adds	r3, #2
 800167a:	6839      	ldr	r1, [r7, #0]
 800167c:	440b      	add	r3, r1
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	041b      	lsls	r3, r3, #16
 8001682:	4313      	orrs	r3, r2
 8001684:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001686:	68ba      	ldr	r2, [r7, #8]
 8001688:	69bb      	ldr	r3, [r7, #24]
 800168a:	3303      	adds	r3, #3
 800168c:	6839      	ldr	r1, [r7, #0]
 800168e:	440b      	add	r3, r1
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	061b      	lsls	r3, r3, #24
 8001694:	4313      	orrs	r3, r2
 8001696:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8001698:	68ba      	ldr	r2, [r7, #8]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 800169e:	69bb      	ldr	r3, [r7, #24]
 80016a0:	3304      	adds	r3, #4
 80016a2:	61bb      	str	r3, [r7, #24]
     return offset;
 80016a4:	69bb      	ldr	r3, [r7, #24]
    }
 80016a6:	4618      	mov	r0, r3
 80016a8:	3728      	adds	r7, #40	; 0x28
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
	...

080016b0 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	4b03      	ldr	r3, [pc, #12]	; (80016c8 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 80016ba:	4618      	mov	r0, r3
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	08007cfc 	.word	0x08007cfc

080016cc <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	4b03      	ldr	r3, [pc, #12]	; (80016e4 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 80016d6:	4618      	mov	r0, r3
 80016d8:	370c      	adds	r7, #12
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	08007d18 	.word	0x08007d18

080016e8 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7ff fd34 	bl	8001160 <_ZN3ros3MsgC1Ev>
 80016f8:	4a06      	ldr	r2, [pc, #24]	; (8001714 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	601a      	str	r2, [r3, #0]
      level(0),
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2200      	movs	r2, #0
 8001702:	711a      	strb	r2, [r3, #4]
      msg("")
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	4a04      	ldr	r2, [pc, #16]	; (8001718 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8001708:	609a      	str	r2, [r3, #8]
    {
    }
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	4618      	mov	r0, r3
 800170e:	3708      	adds	r7, #8
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	08007f70 	.word	0x08007f70
 8001718:	08007cf8 	.word	0x08007cf8

0800171c <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 800171c:	b580      	push	{r7, lr}
 800171e:	b084      	sub	sp, #16
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001726:	2300      	movs	r3, #0
 8001728:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	683a      	ldr	r2, [r7, #0]
 800172e:	4413      	add	r3, r2
 8001730:	687a      	ldr	r2, [r7, #4]
 8001732:	7912      	ldrb	r2, [r2, #4]
 8001734:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	3301      	adds	r3, #1
 800173a:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	4618      	mov	r0, r3
 8001742:	f7fe fd61 	bl	8000208 <strlen>
 8001746:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	683a      	ldr	r2, [r7, #0]
 800174c:	4413      	add	r3, r2
 800174e:	68b9      	ldr	r1, [r7, #8]
 8001750:	4618      	mov	r0, r3
 8001752:	f001 fd83 	bl	800325c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	3304      	adds	r3, #4
 800175a:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	683a      	ldr	r2, [r7, #0]
 8001760:	18d0      	adds	r0, r2, r3
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	68ba      	ldr	r2, [r7, #8]
 8001768:	4619      	mov	r1, r3
 800176a:	f006 f981 	bl	8007a70 <memcpy>
      offset += length_msg;
 800176e:	68fa      	ldr	r2, [r7, #12]
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	4413      	add	r3, r2
 8001774:	60fb      	str	r3, [r7, #12]
      return offset;
 8001776:	68fb      	ldr	r3, [r7, #12]
    }
 8001778:	4618      	mov	r0, r3
 800177a:	3710      	adds	r7, #16
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}

08001780 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001780:	b580      	push	{r7, lr}
 8001782:	b086      	sub	sp, #24
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800178a:	2300      	movs	r3, #0
 800178c:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	683a      	ldr	r2, [r7, #0]
 8001792:	4413      	add	r3, r2
 8001794:	781a      	ldrb	r2, [r3, #0]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	3301      	adds	r3, #1
 800179e:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	683a      	ldr	r2, [r7, #0]
 80017a4:	441a      	add	r2, r3
 80017a6:	f107 030c 	add.w	r3, r7, #12
 80017aa:	4611      	mov	r1, r2
 80017ac:	4618      	mov	r0, r3
 80017ae:	f001 fd74 	bl	800329a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	3304      	adds	r3, #4
 80017b6:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	617b      	str	r3, [r7, #20]
 80017bc:	e00b      	b.n	80017d6 <_ZN14rosserial_msgs3Log11deserializeEPh+0x56>
          inbuffer[k-1]=inbuffer[k];
 80017be:	683a      	ldr	r2, [r7, #0]
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	441a      	add	r2, r3
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	3b01      	subs	r3, #1
 80017c8:	6839      	ldr	r1, [r7, #0]
 80017ca:	440b      	add	r3, r1
 80017cc:	7812      	ldrb	r2, [r2, #0]
 80017ce:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	3301      	adds	r3, #1
 80017d4:	617b      	str	r3, [r7, #20]
 80017d6:	693a      	ldr	r2, [r7, #16]
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	4413      	add	r3, r2
 80017dc:	697a      	ldr	r2, [r7, #20]
 80017de:	429a      	cmp	r2, r3
 80017e0:	d3ed      	bcc.n	80017be <_ZN14rosserial_msgs3Log11deserializeEPh+0x3e>
      }
      inbuffer[offset+length_msg-1]=0;
 80017e2:	693a      	ldr	r2, [r7, #16]
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	4413      	add	r3, r2
 80017e8:	3b01      	subs	r3, #1
 80017ea:	683a      	ldr	r2, [r7, #0]
 80017ec:	4413      	add	r3, r2
 80017ee:	2200      	movs	r2, #0
 80017f0:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	3b01      	subs	r3, #1
 80017f6:	683a      	ldr	r2, [r7, #0]
 80017f8:	441a      	add	r2, r3
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 80017fe:	693a      	ldr	r2, [r7, #16]
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	4413      	add	r3, r2
 8001804:	613b      	str	r3, [r7, #16]
     return offset;
 8001806:	693b      	ldr	r3, [r7, #16]
    }
 8001808:	4618      	mov	r0, r3
 800180a:	3718      	adds	r7, #24
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}

08001810 <_ZN14rosserial_msgs3Log7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	4b03      	ldr	r3, [pc, #12]	; (8001828 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 800181a:	4618      	mov	r0, r3
 800181c:	370c      	adds	r7, #12
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	08007d3c 	.word	0x08007d3c

0800182c <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
 8001834:	4b03      	ldr	r3, [pc, #12]	; (8001844 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8001836:	4618      	mov	r0, r3
 8001838:	370c      	adds	r7, #12
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	08007d50 	.word	0x08007d50

08001848 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	4618      	mov	r0, r3
 8001854:	f7ff fc84 	bl	8001160 <_ZN3ros3MsgC1Ev>
 8001858:	4a11      	ldr	r2, [pc, #68]	; (80018a0 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	601a      	str	r2, [r3, #0]
      ints_length(0), st_ints(), ints(nullptr),
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2200      	movs	r2, #0
 8001862:	605a      	str	r2, [r3, #4]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2200      	movs	r2, #0
 8001868:	609a      	str	r2, [r3, #8]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2200      	movs	r2, #0
 800186e:	60da      	str	r2, [r3, #12]
      floats_length(0), st_floats(), floats(nullptr),
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2200      	movs	r2, #0
 8001874:	611a      	str	r2, [r3, #16]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	f04f 0200 	mov.w	r2, #0
 800187c:	615a      	str	r2, [r3, #20]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2200      	movs	r2, #0
 8001882:	619a      	str	r2, [r3, #24]
      strings_length(0), st_strings(), strings(nullptr)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2200      	movs	r2, #0
 8001888:	61da      	str	r2, [r3, #28]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2200      	movs	r2, #0
 800188e:	621a      	str	r2, [r3, #32]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2200      	movs	r2, #0
 8001894:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4618      	mov	r0, r3
 800189a:	3708      	adds	r7, #8
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	08007f58 	.word	0x08007f58

080018a4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b08a      	sub	sp, #40	; 0x28
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80018ae:	2300      	movs	r3, #0
 80018b0:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6859      	ldr	r1, [r3, #4]
 80018b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b8:	683a      	ldr	r2, [r7, #0]
 80018ba:	4413      	add	r3, r2
 80018bc:	b2ca      	uxtb	r2, r1
 80018be:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	0a19      	lsrs	r1, r3, #8
 80018c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c8:	3301      	adds	r3, #1
 80018ca:	683a      	ldr	r2, [r7, #0]
 80018cc:	4413      	add	r3, r2
 80018ce:	b2ca      	uxtb	r2, r1
 80018d0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	0c19      	lsrs	r1, r3, #16
 80018d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018da:	3302      	adds	r3, #2
 80018dc:	683a      	ldr	r2, [r7, #0]
 80018de:	4413      	add	r3, r2
 80018e0:	b2ca      	uxtb	r2, r1
 80018e2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	0e19      	lsrs	r1, r3, #24
 80018ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ec:	3303      	adds	r3, #3
 80018ee:	683a      	ldr	r2, [r7, #0]
 80018f0:	4413      	add	r3, r2
 80018f2:	b2ca      	uxtb	r2, r1
 80018f4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 80018f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f8:	3304      	adds	r3, #4
 80018fa:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 80018fc:	2300      	movs	r3, #0
 80018fe:	623b      	str	r3, [r7, #32]
 8001900:	e02a      	b.n	8001958 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xb4>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	68da      	ldr	r2, [r3, #12]
 8001906:	6a3b      	ldr	r3, [r7, #32]
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	4413      	add	r3, r2
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8001910:	6939      	ldr	r1, [r7, #16]
 8001912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001914:	683a      	ldr	r2, [r7, #0]
 8001916:	4413      	add	r3, r2
 8001918:	b2ca      	uxtb	r2, r1
 800191a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	0a19      	lsrs	r1, r3, #8
 8001920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001922:	3301      	adds	r3, #1
 8001924:	683a      	ldr	r2, [r7, #0]
 8001926:	4413      	add	r3, r2
 8001928:	b2ca      	uxtb	r2, r1
 800192a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	0c19      	lsrs	r1, r3, #16
 8001930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001932:	3302      	adds	r3, #2
 8001934:	683a      	ldr	r2, [r7, #0]
 8001936:	4413      	add	r3, r2
 8001938:	b2ca      	uxtb	r2, r1
 800193a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	0e19      	lsrs	r1, r3, #24
 8001940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001942:	3303      	adds	r3, #3
 8001944:	683a      	ldr	r2, [r7, #0]
 8001946:	4413      	add	r3, r2
 8001948:	b2ca      	uxtb	r2, r1
 800194a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 800194c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194e:	3304      	adds	r3, #4
 8001950:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001952:	6a3b      	ldr	r3, [r7, #32]
 8001954:	3301      	adds	r3, #1
 8001956:	623b      	str	r3, [r7, #32]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	6a3a      	ldr	r2, [r7, #32]
 800195e:	429a      	cmp	r2, r3
 8001960:	d3cf      	bcc.n	8001902 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5e>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6919      	ldr	r1, [r3, #16]
 8001966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001968:	683a      	ldr	r2, [r7, #0]
 800196a:	4413      	add	r3, r2
 800196c:	b2ca      	uxtb	r2, r1
 800196e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	691b      	ldr	r3, [r3, #16]
 8001974:	0a19      	lsrs	r1, r3, #8
 8001976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001978:	3301      	adds	r3, #1
 800197a:	683a      	ldr	r2, [r7, #0]
 800197c:	4413      	add	r3, r2
 800197e:	b2ca      	uxtb	r2, r1
 8001980:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	691b      	ldr	r3, [r3, #16]
 8001986:	0c19      	lsrs	r1, r3, #16
 8001988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198a:	3302      	adds	r3, #2
 800198c:	683a      	ldr	r2, [r7, #0]
 800198e:	4413      	add	r3, r2
 8001990:	b2ca      	uxtb	r2, r1
 8001992:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	691b      	ldr	r3, [r3, #16]
 8001998:	0e19      	lsrs	r1, r3, #24
 800199a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199c:	3303      	adds	r3, #3
 800199e:	683a      	ldr	r2, [r7, #0]
 80019a0:	4413      	add	r3, r2
 80019a2:	b2ca      	uxtb	r2, r1
 80019a4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 80019a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a8:	3304      	adds	r3, #4
 80019aa:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 80019ac:	2300      	movs	r3, #0
 80019ae:	61fb      	str	r3, [r7, #28]
 80019b0:	e02a      	b.n	8001a08 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x164>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	699a      	ldr	r2, [r3, #24]
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	4413      	add	r3, r2
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 80019c0:	68f9      	ldr	r1, [r7, #12]
 80019c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c4:	683a      	ldr	r2, [r7, #0]
 80019c6:	4413      	add	r3, r2
 80019c8:	b2ca      	uxtb	r2, r1
 80019ca:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	0a19      	lsrs	r1, r3, #8
 80019d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d2:	3301      	adds	r3, #1
 80019d4:	683a      	ldr	r2, [r7, #0]
 80019d6:	4413      	add	r3, r2
 80019d8:	b2ca      	uxtb	r2, r1
 80019da:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	0c19      	lsrs	r1, r3, #16
 80019e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e2:	3302      	adds	r3, #2
 80019e4:	683a      	ldr	r2, [r7, #0]
 80019e6:	4413      	add	r3, r2
 80019e8:	b2ca      	uxtb	r2, r1
 80019ea:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	0e19      	lsrs	r1, r3, #24
 80019f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f2:	3303      	adds	r3, #3
 80019f4:	683a      	ldr	r2, [r7, #0]
 80019f6:	4413      	add	r3, r2
 80019f8:	b2ca      	uxtb	r2, r1
 80019fa:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 80019fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fe:	3304      	adds	r3, #4
 8001a00:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	3301      	adds	r3, #1
 8001a06:	61fb      	str	r3, [r7, #28]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	691b      	ldr	r3, [r3, #16]
 8001a0c:	69fa      	ldr	r2, [r7, #28]
 8001a0e:	429a      	cmp	r2, r3
 8001a10:	d3cf      	bcc.n	80019b2 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10e>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	69d9      	ldr	r1, [r3, #28]
 8001a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a18:	683a      	ldr	r2, [r7, #0]
 8001a1a:	4413      	add	r3, r2
 8001a1c:	b2ca      	uxtb	r2, r1
 8001a1e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	69db      	ldr	r3, [r3, #28]
 8001a24:	0a19      	lsrs	r1, r3, #8
 8001a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a28:	3301      	adds	r3, #1
 8001a2a:	683a      	ldr	r2, [r7, #0]
 8001a2c:	4413      	add	r3, r2
 8001a2e:	b2ca      	uxtb	r2, r1
 8001a30:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	69db      	ldr	r3, [r3, #28]
 8001a36:	0c19      	lsrs	r1, r3, #16
 8001a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3a:	3302      	adds	r3, #2
 8001a3c:	683a      	ldr	r2, [r7, #0]
 8001a3e:	4413      	add	r3, r2
 8001a40:	b2ca      	uxtb	r2, r1
 8001a42:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	69db      	ldr	r3, [r3, #28]
 8001a48:	0e19      	lsrs	r1, r3, #24
 8001a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4c:	3303      	adds	r3, #3
 8001a4e:	683a      	ldr	r2, [r7, #0]
 8001a50:	4413      	add	r3, r2
 8001a52:	b2ca      	uxtb	r2, r1
 8001a54:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8001a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a58:	3304      	adds	r3, #4
 8001a5a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	61bb      	str	r3, [r7, #24]
 8001a60:	e027      	b.n	8001ab2 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x20e>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a66:	69bb      	ldr	r3, [r7, #24]
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	4413      	add	r3, r2
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7fe fbca 	bl	8000208 <strlen>
 8001a74:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8001a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a78:	683a      	ldr	r2, [r7, #0]
 8001a7a:	4413      	add	r3, r2
 8001a7c:	6979      	ldr	r1, [r7, #20]
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f001 fbec 	bl	800325c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a86:	3304      	adds	r3, #4
 8001a88:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8001a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8c:	683a      	ldr	r2, [r7, #0]
 8001a8e:	18d0      	adds	r0, r2, r3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a94:	69bb      	ldr	r3, [r7, #24]
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	4413      	add	r3, r2
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	697a      	ldr	r2, [r7, #20]
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	f005 ffe6 	bl	8007a70 <memcpy>
      offset += length_stringsi;
 8001aa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	4413      	add	r3, r2
 8001aaa:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001aac:	69bb      	ldr	r3, [r7, #24]
 8001aae:	3301      	adds	r3, #1
 8001ab0:	61bb      	str	r3, [r7, #24]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	69db      	ldr	r3, [r3, #28]
 8001ab6:	69ba      	ldr	r2, [r7, #24]
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d3d2      	bcc.n	8001a62 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1be>
      }
      return offset;
 8001abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3728      	adds	r7, #40	; 0x28
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}

08001ac6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001ac6:	b580      	push	{r7, lr}
 8001ac8:	b08e      	sub	sp, #56	; 0x38
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	6078      	str	r0, [r7, #4]
 8001ace:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001ad4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ad6:	683a      	ldr	r2, [r7, #0]
 8001ad8:	4413      	add	r3, r2
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001ade:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ae0:	3301      	adds	r3, #1
 8001ae2:	683a      	ldr	r2, [r7, #0]
 8001ae4:	4413      	add	r3, r2
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	021b      	lsls	r3, r3, #8
 8001aea:	6a3a      	ldr	r2, [r7, #32]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001af0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001af2:	3302      	adds	r3, #2
 8001af4:	683a      	ldr	r2, [r7, #0]
 8001af6:	4413      	add	r3, r2
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	041b      	lsls	r3, r3, #16
 8001afc:	6a3a      	ldr	r2, [r7, #32]
 8001afe:	4313      	orrs	r3, r2
 8001b00:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001b02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b04:	3303      	adds	r3, #3
 8001b06:	683a      	ldr	r2, [r7, #0]
 8001b08:	4413      	add	r3, r2
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	061b      	lsls	r3, r3, #24
 8001b0e:	6a3a      	ldr	r2, [r7, #32]
 8001b10:	4313      	orrs	r3, r2
 8001b12:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8001b14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b16:	3304      	adds	r3, #4
 8001b18:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	6a3a      	ldr	r2, [r7, #32]
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d90a      	bls.n	8001b3a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	68da      	ldr	r2, [r3, #12]
 8001b28:	6a3b      	ldr	r3, [r7, #32]
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	4610      	mov	r0, r2
 8001b30:	f005 ff32 	bl	8007998 <realloc>
 8001b34:	4602      	mov	r2, r0
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6a3a      	ldr	r2, [r7, #32]
 8001b3e:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8001b40:	2300      	movs	r3, #0
 8001b42:	633b      	str	r3, [r7, #48]	; 0x30
 8001b44:	e035      	b.n	8001bb2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xec>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8001b46:	2300      	movs	r3, #0
 8001b48:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001b4e:	6839      	ldr	r1, [r7, #0]
 8001b50:	440a      	add	r2, r1
 8001b52:	7812      	ldrb	r2, [r2, #0]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001b58:	697a      	ldr	r2, [r7, #20]
 8001b5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	6839      	ldr	r1, [r7, #0]
 8001b60:	440b      	add	r3, r1
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	021b      	lsls	r3, r3, #8
 8001b66:	4313      	orrs	r3, r2
 8001b68:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001b6a:	697a      	ldr	r2, [r7, #20]
 8001b6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b6e:	3302      	adds	r3, #2
 8001b70:	6839      	ldr	r1, [r7, #0]
 8001b72:	440b      	add	r3, r1
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	041b      	lsls	r3, r3, #16
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001b7c:	697a      	ldr	r2, [r7, #20]
 8001b7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b80:	3303      	adds	r3, #3
 8001b82:	6839      	ldr	r1, [r7, #0]
 8001b84:	440b      	add	r3, r1
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	061b      	lsls	r3, r3, #24
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8001b8e:	697a      	ldr	r2, [r7, #20]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8001b94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b96:	3304      	adds	r3, #4
 8001b98:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	68da      	ldr	r2, [r3, #12]
 8001b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	4413      	add	r3, r2
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	3208      	adds	r2, #8
 8001ba8:	6812      	ldr	r2, [r2, #0]
 8001baa:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8001bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bae:	3301      	adds	r3, #1
 8001bb0:	633b      	str	r3, [r7, #48]	; 0x30
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d3c4      	bcc.n	8001b46 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x80>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001bbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bbe:	683a      	ldr	r2, [r7, #0]
 8001bc0:	4413      	add	r3, r2
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001bc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bc8:	3301      	adds	r3, #1
 8001bca:	683a      	ldr	r2, [r7, #0]
 8001bcc:	4413      	add	r3, r2
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	021b      	lsls	r3, r3, #8
 8001bd2:	69fa      	ldr	r2, [r7, #28]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001bd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bda:	3302      	adds	r3, #2
 8001bdc:	683a      	ldr	r2, [r7, #0]
 8001bde:	4413      	add	r3, r2
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	041b      	lsls	r3, r3, #16
 8001be4:	69fa      	ldr	r2, [r7, #28]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001bea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bec:	3303      	adds	r3, #3
 8001bee:	683a      	ldr	r2, [r7, #0]
 8001bf0:	4413      	add	r3, r2
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	061b      	lsls	r3, r3, #24
 8001bf6:	69fa      	ldr	r2, [r7, #28]
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8001bfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bfe:	3304      	adds	r3, #4
 8001c00:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	691b      	ldr	r3, [r3, #16]
 8001c06:	69fa      	ldr	r2, [r7, #28]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d90a      	bls.n	8001c22 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	699a      	ldr	r2, [r3, #24]
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	4619      	mov	r1, r3
 8001c16:	4610      	mov	r0, r2
 8001c18:	f005 febe 	bl	8007998 <realloc>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	69fa      	ldr	r2, [r7, #28]
 8001c26:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8001c28:	2300      	movs	r3, #0
 8001c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c2c:	e035      	b.n	8001c9a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1d4>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001c36:	6839      	ldr	r1, [r7, #0]
 8001c38:	440a      	add	r2, r1
 8001c3a:	7812      	ldrb	r2, [r2, #0]
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001c40:	693a      	ldr	r2, [r7, #16]
 8001c42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c44:	3301      	adds	r3, #1
 8001c46:	6839      	ldr	r1, [r7, #0]
 8001c48:	440b      	add	r3, r1
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	021b      	lsls	r3, r3, #8
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001c52:	693a      	ldr	r2, [r7, #16]
 8001c54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c56:	3302      	adds	r3, #2
 8001c58:	6839      	ldr	r1, [r7, #0]
 8001c5a:	440b      	add	r3, r1
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	041b      	lsls	r3, r3, #16
 8001c60:	4313      	orrs	r3, r2
 8001c62:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001c64:	693a      	ldr	r2, [r7, #16]
 8001c66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c68:	3303      	adds	r3, #3
 8001c6a:	6839      	ldr	r1, [r7, #0]
 8001c6c:	440b      	add	r3, r1
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	061b      	lsls	r3, r3, #24
 8001c72:	4313      	orrs	r3, r2
 8001c74:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8001c76:	693a      	ldr	r2, [r7, #16]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8001c7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c7e:	3304      	adds	r3, #4
 8001c80:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	699a      	ldr	r2, [r3, #24]
 8001c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	4413      	add	r3, r2
 8001c8c:	687a      	ldr	r2, [r7, #4]
 8001c8e:	3214      	adds	r2, #20
 8001c90:	6812      	ldr	r2, [r2, #0]
 8001c92:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8001c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c96:	3301      	adds	r3, #1
 8001c98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	691b      	ldr	r3, [r3, #16]
 8001c9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d3c4      	bcc.n	8001c2e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x168>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001ca4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ca6:	683a      	ldr	r2, [r7, #0]
 8001ca8:	4413      	add	r3, r2
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001cae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	683a      	ldr	r2, [r7, #0]
 8001cb4:	4413      	add	r3, r2
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	021b      	lsls	r3, r3, #8
 8001cba:	69ba      	ldr	r2, [r7, #24]
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001cc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cc2:	3302      	adds	r3, #2
 8001cc4:	683a      	ldr	r2, [r7, #0]
 8001cc6:	4413      	add	r3, r2
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	041b      	lsls	r3, r3, #16
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001cd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cd4:	3303      	adds	r3, #3
 8001cd6:	683a      	ldr	r2, [r7, #0]
 8001cd8:	4413      	add	r3, r2
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	061b      	lsls	r3, r3, #24
 8001cde:	69ba      	ldr	r2, [r7, #24]
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8001ce4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ce6:	3304      	adds	r3, #4
 8001ce8:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	69db      	ldr	r3, [r3, #28]
 8001cee:	69ba      	ldr	r2, [r7, #24]
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d90a      	bls.n	8001d0a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cf8:	69bb      	ldr	r3, [r7, #24]
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	4610      	mov	r0, r2
 8001d00:	f005 fe4a 	bl	8007998 <realloc>
 8001d04:	4602      	mov	r2, r0
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	69ba      	ldr	r2, [r7, #24]
 8001d0e:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8001d10:	2300      	movs	r3, #0
 8001d12:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d14:	e03e      	b.n	8001d94 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2ce>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8001d16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d18:	683a      	ldr	r2, [r7, #0]
 8001d1a:	441a      	add	r2, r3
 8001d1c:	f107 030c 	add.w	r3, r7, #12
 8001d20:	4611      	mov	r1, r2
 8001d22:	4618      	mov	r0, r3
 8001d24:	f001 fab9 	bl	800329a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001d28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d2a:	3304      	adds	r3, #4
 8001d2c:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001d2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d30:	627b      	str	r3, [r7, #36]	; 0x24
 8001d32:	e00b      	b.n	8001d4c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x286>
          inbuffer[k-1]=inbuffer[k];
 8001d34:	683a      	ldr	r2, [r7, #0]
 8001d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d38:	441a      	add	r2, r3
 8001d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3c:	3b01      	subs	r3, #1
 8001d3e:	6839      	ldr	r1, [r7, #0]
 8001d40:	440b      	add	r3, r1
 8001d42:	7812      	ldrb	r2, [r2, #0]
 8001d44:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d48:	3301      	adds	r3, #1
 8001d4a:	627b      	str	r3, [r7, #36]	; 0x24
 8001d4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	4413      	add	r3, r2
 8001d52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d3ed      	bcc.n	8001d34 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x26e>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8001d58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	4413      	add	r3, r2
 8001d5e:	3b01      	subs	r3, #1
 8001d60:	683a      	ldr	r2, [r7, #0]
 8001d62:	4413      	add	r3, r2
 8001d64:	2200      	movs	r2, #0
 8001d66:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8001d68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d6a:	3b01      	subs	r3, #1
 8001d6c:	683a      	ldr	r2, [r7, #0]
 8001d6e:	441a      	add	r2, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8001d74:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	4413      	add	r3, r2
 8001d7a:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	4413      	add	r3, r2
 8001d86:	687a      	ldr	r2, [r7, #4]
 8001d88:	3220      	adds	r2, #32
 8001d8a:	6812      	ldr	r2, [r2, #0]
 8001d8c:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8001d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d90:	3301      	adds	r3, #1
 8001d92:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	69db      	ldr	r3, [r3, #28]
 8001d98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d3bb      	bcc.n	8001d16 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x250>
      }
     return offset;
 8001d9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8001da0:	4618      	mov	r0, r3
 8001da2:	3738      	adds	r7, #56	; 0x38
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}

08001da8 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	4b03      	ldr	r3, [pc, #12]	; (8001dc0 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8001db2:	4618      	mov	r0, r3
 8001db4:	370c      	adds	r7, #12
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	08007e94 	.word	0x08007e94

08001dc4 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	4b03      	ldr	r3, [pc, #12]	; (8001ddc <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8001dce:	4618      	mov	r0, r3
 8001dd0:	370c      	adds	r7, #12
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop
 8001ddc:	08007d74 	.word	0x08007d74

08001de0 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8001de0:	b480      	push	{r7}
 8001de2:	b085      	sub	sp, #20
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	60f8      	str	r0, [r7, #12]
 8001de8:	60b9      	str	r1, [r7, #8]
 8001dea:	607a      	str	r2, [r7, #4]
 8001dec:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	68ba      	ldr	r2, [r7, #8]
 8001df2:	601a      	str	r2, [r3, #0]
    msg_(msg),
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	687a      	ldr	r2, [r7, #4]
 8001df8:	605a      	str	r2, [r3, #4]
    endpoint_(endpoint) {};
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	683a      	ldr	r2, [r7, #0]
 8001dfe:	611a      	str	r2, [r3, #16]
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	4618      	mov	r0, r3
 8001e04:	3714      	adds	r7, #20
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr

08001e0e <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	b082      	sub	sp, #8
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	6078      	str	r0, [r7, #4]
 8001e16:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	68d8      	ldr	r0, [r3, #12]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	687a      	ldr	r2, [r7, #4]
 8001e26:	6891      	ldr	r1, [r2, #8]
 8001e28:	683a      	ldr	r2, [r7, #0]
 8001e2a:	4798      	blx	r3
 8001e2c:	4603      	mov	r3, r0
  };
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3708      	adds	r7, #8
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}

08001e36 <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8001e36:	b480      	push	{r7}
 8001e38:	b083      	sub	sp, #12
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	691b      	ldr	r3, [r3, #16]
  }
 8001e42:	4618      	mov	r0, r3
 8001e44:	370c      	adds	r7, #12
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr

08001e4e <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8001e4e:	b480      	push	{r7}
 8001e50:	b083      	sub	sp, #12
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	6078      	str	r0, [r7, #4]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001e64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e68:	4618      	mov	r0, r3
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
      huart(&huart2), rind(0), twind(0), tfind(0){
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	4a0a      	ldr	r2, [pc, #40]	; (8001ea8 <_ZN13STM32HardwareC1Ev+0x34>)
 8001e80:	601a      	str	r2, [r3, #0]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2200      	movs	r2, #0
 8001e86:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2200      	movs	r2, #0
 8001e96:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr
 8001ea8:	200000c4 	.word	0x200000c4

08001eac <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f000 f804 	bl	8001ec2 <_ZN13STM32Hardware10reset_rbufEv>
    }
 8001eba:	bf00      	nop
 8001ebc:	3708      	adds	r7, #8
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}

08001ec2 <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 8001ec2:	b580      	push	{r7, lr}
 8001ec4:	b082      	sub	sp, #8
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6818      	ldr	r0, [r3, #0]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	3304      	adds	r3, #4
 8001ed2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	f004 fc4e 	bl	8006778 <HAL_UART_Receive_DMA>
    }
 8001edc:	bf00      	nop
 8001ede:	3708      	adds	r7, #8
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}

08001ee4 <_ZN13STM32Hardware4readEv>:

    int read(){
 8001ee4:	b590      	push	{r4, r7, lr}
 8001ee6:	b085      	sub	sp, #20
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
      int c = -1;
 8001eec:	f04f 33ff 	mov.w	r3, #4294967295
 8001ef0:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f7ff ffa8 	bl	8001e4e <_ZN13STM32Hardware10getRdmaIndEv>
 8001efe:	4603      	mov	r3, r0
 8001f00:	429c      	cmp	r4, r3
 8001f02:	bf14      	ite	ne
 8001f04:	2301      	movne	r3, #1
 8001f06:	2300      	moveq	r3, #0
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d012      	beq.n	8001f34 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001f14:	1c59      	adds	r1, r3, #1
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	4413      	add	r3, r2
 8001f20:	791b      	ldrb	r3, [r3, #4]
 8001f22:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001f2a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 8001f34:	68fb      	ldr	r3, [r7, #12]
    }
 8001f36:	4618      	mov	r0, r3
 8001f38:	3714      	adds	r7, #20
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd90      	pop	{r4, r7, pc}
	...

08001f40 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b084      	sub	sp, #16
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	2b20      	cmp	r3, #32
 8001f54:	d108      	bne.n	8001f68 <_ZN13STM32Hardware5flushEv+0x28>
 8001f56:	4b33      	ldr	r3, [pc, #204]	; (8002024 <_ZN13STM32Hardware5flushEv+0xe4>)
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	f083 0301 	eor.w	r3, r3, #1
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d001      	beq.n	8001f68 <_ZN13STM32Hardware5flushEv+0x28>
 8001f64:	2301      	movs	r3, #1
 8001f66:	e000      	b.n	8001f6a <_ZN13STM32Hardware5flushEv+0x2a>
 8001f68:	2300      	movs	r3, #0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d055      	beq.n	800201a <_ZN13STM32Hardware5flushEv+0xda>
        mutex = true;
 8001f6e:	4b2d      	ldr	r3, [pc, #180]	; (8002024 <_ZN13STM32Hardware5flushEv+0xe4>)
 8001f70:	2201      	movs	r2, #1
 8001f72:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d047      	beq.n	8002014 <_ZN13STM32Hardware5flushEv+0xd4>
          uint16_t len = 0;
 8001f84:	2300      	movs	r3, #0
 8001f86:	81fb      	strh	r3, [r7, #14]
		  if(tfind < twind){
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d217      	bcs.n	8001fc8 <_ZN13STM32Hardware5flushEv+0x88>
			len = twind - tfind;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001f9e:	b29a      	uxth	r2, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001fa6:	b29b      	uxth	r3, r3
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	81fb      	strh	r3, [r7, #14]
			HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6818      	ldr	r0, [r3, #0]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001fb6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001fba:	687a      	ldr	r2, [r7, #4]
 8001fbc:	4413      	add	r3, r2
 8001fbe:	89fa      	ldrh	r2, [r7, #14]
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	f004 fb5b 	bl	800667c <HAL_UART_Transmit_DMA>
 8001fc6:	e01f      	b.n	8002008 <_ZN13STM32Hardware5flushEv+0xc8>
		  }else{
			len = tbuflen - tfind;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001fce:	b29b      	uxth	r3, r3
 8001fd0:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001fd4:	81fb      	strh	r3, [r7, #14]
			HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6818      	ldr	r0, [r3, #0]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001fe0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001fe4:	687a      	ldr	r2, [r7, #4]
 8001fe6:	4413      	add	r3, r2
 8001fe8:	89fa      	ldrh	r2, [r7, #14]
 8001fea:	4619      	mov	r1, r3
 8001fec:	f004 fb46 	bl	800667c <HAL_UART_Transmit_DMA>
			HAL_UART_Transmit_DMA(huart, (tbuf), twind);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6818      	ldr	r0, [r3, #0]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	f503 7102 	add.w	r1, r3, #520	; 0x208
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002000:	b29b      	uxth	r3, r3
 8002002:	461a      	mov	r2, r3
 8002004:	f004 fb3a 	bl	800667c <HAL_UART_Transmit_DMA>
		  }
          tfind = twind;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        }
        mutex = false;
 8002014:	4b03      	ldr	r3, [pc, #12]	; (8002024 <_ZN13STM32Hardware5flushEv+0xe4>)
 8002016:	2200      	movs	r2, #0
 8002018:	701a      	strb	r2, [r3, #0]
      }
    }
 800201a:	bf00      	nop
 800201c:	3710      	adds	r7, #16
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	200001c8 	.word	0x200001c8

08002028 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8002028:	b580      	push	{r7, lr}
 800202a:	b086      	sub	sp, #24
 800202c:	af00      	add	r7, sp, #0
 800202e:	60f8      	str	r0, [r7, #12]
 8002030:	60b9      	str	r1, [r7, #8]
 8002032:	607a      	str	r2, [r7, #4]
      int n = length;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800203e:	bfa8      	it	ge
 8002040:	f44f 7300 	movge.w	r3, #512	; 0x200
 8002044:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800204c:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	4293      	cmp	r3, r2
 8002054:	bf28      	it	cs
 8002056:	4613      	movcs	r3, r2
 8002058:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002060:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002064:	68fa      	ldr	r2, [r7, #12]
 8002066:	4413      	add	r3, r2
 8002068:	693a      	ldr	r2, [r7, #16]
 800206a:	68b9      	ldr	r1, [r7, #8]
 800206c:	4618      	mov	r0, r3
 800206e:	f005 fcff 	bl	8007a70 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	4413      	add	r3, r2
 800207c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

      if(n != n_tail){
 8002086:	697a      	ldr	r2, [r7, #20]
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	429a      	cmp	r2, r3
 800208c:	d00b      	beq.n	80020a6 <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	f503 7002 	add.w	r0, r3, #520	; 0x208
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	68ba      	ldr	r2, [r7, #8]
 8002098:	18d1      	adds	r1, r2, r3
 800209a:	697a      	ldr	r2, [r7, #20]
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	461a      	mov	r2, r3
 80020a2:	f005 fce5 	bl	8007a70 <memcpy>
      }

      flush();
 80020a6:	68f8      	ldr	r0, [r7, #12]
 80020a8:	f7ff ff4a 	bl	8001f40 <_ZN13STM32Hardware5flushEv>
    }
 80020ac:	bf00      	nop
 80020ae:	3718      	adds	r7, #24
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}

080020b4 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
 80020bc:	f002 f8ea 	bl	8004294 <HAL_GetTick>
 80020c0:	4603      	mov	r3, r0
 80020c2:	4618      	mov	r0, r3
 80020c4:	3708      	adds	r7, #8
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
	...

080020cc <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Vector3():
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	4618      	mov	r0, r3
 80020d8:	f7ff f842 	bl	8001160 <_ZN3ros3MsgC1Ev>
 80020dc:	4a0e      	ldr	r2, [pc, #56]	; (8002118 <_ZN13geometry_msgs7Vector3C1Ev+0x4c>)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	601a      	str	r2, [r3, #0]
      x(0),
 80020e2:	6879      	ldr	r1, [r7, #4]
 80020e4:	f04f 0200 	mov.w	r2, #0
 80020e8:	f04f 0300 	mov.w	r3, #0
 80020ec:	e9c1 2302 	strd	r2, r3, [r1, #8]
      y(0),
 80020f0:	6879      	ldr	r1, [r7, #4]
 80020f2:	f04f 0200 	mov.w	r2, #0
 80020f6:	f04f 0300 	mov.w	r3, #0
 80020fa:	e9c1 2304 	strd	r2, r3, [r1, #16]
      z(0)
 80020fe:	6879      	ldr	r1, [r7, #4]
 8002100:	f04f 0200 	mov.w	r2, #0
 8002104:	f04f 0300 	mov.w	r3, #0
 8002108:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	4618      	mov	r0, r3
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	08007f14 	.word	0x08007f14

0800211c <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 800211c:	b480      	push	{r7}
 800211e:	b08b      	sub	sp, #44	; 0x2c
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002126:	2300      	movs	r3, #0
 8002128:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002130:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 8002134:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002138:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800213a:	6838      	ldr	r0, [r7, #0]
 800213c:	4401      	add	r1, r0
 800213e:	b2d3      	uxtb	r3, r2
 8002140:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 8002142:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002146:	f04f 0200 	mov.w	r2, #0
 800214a:	f04f 0300 	mov.w	r3, #0
 800214e:	0a02      	lsrs	r2, r0, #8
 8002150:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002154:	0a0b      	lsrs	r3, r1, #8
 8002156:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002158:	3101      	adds	r1, #1
 800215a:	6838      	ldr	r0, [r7, #0]
 800215c:	4401      	add	r1, r0
 800215e:	b2d3      	uxtb	r3, r2
 8002160:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 8002162:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002166:	f04f 0200 	mov.w	r2, #0
 800216a:	f04f 0300 	mov.w	r3, #0
 800216e:	0c02      	lsrs	r2, r0, #16
 8002170:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002174:	0c0b      	lsrs	r3, r1, #16
 8002176:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002178:	3102      	adds	r1, #2
 800217a:	6838      	ldr	r0, [r7, #0]
 800217c:	4401      	add	r1, r0
 800217e:	b2d3      	uxtb	r3, r2
 8002180:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 8002182:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002186:	f04f 0200 	mov.w	r2, #0
 800218a:	f04f 0300 	mov.w	r3, #0
 800218e:	0e02      	lsrs	r2, r0, #24
 8002190:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002194:	0e0b      	lsrs	r3, r1, #24
 8002196:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002198:	3103      	adds	r1, #3
 800219a:	6838      	ldr	r0, [r7, #0]
 800219c:	4401      	add	r1, r0
 800219e:	b2d3      	uxtb	r3, r2
 80021a0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 80021a2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80021a6:	f04f 0200 	mov.w	r2, #0
 80021aa:	f04f 0300 	mov.w	r3, #0
 80021ae:	000a      	movs	r2, r1
 80021b0:	2300      	movs	r3, #0
 80021b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80021b4:	3104      	adds	r1, #4
 80021b6:	6838      	ldr	r0, [r7, #0]
 80021b8:	4401      	add	r1, r0
 80021ba:	b2d3      	uxtb	r3, r2
 80021bc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 80021be:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80021c2:	f04f 0200 	mov.w	r2, #0
 80021c6:	f04f 0300 	mov.w	r3, #0
 80021ca:	0a0a      	lsrs	r2, r1, #8
 80021cc:	2300      	movs	r3, #0
 80021ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80021d0:	3105      	adds	r1, #5
 80021d2:	6838      	ldr	r0, [r7, #0]
 80021d4:	4401      	add	r1, r0
 80021d6:	b2d3      	uxtb	r3, r2
 80021d8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 80021da:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80021de:	f04f 0200 	mov.w	r2, #0
 80021e2:	f04f 0300 	mov.w	r3, #0
 80021e6:	0c0a      	lsrs	r2, r1, #16
 80021e8:	2300      	movs	r3, #0
 80021ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80021ec:	3106      	adds	r1, #6
 80021ee:	6838      	ldr	r0, [r7, #0]
 80021f0:	4401      	add	r1, r0
 80021f2:	b2d3      	uxtb	r3, r2
 80021f4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 80021f6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80021fa:	f04f 0200 	mov.w	r2, #0
 80021fe:	f04f 0300 	mov.w	r3, #0
 8002202:	0e0a      	lsrs	r2, r1, #24
 8002204:	2300      	movs	r3, #0
 8002206:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002208:	3107      	adds	r1, #7
 800220a:	6838      	ldr	r0, [r7, #0]
 800220c:	4401      	add	r1, r0
 800220e:	b2d3      	uxtb	r3, r2
 8002210:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 8002212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002214:	3308      	adds	r3, #8
 8002216:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800221e:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 8002222:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002226:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002228:	6838      	ldr	r0, [r7, #0]
 800222a:	4401      	add	r1, r0
 800222c:	b2d3      	uxtb	r3, r2
 800222e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 8002230:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002234:	f04f 0200 	mov.w	r2, #0
 8002238:	f04f 0300 	mov.w	r3, #0
 800223c:	0a02      	lsrs	r2, r0, #8
 800223e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002242:	0a0b      	lsrs	r3, r1, #8
 8002244:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002246:	3101      	adds	r1, #1
 8002248:	6838      	ldr	r0, [r7, #0]
 800224a:	4401      	add	r1, r0
 800224c:	b2d3      	uxtb	r3, r2
 800224e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 8002250:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002254:	f04f 0200 	mov.w	r2, #0
 8002258:	f04f 0300 	mov.w	r3, #0
 800225c:	0c02      	lsrs	r2, r0, #16
 800225e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002262:	0c0b      	lsrs	r3, r1, #16
 8002264:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002266:	3102      	adds	r1, #2
 8002268:	6838      	ldr	r0, [r7, #0]
 800226a:	4401      	add	r1, r0
 800226c:	b2d3      	uxtb	r3, r2
 800226e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8002270:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002274:	f04f 0200 	mov.w	r2, #0
 8002278:	f04f 0300 	mov.w	r3, #0
 800227c:	0e02      	lsrs	r2, r0, #24
 800227e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002282:	0e0b      	lsrs	r3, r1, #24
 8002284:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002286:	3103      	adds	r1, #3
 8002288:	6838      	ldr	r0, [r7, #0]
 800228a:	4401      	add	r1, r0
 800228c:	b2d3      	uxtb	r3, r2
 800228e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8002290:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002294:	f04f 0200 	mov.w	r2, #0
 8002298:	f04f 0300 	mov.w	r3, #0
 800229c:	000a      	movs	r2, r1
 800229e:	2300      	movs	r3, #0
 80022a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022a2:	3104      	adds	r1, #4
 80022a4:	6838      	ldr	r0, [r7, #0]
 80022a6:	4401      	add	r1, r0
 80022a8:	b2d3      	uxtb	r3, r2
 80022aa:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 80022ac:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80022b0:	f04f 0200 	mov.w	r2, #0
 80022b4:	f04f 0300 	mov.w	r3, #0
 80022b8:	0a0a      	lsrs	r2, r1, #8
 80022ba:	2300      	movs	r3, #0
 80022bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022be:	3105      	adds	r1, #5
 80022c0:	6838      	ldr	r0, [r7, #0]
 80022c2:	4401      	add	r1, r0
 80022c4:	b2d3      	uxtb	r3, r2
 80022c6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 80022c8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80022cc:	f04f 0200 	mov.w	r2, #0
 80022d0:	f04f 0300 	mov.w	r3, #0
 80022d4:	0c0a      	lsrs	r2, r1, #16
 80022d6:	2300      	movs	r3, #0
 80022d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022da:	3106      	adds	r1, #6
 80022dc:	6838      	ldr	r0, [r7, #0]
 80022de:	4401      	add	r1, r0
 80022e0:	b2d3      	uxtb	r3, r2
 80022e2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 80022e4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80022e8:	f04f 0200 	mov.w	r2, #0
 80022ec:	f04f 0300 	mov.w	r3, #0
 80022f0:	0e0a      	lsrs	r2, r1, #24
 80022f2:	2300      	movs	r3, #0
 80022f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022f6:	3107      	adds	r1, #7
 80022f8:	6838      	ldr	r0, [r7, #0]
 80022fa:	4401      	add	r1, r0
 80022fc:	b2d3      	uxtb	r3, r2
 80022fe:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 8002300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002302:	3308      	adds	r3, #8
 8002304:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800230c:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 8002310:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002314:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002316:	6838      	ldr	r0, [r7, #0]
 8002318:	4401      	add	r1, r0
 800231a:	b2d3      	uxtb	r3, r2
 800231c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 800231e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002322:	f04f 0200 	mov.w	r2, #0
 8002326:	f04f 0300 	mov.w	r3, #0
 800232a:	0a02      	lsrs	r2, r0, #8
 800232c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002330:	0a0b      	lsrs	r3, r1, #8
 8002332:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002334:	3101      	adds	r1, #1
 8002336:	6838      	ldr	r0, [r7, #0]
 8002338:	4401      	add	r1, r0
 800233a:	b2d3      	uxtb	r3, r2
 800233c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 800233e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002342:	f04f 0200 	mov.w	r2, #0
 8002346:	f04f 0300 	mov.w	r3, #0
 800234a:	0c02      	lsrs	r2, r0, #16
 800234c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002350:	0c0b      	lsrs	r3, r1, #16
 8002352:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002354:	3102      	adds	r1, #2
 8002356:	6838      	ldr	r0, [r7, #0]
 8002358:	4401      	add	r1, r0
 800235a:	b2d3      	uxtb	r3, r2
 800235c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 800235e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002362:	f04f 0200 	mov.w	r2, #0
 8002366:	f04f 0300 	mov.w	r3, #0
 800236a:	0e02      	lsrs	r2, r0, #24
 800236c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002370:	0e0b      	lsrs	r3, r1, #24
 8002372:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002374:	3103      	adds	r1, #3
 8002376:	6838      	ldr	r0, [r7, #0]
 8002378:	4401      	add	r1, r0
 800237a:	b2d3      	uxtb	r3, r2
 800237c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 800237e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002382:	f04f 0200 	mov.w	r2, #0
 8002386:	f04f 0300 	mov.w	r3, #0
 800238a:	000a      	movs	r2, r1
 800238c:	2300      	movs	r3, #0
 800238e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002390:	3104      	adds	r1, #4
 8002392:	6838      	ldr	r0, [r7, #0]
 8002394:	4401      	add	r1, r0
 8002396:	b2d3      	uxtb	r3, r2
 8002398:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 800239a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800239e:	f04f 0200 	mov.w	r2, #0
 80023a2:	f04f 0300 	mov.w	r3, #0
 80023a6:	0a0a      	lsrs	r2, r1, #8
 80023a8:	2300      	movs	r3, #0
 80023aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023ac:	3105      	adds	r1, #5
 80023ae:	6838      	ldr	r0, [r7, #0]
 80023b0:	4401      	add	r1, r0
 80023b2:	b2d3      	uxtb	r3, r2
 80023b4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 80023b6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80023ba:	f04f 0200 	mov.w	r2, #0
 80023be:	f04f 0300 	mov.w	r3, #0
 80023c2:	0c0a      	lsrs	r2, r1, #16
 80023c4:	2300      	movs	r3, #0
 80023c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023c8:	3106      	adds	r1, #6
 80023ca:	6838      	ldr	r0, [r7, #0]
 80023cc:	4401      	add	r1, r0
 80023ce:	b2d3      	uxtb	r3, r2
 80023d0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 80023d2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80023d6:	f04f 0200 	mov.w	r2, #0
 80023da:	f04f 0300 	mov.w	r3, #0
 80023de:	0e0a      	lsrs	r2, r1, #24
 80023e0:	2300      	movs	r3, #0
 80023e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023e4:	3107      	adds	r1, #7
 80023e6:	6838      	ldr	r0, [r7, #0]
 80023e8:	4401      	add	r1, r0
 80023ea:	b2d3      	uxtb	r3, r2
 80023ec:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 80023ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f0:	3308      	adds	r3, #8
 80023f2:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 80023f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80023f6:	4618      	mov	r0, r3
 80023f8:	372c      	adds	r7, #44	; 0x2c
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr

08002402 <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002402:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002406:	b0eb      	sub	sp, #428	; 0x1ac
 8002408:	af00      	add	r7, sp, #0
 800240a:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 800240e:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
    {
      int offset = 0;
 8002412:	2300      	movs	r3, #0
 8002414:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 8002418:	f04f 0200 	mov.w	r2, #0
 800241c:	f04f 0300 	mov.w	r3, #0
 8002420:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002424:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002428:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 800242c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002430:	4413      	add	r3, r2
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	b2db      	uxtb	r3, r3
 8002436:	2200      	movs	r2, #0
 8002438:	461c      	mov	r4, r3
 800243a:	4615      	mov	r5, r2
 800243c:	ea40 0804 	orr.w	r8, r0, r4
 8002440:	ea41 0905 	orr.w	r9, r1, r5
 8002444:	e9c7 8966 	strd	r8, r9, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002448:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800244c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002450:	1c5a      	adds	r2, r3, #1
 8002452:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002456:	4413      	add	r3, r2
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	b2db      	uxtb	r3, r3
 800245c:	2200      	movs	r2, #0
 800245e:	469a      	mov	sl, r3
 8002460:	4693      	mov	fp, r2
 8002462:	f04f 0200 	mov.w	r2, #0
 8002466:	f04f 0300 	mov.w	r3, #0
 800246a:	ea4f 230b 	mov.w	r3, fp, lsl #8
 800246e:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 8002472:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8002476:	ea40 0402 	orr.w	r4, r0, r2
 800247a:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 800247e:	430b      	orrs	r3, r1
 8002480:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002484:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 8002488:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800248c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002490:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002494:	1c9a      	adds	r2, r3, #2
 8002496:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800249a:	4413      	add	r3, r2
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	2200      	movs	r2, #0
 80024a2:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 80024a6:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 80024aa:	f04f 0200 	mov.w	r2, #0
 80024ae:	f04f 0300 	mov.w	r3, #0
 80024b2:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	; 0x170
 80024b6:	464c      	mov	r4, r9
 80024b8:	0423      	lsls	r3, r4, #16
 80024ba:	4644      	mov	r4, r8
 80024bc:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 80024c0:	4644      	mov	r4, r8
 80024c2:	0422      	lsls	r2, r4, #16
 80024c4:	ea40 0402 	orr.w	r4, r0, r2
 80024c8:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 80024cc:	430b      	orrs	r3, r1
 80024ce:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 80024d2:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 80024d6:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80024da:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80024de:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80024e2:	1cda      	adds	r2, r3, #3
 80024e4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80024e8:	4413      	add	r3, r2
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	2200      	movs	r2, #0
 80024f0:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 80024f4:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 80024f8:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 80024fc:	4623      	mov	r3, r4
 80024fe:	0a1b      	lsrs	r3, r3, #8
 8002500:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8002504:	4623      	mov	r3, r4
 8002506:	061b      	lsls	r3, r3, #24
 8002508:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 800250c:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 8002510:	4623      	mov	r3, r4
 8002512:	4303      	orrs	r3, r0
 8002514:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002518:	462b      	mov	r3, r5
 800251a:	430b      	orrs	r3, r1
 800251c:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002520:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 8002524:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002528:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800252c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002530:	1d1a      	adds	r2, r3, #4
 8002532:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002536:	4413      	add	r3, r2
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	b2db      	uxtb	r3, r3
 800253c:	2200      	movs	r2, #0
 800253e:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8002542:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8002546:	f04f 0200 	mov.w	r2, #0
 800254a:	f04f 0300 	mov.w	r3, #0
 800254e:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 8002552:	0023      	movs	r3, r4
 8002554:	2200      	movs	r2, #0
 8002556:	ea40 0402 	orr.w	r4, r0, r2
 800255a:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 800255e:	430b      	orrs	r3, r1
 8002560:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8002564:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8002568:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800256c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002570:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002574:	1d5a      	adds	r2, r3, #5
 8002576:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800257a:	4413      	add	r3, r2
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	b2db      	uxtb	r3, r3
 8002580:	2200      	movs	r2, #0
 8002582:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8002586:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 800258a:	f04f 0200 	mov.w	r2, #0
 800258e:	f04f 0300 	mov.w	r3, #0
 8002592:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 8002596:	0223      	lsls	r3, r4, #8
 8002598:	2200      	movs	r2, #0
 800259a:	ea40 0402 	orr.w	r4, r0, r2
 800259e:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 80025a2:	430b      	orrs	r3, r1
 80025a4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80025a8:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 80025ac:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80025b0:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80025b4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80025b8:	1d9a      	adds	r2, r3, #6
 80025ba:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80025be:	4413      	add	r3, r2
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	2200      	movs	r2, #0
 80025c6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80025ca:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 80025ce:	f04f 0200 	mov.w	r2, #0
 80025d2:	f04f 0300 	mov.w	r3, #0
 80025d6:	f8d7 4128 	ldr.w	r4, [r7, #296]	; 0x128
 80025da:	0423      	lsls	r3, r4, #16
 80025dc:	2200      	movs	r2, #0
 80025de:	ea40 0402 	orr.w	r4, r0, r2
 80025e2:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 80025e6:	430b      	orrs	r3, r1
 80025e8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80025ec:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 80025f0:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80025f4:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80025f8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80025fc:	1dda      	adds	r2, r3, #7
 80025fe:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002602:	4413      	add	r3, r2
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	b2db      	uxtb	r3, r3
 8002608:	2200      	movs	r2, #0
 800260a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800260e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002612:	f04f 0200 	mov.w	r2, #0
 8002616:	f04f 0300 	mov.w	r3, #0
 800261a:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 800261e:	0623      	lsls	r3, r4, #24
 8002620:	2200      	movs	r2, #0
 8002622:	ea40 0402 	orr.w	r4, r0, r2
 8002626:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 800262a:	430b      	orrs	r3, r1
 800262c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002630:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 8002634:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      this->x = u_x.real;
 8002638:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800263c:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002640:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 8002644:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002648:	3308      	adds	r3, #8
 800264a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 800264e:	f04f 0200 	mov.w	r2, #0
 8002652:	f04f 0300 	mov.w	r3, #0
 8002656:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800265a:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800265e:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002662:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002666:	4413      	add	r3, r2
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	b2db      	uxtb	r3, r3
 800266c:	2200      	movs	r2, #0
 800266e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002672:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8002676:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 800267a:	4623      	mov	r3, r4
 800267c:	4303      	orrs	r3, r0
 800267e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002682:	462b      	mov	r3, r5
 8002684:	430b      	orrs	r3, r1
 8002686:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800268a:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 800268e:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002692:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002696:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800269a:	1c5a      	adds	r2, r3, #1
 800269c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80026a0:	4413      	add	r3, r2
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	2200      	movs	r2, #0
 80026a8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80026ac:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 80026b0:	f04f 0200 	mov.w	r2, #0
 80026b4:	f04f 0300 	mov.w	r3, #0
 80026b8:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 80026bc:	464c      	mov	r4, r9
 80026be:	0223      	lsls	r3, r4, #8
 80026c0:	4644      	mov	r4, r8
 80026c2:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80026c6:	4644      	mov	r4, r8
 80026c8:	0222      	lsls	r2, r4, #8
 80026ca:	ea40 0402 	orr.w	r4, r0, r2
 80026ce:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 80026d2:	430b      	orrs	r3, r1
 80026d4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80026d8:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 80026dc:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80026e0:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80026e4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80026e8:	1c9a      	adds	r2, r3, #2
 80026ea:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80026ee:	4413      	add	r3, r2
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	2200      	movs	r2, #0
 80026f6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80026fa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80026fe:	f04f 0200 	mov.w	r2, #0
 8002702:	f04f 0300 	mov.w	r3, #0
 8002706:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 800270a:	464c      	mov	r4, r9
 800270c:	0423      	lsls	r3, r4, #16
 800270e:	4644      	mov	r4, r8
 8002710:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8002714:	4644      	mov	r4, r8
 8002716:	0422      	lsls	r2, r4, #16
 8002718:	ea40 0402 	orr.w	r4, r0, r2
 800271c:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 8002720:	430b      	orrs	r3, r1
 8002722:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002726:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 800272a:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800272e:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002732:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002736:	1cda      	adds	r2, r3, #3
 8002738:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800273c:	4413      	add	r3, r2
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	b2db      	uxtb	r3, r3
 8002742:	2200      	movs	r2, #0
 8002744:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002748:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800274c:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8002750:	4623      	mov	r3, r4
 8002752:	0a1b      	lsrs	r3, r3, #8
 8002754:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002758:	4623      	mov	r3, r4
 800275a:	061b      	lsls	r3, r3, #24
 800275c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002760:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8002764:	4623      	mov	r3, r4
 8002766:	4303      	orrs	r3, r0
 8002768:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800276c:	462b      	mov	r3, r5
 800276e:	430b      	orrs	r3, r1
 8002770:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002774:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8002778:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 800277c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002780:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002784:	1d1a      	adds	r2, r3, #4
 8002786:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800278a:	4413      	add	r3, r2
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	b2db      	uxtb	r3, r3
 8002790:	2200      	movs	r2, #0
 8002792:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002796:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800279a:	f04f 0200 	mov.w	r2, #0
 800279e:	f04f 0300 	mov.w	r3, #0
 80027a2:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 80027a6:	0023      	movs	r3, r4
 80027a8:	2200      	movs	r2, #0
 80027aa:	ea40 0402 	orr.w	r4, r0, r2
 80027ae:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 80027b2:	430b      	orrs	r3, r1
 80027b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80027b8:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 80027bc:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80027c0:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80027c4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80027c8:	1d5a      	adds	r2, r3, #5
 80027ca:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80027ce:	4413      	add	r3, r2
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	2200      	movs	r2, #0
 80027d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80027da:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 80027de:	f04f 0200 	mov.w	r2, #0
 80027e2:	f04f 0300 	mov.w	r3, #0
 80027e6:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 80027ea:	0223      	lsls	r3, r4, #8
 80027ec:	2200      	movs	r2, #0
 80027ee:	ea40 0402 	orr.w	r4, r0, r2
 80027f2:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 80027f6:	430b      	orrs	r3, r1
 80027f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80027fc:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8002800:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002804:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002808:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800280c:	1d9a      	adds	r2, r3, #6
 800280e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002812:	4413      	add	r3, r2
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	b2db      	uxtb	r3, r3
 8002818:	2200      	movs	r2, #0
 800281a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800281e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002822:	f04f 0200 	mov.w	r2, #0
 8002826:	f04f 0300 	mov.w	r3, #0
 800282a:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 800282e:	0423      	lsls	r3, r4, #16
 8002830:	2200      	movs	r2, #0
 8002832:	ea40 0402 	orr.w	r4, r0, r2
 8002836:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 800283a:	430b      	orrs	r3, r1
 800283c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002840:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8002844:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002848:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800284c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002850:	1dda      	adds	r2, r3, #7
 8002852:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002856:	4413      	add	r3, r2
 8002858:	781b      	ldrb	r3, [r3, #0]
 800285a:	b2db      	uxtb	r3, r3
 800285c:	2200      	movs	r2, #0
 800285e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002862:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002866:	f04f 0200 	mov.w	r2, #0
 800286a:	f04f 0300 	mov.w	r3, #0
 800286e:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 8002872:	0623      	lsls	r3, r4, #24
 8002874:	2200      	movs	r2, #0
 8002876:	ea40 0402 	orr.w	r4, r0, r2
 800287a:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 800287e:	430b      	orrs	r3, r1
 8002880:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002884:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8002888:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      this->y = u_y.real;
 800288c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002890:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002894:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 8002898:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800289c:	3308      	adds	r3, #8
 800289e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 80028a2:	f04f 0200 	mov.w	r2, #0
 80028a6:	f04f 0300 	mov.w	r3, #0
 80028aa:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80028ae:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80028b2:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 80028b6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80028ba:	4413      	add	r3, r2
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	2200      	movs	r2, #0
 80028c2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80028c6:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80028ca:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 80028ce:	4623      	mov	r3, r4
 80028d0:	4303      	orrs	r3, r0
 80028d2:	67bb      	str	r3, [r7, #120]	; 0x78
 80028d4:	462b      	mov	r3, r5
 80028d6:	430b      	orrs	r3, r1
 80028d8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80028da:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 80028de:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80028e2:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80028e6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80028ea:	1c5a      	adds	r2, r3, #1
 80028ec:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80028f0:	4413      	add	r3, r2
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	2200      	movs	r2, #0
 80028f8:	673b      	str	r3, [r7, #112]	; 0x70
 80028fa:	677a      	str	r2, [r7, #116]	; 0x74
 80028fc:	f04f 0200 	mov.w	r2, #0
 8002900:	f04f 0300 	mov.w	r3, #0
 8002904:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002908:	464c      	mov	r4, r9
 800290a:	0223      	lsls	r3, r4, #8
 800290c:	4644      	mov	r4, r8
 800290e:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002912:	4644      	mov	r4, r8
 8002914:	0222      	lsls	r2, r4, #8
 8002916:	ea40 0402 	orr.w	r4, r0, r2
 800291a:	66bc      	str	r4, [r7, #104]	; 0x68
 800291c:	430b      	orrs	r3, r1
 800291e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002920:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8002924:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002928:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800292c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002930:	1c9a      	adds	r2, r3, #2
 8002932:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002936:	4413      	add	r3, r2
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	b2db      	uxtb	r3, r3
 800293c:	2200      	movs	r2, #0
 800293e:	663b      	str	r3, [r7, #96]	; 0x60
 8002940:	667a      	str	r2, [r7, #100]	; 0x64
 8002942:	f04f 0200 	mov.w	r2, #0
 8002946:	f04f 0300 	mov.w	r3, #0
 800294a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800294e:	464c      	mov	r4, r9
 8002950:	0423      	lsls	r3, r4, #16
 8002952:	4644      	mov	r4, r8
 8002954:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8002958:	4644      	mov	r4, r8
 800295a:	0422      	lsls	r2, r4, #16
 800295c:	ea40 0402 	orr.w	r4, r0, r2
 8002960:	65bc      	str	r4, [r7, #88]	; 0x58
 8002962:	430b      	orrs	r3, r1
 8002964:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002966:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 800296a:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800296e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002972:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002976:	1cda      	adds	r2, r3, #3
 8002978:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800297c:	4413      	add	r3, r2
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	b2db      	uxtb	r3, r3
 8002982:	2200      	movs	r2, #0
 8002984:	653b      	str	r3, [r7, #80]	; 0x50
 8002986:	657a      	str	r2, [r7, #84]	; 0x54
 8002988:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 800298c:	4623      	mov	r3, r4
 800298e:	0a1b      	lsrs	r3, r3, #8
 8002990:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002992:	4623      	mov	r3, r4
 8002994:	061b      	lsls	r3, r3, #24
 8002996:	64bb      	str	r3, [r7, #72]	; 0x48
 8002998:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800299c:	4623      	mov	r3, r4
 800299e:	4303      	orrs	r3, r0
 80029a0:	643b      	str	r3, [r7, #64]	; 0x40
 80029a2:	462b      	mov	r3, r5
 80029a4:	430b      	orrs	r3, r1
 80029a6:	647b      	str	r3, [r7, #68]	; 0x44
 80029a8:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 80029ac:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80029b0:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80029b4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80029b8:	1d1a      	adds	r2, r3, #4
 80029ba:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80029be:	4413      	add	r3, r2
 80029c0:	781b      	ldrb	r3, [r3, #0]
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	2200      	movs	r2, #0
 80029c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80029c8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80029ca:	f04f 0200 	mov.w	r2, #0
 80029ce:	f04f 0300 	mov.w	r3, #0
 80029d2:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 80029d4:	0023      	movs	r3, r4
 80029d6:	2200      	movs	r2, #0
 80029d8:	ea40 0402 	orr.w	r4, r0, r2
 80029dc:	633c      	str	r4, [r7, #48]	; 0x30
 80029de:	430b      	orrs	r3, r1
 80029e0:	637b      	str	r3, [r7, #52]	; 0x34
 80029e2:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80029e6:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80029ea:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80029ee:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80029f2:	1d5a      	adds	r2, r3, #5
 80029f4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80029f8:	4413      	add	r3, r2
 80029fa:	781b      	ldrb	r3, [r3, #0]
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	2200      	movs	r2, #0
 8002a00:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a02:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002a04:	f04f 0200 	mov.w	r2, #0
 8002a08:	f04f 0300 	mov.w	r3, #0
 8002a0c:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8002a0e:	0223      	lsls	r3, r4, #8
 8002a10:	2200      	movs	r2, #0
 8002a12:	ea40 0402 	orr.w	r4, r0, r2
 8002a16:	623c      	str	r4, [r7, #32]
 8002a18:	430b      	orrs	r3, r1
 8002a1a:	627b      	str	r3, [r7, #36]	; 0x24
 8002a1c:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8002a20:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002a24:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002a28:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002a2c:	3306      	adds	r3, #6
 8002a2e:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8002a32:	4413      	add	r3, r2
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	2200      	movs	r2, #0
 8002a3a:	61bb      	str	r3, [r7, #24]
 8002a3c:	61fa      	str	r2, [r7, #28]
 8002a3e:	f04f 0200 	mov.w	r2, #0
 8002a42:	f04f 0300 	mov.w	r3, #0
 8002a46:	69bc      	ldr	r4, [r7, #24]
 8002a48:	0423      	lsls	r3, r4, #16
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	ea40 0402 	orr.w	r4, r0, r2
 8002a50:	613c      	str	r4, [r7, #16]
 8002a52:	430b      	orrs	r3, r1
 8002a54:	617b      	str	r3, [r7, #20]
 8002a56:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002a5a:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002a5e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002a62:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002a66:	3307      	adds	r3, #7
 8002a68:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8002a6c:	4413      	add	r3, r2
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	2200      	movs	r2, #0
 8002a74:	60bb      	str	r3, [r7, #8]
 8002a76:	60fa      	str	r2, [r7, #12]
 8002a78:	f04f 0200 	mov.w	r2, #0
 8002a7c:	f04f 0300 	mov.w	r3, #0
 8002a80:	68bc      	ldr	r4, [r7, #8]
 8002a82:	0623      	lsls	r3, r4, #24
 8002a84:	2200      	movs	r2, #0
 8002a86:	ea40 0402 	orr.w	r4, r0, r2
 8002a8a:	603c      	str	r4, [r7, #0]
 8002a8c:	430b      	orrs	r3, r1
 8002a8e:	607b      	str	r3, [r7, #4]
 8002a90:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002a94:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      this->z = u_z.real;
 8002a98:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8002a9c:	f8d7 1184 	ldr.w	r1, [r7, #388]	; 0x184
 8002aa0:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 8002aa4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002aa8:	3308      	adds	r3, #8
 8002aaa:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
     return offset;
 8002aae:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
    }
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f507 77d6 	add.w	r7, r7, #428	; 0x1ac
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002abe:	4770      	bx	lr

08002ac0 <_ZN13geometry_msgs7Vector37getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Vector3"; };
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	4b03      	ldr	r3, [pc, #12]	; (8002ad8 <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 8002aca:	4618      	mov	r0, r3
 8002acc:	370c      	adds	r7, #12
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr
 8002ad6:	bf00      	nop
 8002ad8:	08007d98 	.word	0x08007d98

08002adc <_ZN13geometry_msgs7Vector36getMD5Ev>:
    virtual const char * getMD5() override { return "4a842b65f413084dc2b10fb484ea7f17"; };
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	4b03      	ldr	r3, [pc, #12]	; (8002af4 <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	370c      	adds	r7, #12
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr
 8002af2:	bf00      	nop
 8002af4:	08007db0 	.word	0x08007db0

08002af8 <_ZN13geometry_msgs5TwistC1Ev>:
      typedef geometry_msgs::Vector3 _linear_type;
      _linear_type linear;
      typedef geometry_msgs::Vector3 _angular_type;
      _angular_type angular;

    Twist():
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b082      	sub	sp, #8
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
      linear(),
      angular()
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	4618      	mov	r0, r3
 8002b04:	f7fe fb2c 	bl	8001160 <_ZN3ros3MsgC1Ev>
 8002b08:	4a08      	ldr	r2, [pc, #32]	; (8002b2c <_ZN13geometry_msgs5TwistC1Ev+0x34>)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	601a      	str	r2, [r3, #0]
      linear(),
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	3308      	adds	r3, #8
 8002b12:	4618      	mov	r0, r3
 8002b14:	f7ff fada 	bl	80020cc <_ZN13geometry_msgs7Vector3C1Ev>
      angular()
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	3328      	adds	r3, #40	; 0x28
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f7ff fad5 	bl	80020cc <_ZN13geometry_msgs7Vector3C1Ev>
    {
    }
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4618      	mov	r0, r3
 8002b26:	3708      	adds	r7, #8
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	08007efc 	.word	0x08007efc

08002b30 <_ZNK13geometry_msgs5Twist9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b084      	sub	sp, #16
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	60fb      	str	r3, [r7, #12]
      offset += this->linear.serialize(outbuffer + offset);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	f103 0008 	add.w	r0, r3, #8
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	683a      	ldr	r2, [r7, #0]
 8002b48:	4413      	add	r3, r2
 8002b4a:	4619      	mov	r1, r3
 8002b4c:	f7ff fae6 	bl	800211c <_ZNK13geometry_msgs7Vector39serializeEPh>
 8002b50:	4602      	mov	r2, r0
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	4413      	add	r3, r2
 8002b56:	60fb      	str	r3, [r7, #12]
      offset += this->angular.serialize(outbuffer + offset);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	683a      	ldr	r2, [r7, #0]
 8002b62:	4413      	add	r3, r2
 8002b64:	4619      	mov	r1, r3
 8002b66:	f7ff fad9 	bl	800211c <_ZNK13geometry_msgs7Vector39serializeEPh>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	4413      	add	r3, r2
 8002b70:	60fb      	str	r3, [r7, #12]
      return offset;
 8002b72:	68fb      	ldr	r3, [r7, #12]
    }
 8002b74:	4618      	mov	r0, r3
 8002b76:	3710      	adds	r7, #16
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}

08002b7c <_ZN13geometry_msgs5Twist11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002b86:	2300      	movs	r3, #0
 8002b88:	60fb      	str	r3, [r7, #12]
      offset += this->linear.deserialize(inbuffer + offset);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f103 0008 	add.w	r0, r3, #8
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	683a      	ldr	r2, [r7, #0]
 8002b94:	4413      	add	r3, r2
 8002b96:	4619      	mov	r1, r3
 8002b98:	f7ff fc33 	bl	8002402 <_ZN13geometry_msgs7Vector311deserializeEPh>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	4413      	add	r3, r2
 8002ba2:	60fb      	str	r3, [r7, #12]
      offset += this->angular.deserialize(inbuffer + offset);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	683a      	ldr	r2, [r7, #0]
 8002bae:	4413      	add	r3, r2
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	f7ff fc26 	bl	8002402 <_ZN13geometry_msgs7Vector311deserializeEPh>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	4413      	add	r3, r2
 8002bbc:	60fb      	str	r3, [r7, #12]
     return offset;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
    }
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3710      	adds	r7, #16
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}

08002bc8 <_ZN13geometry_msgs5Twist7getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Twist"; };
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	4b03      	ldr	r3, [pc, #12]	; (8002be0 <_ZN13geometry_msgs5Twist7getTypeEv+0x18>)
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	370c      	adds	r7, #12
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
 8002bde:	bf00      	nop
 8002be0:	08007dd4 	.word	0x08007dd4

08002be4 <_ZN13geometry_msgs5Twist6getMD5Ev>:
    virtual const char * getMD5() override { return "9f195f881246fdfa2798d1d3eebca84a"; };
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
 8002bec:	4b03      	ldr	r3, [pc, #12]	; (8002bfc <_ZN13geometry_msgs5Twist6getMD5Ev+0x18>)
 8002bee:	4618      	mov	r0, r3
 8002bf0:	370c      	adds	r7, #12
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr
 8002bfa:	bf00      	nop
 8002bfc:	08007de8 	.word	0x08007de8

08002c00 <_ZN8std_msgs5Int16C1Ev>:
  {
    public:
      typedef int16_t _data_type;
      _data_type data;

    Int16():
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
      data(0)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f7fe faa8 	bl	8001160 <_ZN3ros3MsgC1Ev>
 8002c10:	4a05      	ldr	r2, [pc, #20]	; (8002c28 <_ZN8std_msgs5Int16C1Ev+0x28>)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	601a      	str	r2, [r3, #0]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	809a      	strh	r2, [r3, #4]
    {
    }
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3708      	adds	r7, #8
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	08007ee4 	.word	0x08007ee4

08002c2c <_ZNK8std_msgs5Int169serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002c2c:	b480      	push	{r7}
 8002c2e:	b085      	sub	sp, #20
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
 8002c34:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002c36:	2300      	movs	r3, #0
 8002c38:	60fb      	str	r3, [r7, #12]
      union {
        int16_t real;
        uint16_t base;
      } u_data;
      u_data.real = this->data;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002c40:	813b      	strh	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 8002c42:	8939      	ldrh	r1, [r7, #8]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	683a      	ldr	r2, [r7, #0]
 8002c48:	4413      	add	r3, r2
 8002c4a:	b2ca      	uxtb	r2, r1
 8002c4c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_data.base >> (8 * 1)) & 0xFF;
 8002c4e:	893b      	ldrh	r3, [r7, #8]
 8002c50:	0a1b      	lsrs	r3, r3, #8
 8002c52:	b299      	uxth	r1, r3
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	3301      	adds	r3, #1
 8002c58:	683a      	ldr	r2, [r7, #0]
 8002c5a:	4413      	add	r3, r2
 8002c5c:	b2ca      	uxtb	r2, r1
 8002c5e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	3302      	adds	r3, #2
 8002c64:	60fb      	str	r3, [r7, #12]
      return offset;
 8002c66:	68fb      	ldr	r3, [r7, #12]
    }
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3714      	adds	r7, #20
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr

08002c74 <_ZN8std_msgs5Int1611deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002c74:	b480      	push	{r7}
 8002c76:	b085      	sub	sp, #20
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	60fb      	str	r3, [r7, #12]
      union {
        int16_t real;
        uint16_t base;
      } u_data;
      u_data.base = 0;
 8002c82:	2300      	movs	r3, #0
 8002c84:	813b      	strh	r3, [r7, #8]
      u_data.base |= ((uint16_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002c86:	893a      	ldrh	r2, [r7, #8]
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	6839      	ldr	r1, [r7, #0]
 8002c8c:	440b      	add	r3, r1
 8002c8e:	781b      	ldrb	r3, [r3, #0]
 8002c90:	b29b      	uxth	r3, r3
 8002c92:	4313      	orrs	r3, r2
 8002c94:	b29b      	uxth	r3, r3
 8002c96:	813b      	strh	r3, [r7, #8]
      u_data.base |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002c98:	893b      	ldrh	r3, [r7, #8]
 8002c9a:	b21a      	sxth	r2, r3
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	3301      	adds	r3, #1
 8002ca0:	6839      	ldr	r1, [r7, #0]
 8002ca2:	440b      	add	r3, r1
 8002ca4:	781b      	ldrb	r3, [r3, #0]
 8002ca6:	021b      	lsls	r3, r3, #8
 8002ca8:	b21b      	sxth	r3, r3
 8002caa:	4313      	orrs	r3, r2
 8002cac:	b21b      	sxth	r3, r3
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	813b      	strh	r3, [r7, #8]
      this->data = u_data.real;
 8002cb2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->data);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	3302      	adds	r3, #2
 8002cbe:	60fb      	str	r3, [r7, #12]
     return offset;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
    }
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3714      	adds	r7, #20
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr
	...

08002cd0 <_ZN8std_msgs5Int167getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Int16"; };
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	4b03      	ldr	r3, [pc, #12]	; (8002ce8 <_ZN8std_msgs5Int167getTypeEv+0x18>)
 8002cda:	4618      	mov	r0, r3
 8002cdc:	370c      	adds	r7, #12
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr
 8002ce6:	bf00      	nop
 8002ce8:	08007e0c 	.word	0x08007e0c

08002cec <_ZN8std_msgs5Int166getMD5Ev>:
    virtual const char * getMD5() override { return "8524586e34fbd7cb1c08c5f5f1ca0e57"; };
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	4b03      	ldr	r3, [pc, #12]	; (8002d04 <_ZN8std_msgs5Int166getMD5Ev+0x18>)
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	370c      	adds	r7, #12
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop
 8002d04:	08007e1c 	.word	0x08007e1c

08002d08 <_Z10cmd_vel_cbRKN13geometry_msgs5TwistE>:
 float demandz=0;
 float temp = 0.0;
 double demand_speed_left;
 double demand_speed_right;

 void cmd_vel_cb( const geometry_msgs::Twist& twist){
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b082      	sub	sp, #8
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
   demandx = twist.linear.x;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002d16:	4610      	mov	r0, r2
 8002d18:	4619      	mov	r1, r3
 8002d1a:	f7fd fe73 	bl	8000a04 <__aeabi_d2f>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	4a07      	ldr	r2, [pc, #28]	; (8002d40 <_Z10cmd_vel_cbRKN13geometry_msgs5TwistE+0x38>)
 8002d22:	6013      	str	r3, [r2, #0]
   demandz = twist.angular.z;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8002d2a:	4610      	mov	r0, r2
 8002d2c:	4619      	mov	r1, r3
 8002d2e:	f7fd fe69 	bl	8000a04 <__aeabi_d2f>
 8002d32:	4603      	mov	r3, r0
 8002d34:	4a03      	ldr	r2, [pc, #12]	; (8002d44 <_Z10cmd_vel_cbRKN13geometry_msgs5TwistE+0x3c>)
 8002d36:	6013      	str	r3, [r2, #0]
 }
 8002d38:	bf00      	nop
 8002d3a:	3708      	adds	r7, #8
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	200001ec 	.word	0x200001ec
 8002d44:	200001f0 	.word	0x200001f0

08002d48 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	4a04      	ldr	r2, [pc, #16]	; (8002d64 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	601a      	str	r2, [r3, #0]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4618      	mov	r0, r3
 8002d5a:	370c      	adds	r7, #12
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr
 8002d64:	08007f44 	.word	0x08007f44

08002d68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 512,
         int OUTPUT_SIZE = 512>
class NodeHandle_ : public NodeHandleBase_
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b082      	sub	sp, #8
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	4618      	mov	r0, r3
 8002d74:	f7ff ffe8 	bl	8002d48 <_ZN3ros15NodeHandleBase_C1Ev>
 8002d78:	4a36      	ldr	r2, [pc, #216]	; (8002e54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xec>)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	601a      	str	r2, [r3, #0]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	3304      	adds	r3, #4
 8002d82:	4618      	mov	r0, r3
 8002d84:	f7ff f876 	bl	8001e74 <_ZN13STM32HardwareC1Ev>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2200      	movs	r2, #0
 8002d94:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2200      	movs	r2, #0
 8002da4:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8002dae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002db2:	2100      	movs	r1, #0
 8002db4:	4618      	mov	r0, r3
 8002db6:	f004 fe26 	bl	8007a06 <memset>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8002dc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002dc4:	2100      	movs	r1, #0
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f004 fe1d 	bl	8007a06 <memset>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	f603 0324 	addw	r3, r3, #2084	; 0x824
 8002dd2:	2264      	movs	r2, #100	; 0x64
 8002dd4:	2100      	movs	r1, #0
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f004 fe15 	bl	8007a06 <memset>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	f603 0388 	addw	r3, r3, #2184	; 0x888
 8002de2:	2264      	movs	r2, #100	; 0x64
 8002de4:	2100      	movs	r1, #0
 8002de6:	4618      	mov	r0, r3
 8002de8:	f004 fe0d 	bl	8007a06 <memset>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2200      	movs	r2, #0
 8002df8:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2200      	movs	r2, #0
 8002e08:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2200      	movs	r2, #0
 8002e18:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2200      	movs	r2, #0
 8002e28:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	f603 1314 	addw	r3, r3, #2324	; 0x914
 8002e42:	4618      	mov	r0, r3
 8002e44:	f7fe fd00 	bl	8001848 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3708      	adds	r7, #8
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	08007ed0 	.word	0x08007ed0

08002e58 <_Z10publishPosv>:
ros::Publisher right_wheel_pub("rwheel", &right_wheel_msg);

ros::Subscriber<geometry_msgs::Twist> sub("cmd_vel", cmd_vel_cb );

void publishPos()
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	af00      	add	r7, sp, #0
  left_wheel_msg.data = pos_act_left;
 8002e5c:	4b09      	ldr	r3, [pc, #36]	; (8002e84 <_Z10publishPosv+0x2c>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	b21a      	sxth	r2, r3
 8002e62:	4b09      	ldr	r3, [pc, #36]	; (8002e88 <_Z10publishPosv+0x30>)
 8002e64:	809a      	strh	r2, [r3, #4]
  right_wheel_msg.data = pos_act_right;
 8002e66:	4b09      	ldr	r3, [pc, #36]	; (8002e8c <_Z10publishPosv+0x34>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	b21a      	sxth	r2, r3
 8002e6c:	4b08      	ldr	r3, [pc, #32]	; (8002e90 <_Z10publishPosv+0x38>)
 8002e6e:	809a      	strh	r2, [r3, #4]
  left_wheel_pub.publish(&left_wheel_msg);
 8002e70:	4905      	ldr	r1, [pc, #20]	; (8002e88 <_Z10publishPosv+0x30>)
 8002e72:	4808      	ldr	r0, [pc, #32]	; (8002e94 <_Z10publishPosv+0x3c>)
 8002e74:	f7fe ffcb 	bl	8001e0e <_ZN3ros9Publisher7publishEPKNS_3MsgE>
  right_wheel_pub.publish(&right_wheel_msg);
 8002e78:	4905      	ldr	r1, [pc, #20]	; (8002e90 <_Z10publishPosv+0x38>)
 8002e7a:	4807      	ldr	r0, [pc, #28]	; (8002e98 <_Z10publishPosv+0x40>)
 8002e7c:	f7fe ffc7 	bl	8001e0e <_ZN3ros9Publisher7publishEPKNS_3MsgE>
}
 8002e80:	bf00      	nop
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	200001dc 	.word	0x200001dc
 8002e88:	20000b44 	.word	0x20000b44
 8002e8c:	200001e0 	.word	0x200001e0
 8002e90:	20000b60 	.word	0x20000b60
 8002e94:	20000b4c 	.word	0x20000b4c
 8002e98:	20000b68 	.word	0x20000b68
 8002e9c:	00000000 	.word	0x00000000

08002ea0 <HAL_TIM_PeriodElapsedCallback>:



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b082      	sub	sp, #8
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]

	rpm = (int)((rightenc - rightenco)*0.6); //(No. of ticks Now - No. of Ticks Old)*60/(50*10^-3) (old calc)
 8002ea8:	4b2b      	ldr	r3, [pc, #172]	; (8002f58 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	4b2b      	ldr	r3, [pc, #172]	; (8002f5c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f7fd fb02 	bl	80004bc <__aeabi_i2d>
 8002eb8:	a323      	add	r3, pc, #140	; (adr r3, 8002f48 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8002eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ebe:	f7fd fb67 	bl	8000590 <__aeabi_dmul>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	460b      	mov	r3, r1
 8002ec6:	4610      	mov	r0, r2
 8002ec8:	4619      	mov	r1, r3
 8002eca:	f7fd fd73 	bl	80009b4 <__aeabi_d2iz>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	4a23      	ldr	r2, [pc, #140]	; (8002f60 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8002ed2:	6013      	str	r3, [r2, #0]
	rightvel = (int)((rpm * 6.28 * 7.5)/(60));
 8002ed4:	4b22      	ldr	r3, [pc, #136]	; (8002f60 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f7fd faef 	bl	80004bc <__aeabi_i2d>
 8002ede:	a31c      	add	r3, pc, #112	; (adr r3, 8002f50 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8002ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ee4:	f7fd fb54 	bl	8000590 <__aeabi_dmul>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	460b      	mov	r3, r1
 8002eec:	4610      	mov	r0, r2
 8002eee:	4619      	mov	r1, r3
 8002ef0:	f04f 0200 	mov.w	r2, #0
 8002ef4:	4b1b      	ldr	r3, [pc, #108]	; (8002f64 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8002ef6:	f7fd fb4b 	bl	8000590 <__aeabi_dmul>
 8002efa:	4602      	mov	r2, r0
 8002efc:	460b      	mov	r3, r1
 8002efe:	4610      	mov	r0, r2
 8002f00:	4619      	mov	r1, r3
 8002f02:	f04f 0200 	mov.w	r2, #0
 8002f06:	4b18      	ldr	r3, [pc, #96]	; (8002f68 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8002f08:	f7fd fc6c 	bl	80007e4 <__aeabi_ddiv>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	460b      	mov	r3, r1
 8002f10:	4610      	mov	r0, r2
 8002f12:	4619      	mov	r1, r3
 8002f14:	f7fd fd4e 	bl	80009b4 <__aeabi_d2iz>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	4a14      	ldr	r2, [pc, #80]	; (8002f6c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8002f1c:	6013      	str	r3, [r2, #0]
	rightenco = rightenc;
 8002f1e:	4b0e      	ldr	r3, [pc, #56]	; (8002f58 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a0e      	ldr	r2, [pc, #56]	; (8002f5c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8002f24:	6013      	str	r3, [r2, #0]
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8002f26:	2120      	movs	r1, #32
 8002f28:	4811      	ldr	r0, [pc, #68]	; (8002f70 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8002f2a:	f002 f8bc 	bl	80050a6 <HAL_GPIO_TogglePin>
	pos_act_left = leftenc;
 8002f2e:	4b11      	ldr	r3, [pc, #68]	; (8002f74 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a11      	ldr	r2, [pc, #68]	; (8002f78 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8002f34:	6013      	str	r3, [r2, #0]
	pos_act_right = rightenc;
 8002f36:	4b08      	ldr	r3, [pc, #32]	; (8002f58 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a10      	ldr	r2, [pc, #64]	; (8002f7c <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8002f3c:	6013      	str	r3, [r2, #0]

}
 8002f3e:	bf00      	nop
 8002f40:	3708      	adds	r7, #8
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	33333333 	.word	0x33333333
 8002f4c:	3fe33333 	.word	0x3fe33333
 8002f50:	51eb851f 	.word	0x51eb851f
 8002f54:	40191eb8 	.word	0x40191eb8
 8002f58:	200001d4 	.word	0x200001d4
 8002f5c:	200001d8 	.word	0x200001d8
 8002f60:	200001e8 	.word	0x200001e8
 8002f64:	401e0000 	.word	0x401e0000
 8002f68:	404e0000 	.word	0x404e0000
 8002f6c:	200001e4 	.word	0x200001e4
 8002f70:	40020000 	.word	0x40020000
 8002f74:	200001d0 	.word	0x200001d0
 8002f78:	200001dc 	.word	0x200001dc
 8002f7c:	200001e0 	.word	0x200001e0

08002f80 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_PIN)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b082      	sub	sp, #8
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	4603      	mov	r3, r0
 8002f88:	80fb      	strh	r3, [r7, #6]
	if(GPIO_PIN == LeftEncoderA_Pin)
 8002f8a:	88fb      	ldrh	r3, [r7, #6]
 8002f8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f90:	d167      	bne.n	8003062 <HAL_GPIO_EXTI_Callback+0xe2>
	{
		if(HAL_GPIO_ReadPin(LeftEncoderA_GPIO_Port, LeftEncoderA_Pin) == 1)
 8002f92:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002f96:	4869      	ldr	r0, [pc, #420]	; (800313c <HAL_GPIO_EXTI_Callback+0x1bc>)
 8002f98:	f002 f854 	bl	8005044 <HAL_GPIO_ReadPin>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	bf0c      	ite	eq
 8002fa2:	2301      	moveq	r3, #1
 8002fa4:	2300      	movne	r3, #0
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d026      	beq.n	8002ffa <HAL_GPIO_EXTI_Callback+0x7a>
		{
			if(HAL_GPIO_ReadPin(GPIOA, LeftEncoderB_Pin) == 1) leftenc++;
 8002fac:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002fb0:	4863      	ldr	r0, [pc, #396]	; (8003140 <HAL_GPIO_EXTI_Callback+0x1c0>)
 8002fb2:	f002 f847 	bl	8005044 <HAL_GPIO_ReadPin>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	bf0c      	ite	eq
 8002fbc:	2301      	moveq	r3, #1
 8002fbe:	2300      	movne	r3, #0
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d005      	beq.n	8002fd2 <HAL_GPIO_EXTI_Callback+0x52>
 8002fc6:	4b5f      	ldr	r3, [pc, #380]	; (8003144 <HAL_GPIO_EXTI_Callback+0x1c4>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	3301      	adds	r3, #1
 8002fcc:	4a5d      	ldr	r2, [pc, #372]	; (8003144 <HAL_GPIO_EXTI_Callback+0x1c4>)
 8002fce:	6013      	str	r3, [r2, #0]
 8002fd0:	e0ad      	b.n	800312e <HAL_GPIO_EXTI_Callback+0x1ae>
			else if(HAL_GPIO_ReadPin(GPIOA, LeftEncoderB_Pin) == 0) leftenc--;
 8002fd2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002fd6:	485a      	ldr	r0, [pc, #360]	; (8003140 <HAL_GPIO_EXTI_Callback+0x1c0>)
 8002fd8:	f002 f834 	bl	8005044 <HAL_GPIO_ReadPin>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	bf0c      	ite	eq
 8002fe2:	2301      	moveq	r3, #1
 8002fe4:	2300      	movne	r3, #0
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	f000 80a0 	beq.w	800312e <HAL_GPIO_EXTI_Callback+0x1ae>
 8002fee:	4b55      	ldr	r3, [pc, #340]	; (8003144 <HAL_GPIO_EXTI_Callback+0x1c4>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	3b01      	subs	r3, #1
 8002ff4:	4a53      	ldr	r2, [pc, #332]	; (8003144 <HAL_GPIO_EXTI_Callback+0x1c4>)
 8002ff6:	6013      	str	r3, [r2, #0]
 8002ff8:	e099      	b.n	800312e <HAL_GPIO_EXTI_Callback+0x1ae>
		}
		else if(HAL_GPIO_ReadPin(LeftEncoderA_GPIO_Port, LeftEncoderA_Pin) == 0)
 8002ffa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002ffe:	484f      	ldr	r0, [pc, #316]	; (800313c <HAL_GPIO_EXTI_Callback+0x1bc>)
 8003000:	f002 f820 	bl	8005044 <HAL_GPIO_ReadPin>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	bf0c      	ite	eq
 800300a:	2301      	moveq	r3, #1
 800300c:	2300      	movne	r3, #0
 800300e:	b2db      	uxtb	r3, r3
 8003010:	2b00      	cmp	r3, #0
 8003012:	f000 808c 	beq.w	800312e <HAL_GPIO_EXTI_Callback+0x1ae>
		{
			if(HAL_GPIO_ReadPin(GPIOA, LeftEncoderB_Pin) == 0) leftenc++;
 8003016:	f44f 7180 	mov.w	r1, #256	; 0x100
 800301a:	4849      	ldr	r0, [pc, #292]	; (8003140 <HAL_GPIO_EXTI_Callback+0x1c0>)
 800301c:	f002 f812 	bl	8005044 <HAL_GPIO_ReadPin>
 8003020:	4603      	mov	r3, r0
 8003022:	2b00      	cmp	r3, #0
 8003024:	bf0c      	ite	eq
 8003026:	2301      	moveq	r3, #1
 8003028:	2300      	movne	r3, #0
 800302a:	b2db      	uxtb	r3, r3
 800302c:	2b00      	cmp	r3, #0
 800302e:	d005      	beq.n	800303c <HAL_GPIO_EXTI_Callback+0xbc>
 8003030:	4b44      	ldr	r3, [pc, #272]	; (8003144 <HAL_GPIO_EXTI_Callback+0x1c4>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	3301      	adds	r3, #1
 8003036:	4a43      	ldr	r2, [pc, #268]	; (8003144 <HAL_GPIO_EXTI_Callback+0x1c4>)
 8003038:	6013      	str	r3, [r2, #0]
 800303a:	e078      	b.n	800312e <HAL_GPIO_EXTI_Callback+0x1ae>
			else if(HAL_GPIO_ReadPin(GPIOA, LeftEncoderB_Pin) == 1) leftenc--;
 800303c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003040:	483f      	ldr	r0, [pc, #252]	; (8003140 <HAL_GPIO_EXTI_Callback+0x1c0>)
 8003042:	f001 ffff 	bl	8005044 <HAL_GPIO_ReadPin>
 8003046:	4603      	mov	r3, r0
 8003048:	2b01      	cmp	r3, #1
 800304a:	bf0c      	ite	eq
 800304c:	2301      	moveq	r3, #1
 800304e:	2300      	movne	r3, #0
 8003050:	b2db      	uxtb	r3, r3
 8003052:	2b00      	cmp	r3, #0
 8003054:	d06b      	beq.n	800312e <HAL_GPIO_EXTI_Callback+0x1ae>
 8003056:	4b3b      	ldr	r3, [pc, #236]	; (8003144 <HAL_GPIO_EXTI_Callback+0x1c4>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	3b01      	subs	r3, #1
 800305c:	4a39      	ldr	r2, [pc, #228]	; (8003144 <HAL_GPIO_EXTI_Callback+0x1c4>)
 800305e:	6013      	str	r3, [r2, #0]
 8003060:	e065      	b.n	800312e <HAL_GPIO_EXTI_Callback+0x1ae>
		}
	}
	else if(GPIO_PIN == RightEncoderA_Pin)
 8003062:	88fb      	ldrh	r3, [r7, #6]
 8003064:	2b40      	cmp	r3, #64	; 0x40
 8003066:	d162      	bne.n	800312e <HAL_GPIO_EXTI_Callback+0x1ae>
	{
		if(HAL_GPIO_ReadPin(RightEncoderA_GPIO_Port, RightEncoderA_Pin) == 1)
 8003068:	2140      	movs	r1, #64	; 0x40
 800306a:	4837      	ldr	r0, [pc, #220]	; (8003148 <HAL_GPIO_EXTI_Callback+0x1c8>)
 800306c:	f001 ffea 	bl	8005044 <HAL_GPIO_ReadPin>
 8003070:	4603      	mov	r3, r0
 8003072:	2b01      	cmp	r3, #1
 8003074:	bf0c      	ite	eq
 8003076:	2301      	moveq	r3, #1
 8003078:	2300      	movne	r3, #0
 800307a:	b2db      	uxtb	r3, r3
 800307c:	2b00      	cmp	r3, #0
 800307e:	d025      	beq.n	80030cc <HAL_GPIO_EXTI_Callback+0x14c>
		{
			if(HAL_GPIO_ReadPin(GPIOB, RightEncoderB_Pin) == 0) rightenc++;
 8003080:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003084:	482d      	ldr	r0, [pc, #180]	; (800313c <HAL_GPIO_EXTI_Callback+0x1bc>)
 8003086:	f001 ffdd 	bl	8005044 <HAL_GPIO_ReadPin>
 800308a:	4603      	mov	r3, r0
 800308c:	2b00      	cmp	r3, #0
 800308e:	bf0c      	ite	eq
 8003090:	2301      	moveq	r3, #1
 8003092:	2300      	movne	r3, #0
 8003094:	b2db      	uxtb	r3, r3
 8003096:	2b00      	cmp	r3, #0
 8003098:	d005      	beq.n	80030a6 <HAL_GPIO_EXTI_Callback+0x126>
 800309a:	4b2c      	ldr	r3, [pc, #176]	; (800314c <HAL_GPIO_EXTI_Callback+0x1cc>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	3301      	adds	r3, #1
 80030a0:	4a2a      	ldr	r2, [pc, #168]	; (800314c <HAL_GPIO_EXTI_Callback+0x1cc>)
 80030a2:	6013      	str	r3, [r2, #0]
 80030a4:	e043      	b.n	800312e <HAL_GPIO_EXTI_Callback+0x1ae>
			else if(HAL_GPIO_ReadPin(GPIOB, RightEncoderB_Pin) == 1) rightenc--;
 80030a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80030aa:	4824      	ldr	r0, [pc, #144]	; (800313c <HAL_GPIO_EXTI_Callback+0x1bc>)
 80030ac:	f001 ffca 	bl	8005044 <HAL_GPIO_ReadPin>
 80030b0:	4603      	mov	r3, r0
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	bf0c      	ite	eq
 80030b6:	2301      	moveq	r3, #1
 80030b8:	2300      	movne	r3, #0
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d036      	beq.n	800312e <HAL_GPIO_EXTI_Callback+0x1ae>
 80030c0:	4b22      	ldr	r3, [pc, #136]	; (800314c <HAL_GPIO_EXTI_Callback+0x1cc>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	3b01      	subs	r3, #1
 80030c6:	4a21      	ldr	r2, [pc, #132]	; (800314c <HAL_GPIO_EXTI_Callback+0x1cc>)
 80030c8:	6013      	str	r3, [r2, #0]
 80030ca:	e030      	b.n	800312e <HAL_GPIO_EXTI_Callback+0x1ae>
		}
		else if(HAL_GPIO_ReadPin(RightEncoderA_GPIO_Port, RightEncoderA_Pin) == 0)
 80030cc:	2140      	movs	r1, #64	; 0x40
 80030ce:	481e      	ldr	r0, [pc, #120]	; (8003148 <HAL_GPIO_EXTI_Callback+0x1c8>)
 80030d0:	f001 ffb8 	bl	8005044 <HAL_GPIO_ReadPin>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	bf0c      	ite	eq
 80030da:	2301      	moveq	r3, #1
 80030dc:	2300      	movne	r3, #0
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d024      	beq.n	800312e <HAL_GPIO_EXTI_Callback+0x1ae>
		{
			if(HAL_GPIO_ReadPin(GPIOB, RightEncoderB_Pin) == 1) rightenc++;
 80030e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80030e8:	4814      	ldr	r0, [pc, #80]	; (800313c <HAL_GPIO_EXTI_Callback+0x1bc>)
 80030ea:	f001 ffab 	bl	8005044 <HAL_GPIO_ReadPin>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	bf0c      	ite	eq
 80030f4:	2301      	moveq	r3, #1
 80030f6:	2300      	movne	r3, #0
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d005      	beq.n	800310a <HAL_GPIO_EXTI_Callback+0x18a>
 80030fe:	4b13      	ldr	r3, [pc, #76]	; (800314c <HAL_GPIO_EXTI_Callback+0x1cc>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	3301      	adds	r3, #1
 8003104:	4a11      	ldr	r2, [pc, #68]	; (800314c <HAL_GPIO_EXTI_Callback+0x1cc>)
 8003106:	6013      	str	r3, [r2, #0]
 8003108:	e011      	b.n	800312e <HAL_GPIO_EXTI_Callback+0x1ae>
			else if(HAL_GPIO_ReadPin(GPIOB, RightEncoderB_Pin) == 0) rightenc--;
 800310a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800310e:	480b      	ldr	r0, [pc, #44]	; (800313c <HAL_GPIO_EXTI_Callback+0x1bc>)
 8003110:	f001 ff98 	bl	8005044 <HAL_GPIO_ReadPin>
 8003114:	4603      	mov	r3, r0
 8003116:	2b00      	cmp	r3, #0
 8003118:	bf0c      	ite	eq
 800311a:	2301      	moveq	r3, #1
 800311c:	2300      	movne	r3, #0
 800311e:	b2db      	uxtb	r3, r3
 8003120:	2b00      	cmp	r3, #0
 8003122:	d004      	beq.n	800312e <HAL_GPIO_EXTI_Callback+0x1ae>
 8003124:	4b09      	ldr	r3, [pc, #36]	; (800314c <HAL_GPIO_EXTI_Callback+0x1cc>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	3b01      	subs	r3, #1
 800312a:	4a08      	ldr	r2, [pc, #32]	; (800314c <HAL_GPIO_EXTI_Callback+0x1cc>)
 800312c:	6013      	str	r3, [r2, #0]
		}
	}
	flag = 1;
 800312e:	4b08      	ldr	r3, [pc, #32]	; (8003150 <HAL_GPIO_EXTI_Callback+0x1d0>)
 8003130:	2201      	movs	r2, #1
 8003132:	601a      	str	r2, [r3, #0]
}
 8003134:	bf00      	nop
 8003136:	3708      	adds	r7, #8
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}
 800313c:	40020400 	.word	0x40020400
 8003140:	40020000 	.word	0x40020000
 8003144:	200001d0 	.word	0x200001d0
 8003148:	40020800 	.word	0x40020800
 800314c:	200001d4 	.word	0x200001d4
 8003150:	200001cc 	.word	0x200001cc

08003154 <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8003154:	b580      	push	{r7, lr}
 8003156:	b082      	sub	sp, #8
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  nh.getHardware()->flush();
 800315c:	4805      	ldr	r0, [pc, #20]	; (8003174 <HAL_UART_TxCpltCallback+0x20>)
 800315e:	f000 f8f7 	bl	8003350 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8003162:	4603      	mov	r3, r0
 8003164:	4618      	mov	r0, r3
 8003166:	f7fe feeb 	bl	8001f40 <_ZN13STM32Hardware5flushEv>
}
 800316a:	bf00      	nop
 800316c:	3708      	adds	r7, #8
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	20000208 	.word	0x20000208

08003178 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  nh.getHardware()->reset_rbuf();
 8003180:	4805      	ldr	r0, [pc, #20]	; (8003198 <HAL_UART_RxCpltCallback+0x20>)
 8003182:	f000 f8e5 	bl	8003350 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8003186:	4603      	mov	r3, r0
 8003188:	4618      	mov	r0, r3
 800318a:	f7fe fe9a 	bl	8001ec2 <_ZN13STM32Hardware10reset_rbufEv>
}
 800318e:	bf00      	nop
 8003190:	3708      	adds	r7, #8
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	20000208 	.word	0x20000208

0800319c <setup>:

void setup()
{
 800319c:	b580      	push	{r7, lr}
 800319e:	af00      	add	r7, sp, #0
	nh.initNode();
 80031a0:	4808      	ldr	r0, [pc, #32]	; (80031c4 <setup+0x28>)
 80031a2:	f000 f8e1 	bl	8003368 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
	nh.advertise(left_wheel_pub);
 80031a6:	4908      	ldr	r1, [pc, #32]	; (80031c8 <setup+0x2c>)
 80031a8:	4806      	ldr	r0, [pc, #24]	; (80031c4 <setup+0x28>)
 80031aa:	f000 f8fa 	bl	80033a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
	nh.advertise(right_wheel_pub);
 80031ae:	4907      	ldr	r1, [pc, #28]	; (80031cc <setup+0x30>)
 80031b0:	4804      	ldr	r0, [pc, #16]	; (80031c4 <setup+0x28>)
 80031b2:	f000 f8f6 	bl	80033a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
	nh.subscribe(sub);
 80031b6:	4906      	ldr	r1, [pc, #24]	; (80031d0 <setup+0x34>)
 80031b8:	4802      	ldr	r0, [pc, #8]	; (80031c4 <setup+0x28>)
 80031ba:	f000 f922 	bl	8003402 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>

}
 80031be:	bf00      	nop
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop
 80031c4:	20000208 	.word	0x20000208
 80031c8:	20000b4c 	.word	0x20000b4c
 80031cc:	20000b68 	.word	0x20000b68
 80031d0:	20000b80 	.word	0x20000b80

080031d4 <loop>:
void loop()
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	af00      	add	r7, sp, #0
	publishPos();
 80031d8:	f7ff fe3e 	bl	8002e58 <_Z10publishPosv>
	nh.spinOnce();
 80031dc:	4819      	ldr	r0, [pc, #100]	; (8003244 <loop+0x70>)
 80031de:	f000 f93b 	bl	8003458 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
	demand_speed_left = demandx - (demandz*temp);
 80031e2:	4b19      	ldr	r3, [pc, #100]	; (8003248 <loop+0x74>)
 80031e4:	ed93 7a00 	vldr	s14, [r3]
 80031e8:	4b18      	ldr	r3, [pc, #96]	; (800324c <loop+0x78>)
 80031ea:	edd3 6a00 	vldr	s13, [r3]
 80031ee:	4b18      	ldr	r3, [pc, #96]	; (8003250 <loop+0x7c>)
 80031f0:	edd3 7a00 	vldr	s15, [r3]
 80031f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80031f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031fc:	ee17 0a90 	vmov	r0, s15
 8003200:	f7fd f96e 	bl	80004e0 <__aeabi_f2d>
 8003204:	4602      	mov	r2, r0
 8003206:	460b      	mov	r3, r1
 8003208:	4912      	ldr	r1, [pc, #72]	; (8003254 <loop+0x80>)
 800320a:	e9c1 2300 	strd	r2, r3, [r1]
	demand_speed_right = demandx + (demandz*temp);
 800320e:	4b0f      	ldr	r3, [pc, #60]	; (800324c <loop+0x78>)
 8003210:	ed93 7a00 	vldr	s14, [r3]
 8003214:	4b0e      	ldr	r3, [pc, #56]	; (8003250 <loop+0x7c>)
 8003216:	edd3 7a00 	vldr	s15, [r3]
 800321a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800321e:	4b0a      	ldr	r3, [pc, #40]	; (8003248 <loop+0x74>)
 8003220:	edd3 7a00 	vldr	s15, [r3]
 8003224:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003228:	ee17 0a90 	vmov	r0, s15
 800322c:	f7fd f958 	bl	80004e0 <__aeabi_f2d>
 8003230:	4602      	mov	r2, r0
 8003232:	460b      	mov	r3, r1
 8003234:	4908      	ldr	r1, [pc, #32]	; (8003258 <loop+0x84>)
 8003236:	e9c1 2300 	strd	r2, r3, [r1]
	HAL_Delay(10);
 800323a:	200a      	movs	r0, #10
 800323c:	f001 f836 	bl	80042ac <HAL_Delay>

}
 8003240:	bf00      	nop
 8003242:	bd80      	pop	{r7, pc}
 8003244:	20000208 	.word	0x20000208
 8003248:	200001ec 	.word	0x200001ec
 800324c:	200001f0 	.word	0x200001f0
 8003250:	200001f4 	.word	0x200001f4
 8003254:	200001f8 	.word	0x200001f8
 8003258:	20000200 	.word	0x20000200

0800325c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 800325c:	b480      	push	{r7}
 800325e:	b085      	sub	sp, #20
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8003266:	2300      	movs	r3, #0
 8003268:	60fb      	str	r3, [r7, #12]
 800326a:	e00c      	b.n	8003286 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x2a>
      arr[i] = (var >> (8 * i));
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	00db      	lsls	r3, r3, #3
 8003270:	683a      	ldr	r2, [r7, #0]
 8003272:	fa22 f103 	lsr.w	r1, r2, r3
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	4413      	add	r3, r2
 800327c:	b2ca      	uxtb	r2, r1
 800327e:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	3301      	adds	r3, #1
 8003284:	60fb      	str	r3, [r7, #12]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2b03      	cmp	r3, #3
 800328a:	d9ef      	bls.n	800326c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x10>
  }
 800328c:	bf00      	nop
 800328e:	bf00      	nop
 8003290:	3714      	adds	r7, #20
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr

0800329a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 800329a:	b480      	push	{r7}
 800329c:	b085      	sub	sp, #20
 800329e:	af00      	add	r7, sp, #0
 80032a0:	6078      	str	r0, [r7, #4]
 80032a2:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2200      	movs	r2, #0
 80032a8:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80032aa:	2300      	movs	r3, #0
 80032ac:	60fb      	str	r3, [r7, #12]
 80032ae:	e010      	b.n	80032d2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x38>
      var |= (arr[i] << (8 * i));
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	6839      	ldr	r1, [r7, #0]
 80032b6:	68fa      	ldr	r2, [r7, #12]
 80032b8:	440a      	add	r2, r1
 80032ba:	7812      	ldrb	r2, [r2, #0]
 80032bc:	4611      	mov	r1, r2
 80032be:	68fa      	ldr	r2, [r7, #12]
 80032c0:	00d2      	lsls	r2, r2, #3
 80032c2:	fa01 f202 	lsl.w	r2, r1, r2
 80032c6:	431a      	orrs	r2, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	3301      	adds	r3, #1
 80032d0:	60fb      	str	r3, [r7, #12]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2b03      	cmp	r3, #3
 80032d6:	d9eb      	bls.n	80032b0 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x16>
  }
 80032d8:	bf00      	nop
 80032da:	bf00      	nop
 80032dc:	3714      	adds	r7, #20
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr
	...

080032e8 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 80032e8:	b480      	push	{r7}
 80032ea:	b083      	sub	sp, #12
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	4a04      	ldr	r2, [pc, #16]	; (8003304 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	601a      	str	r2, [r3, #0]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4618      	mov	r0, r3
 80032fa:	370c      	adds	r7, #12
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr
 8003304:	08007f2c 	.word	0x08007f2c

08003308 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8003308:	b580      	push	{r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af00      	add	r7, sp, #0
 800330e:	60f8      	str	r0, [r7, #12]
 8003310:	60b9      	str	r1, [r7, #8]
 8003312:	607a      	str	r2, [r7, #4]
 8003314:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	4618      	mov	r0, r3
 800331a:	f7ff ffe5 	bl	80032e8 <_ZN3ros11Subscriber_C1Ev>
 800331e:	4a0b      	ldr	r2, [pc, #44]	; (800334c <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei+0x44>)
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	601a      	str	r2, [r3, #0]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	3310      	adds	r3, #16
 8003328:	4618      	mov	r0, r3
 800332a:	f7ff fbe5 	bl	8002af8 <_ZN13geometry_msgs5TwistC1Ev>
    cb_(cb),
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	687a      	ldr	r2, [r7, #4]
 8003332:	659a      	str	r2, [r3, #88]	; 0x58
    endpoint_(endpoint)
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	683a      	ldr	r2, [r7, #0]
 8003338:	65da      	str	r2, [r3, #92]	; 0x5c
  {
    topic_ = topic_name;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	68ba      	ldr	r2, [r7, #8]
 800333e:	609a      	str	r2, [r3, #8]
  };
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	4618      	mov	r0, r3
 8003344:	3710      	adds	r7, #16
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	08007eb8 	.word	0x08007eb8

08003350 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  /*
   * Setup Functions
   */
public:
  Hardware* getHardware()
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	3304      	adds	r3, #4
  }
 800335c:	4618      	mov	r0, r3
 800335e:	370c      	adds	r7, #12
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr

08003368 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 8003368:	b580      	push	{r7, lr}
 800336a:	b082      	sub	sp, #8
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	3304      	adds	r3, #4
 8003374:	4618      	mov	r0, r3
 8003376:	f7fe fd99 	bl	8001eac <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2200      	movs	r2, #0
 800337e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
    bytes_ = 0;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
    index_ = 0;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2200      	movs	r2, #0
 800338e:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
    topic_ = 0;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
  };
 800339a:	bf00      	nop
 800339c:	3708      	adds	r7, #8
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}

080033a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 80033a2:	b480      	push	{r7}
 80033a4:	b085      	sub	sp, #20
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	6078      	str	r0, [r7, #4]
 80033aa:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80033ac:	2300      	movs	r3, #0
 80033ae:	60fb      	str	r3, [r7, #12]
 80033b0:	e01d      	b.n	80033ee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4c>
    {
      if (publishers[i] == 0) // empty slot
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	4413      	add	r3, r2
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d111      	bne.n	80033e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x46>
      {
        publishers[i] = &p;
 80033c4:	687a      	ldr	r2, [r7, #4]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	4413      	add	r3, r2
 80033d0:	683a      	ldr	r2, [r7, #0]
 80033d2:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	60da      	str	r2, [r3, #12]
        return true;
 80033e4:	2301      	movs	r3, #1
 80033e6:	e006      	b.n	80033f6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	3301      	adds	r3, #1
 80033ec:	60fb      	str	r3, [r7, #12]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2b18      	cmp	r3, #24
 80033f2:	ddde      	ble.n	80033b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x10>
      }
    }
    return false;
 80033f4:	2300      	movs	r3, #0
  }
 80033f6:	4618      	mov	r0, r3
 80033f8:	3714      	adds	r7, #20
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr

08003402 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>:

  /* Register a new subscriber */
  bool subscribe(Subscriber_& s)
 8003402:	b480      	push	{r7}
 8003404:	b085      	sub	sp, #20
 8003406:	af00      	add	r7, sp, #0
 8003408:	6078      	str	r0, [r7, #4]
 800340a:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 800340c:	2300      	movs	r3, #0
 800340e:	60fb      	str	r3, [r7, #12]
 8003410:	e018      	b.n	8003444 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x42>
    {
      if (subscribers[i] == 0) // empty slot
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	68fa      	ldr	r2, [r7, #12]
 8003416:	f202 2222 	addw	r2, r2, #546	; 0x222
 800341a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d10d      	bne.n	800343e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x3c>
      {
        subscribers[i] = &s;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	68fa      	ldr	r2, [r7, #12]
 8003426:	f202 2222 	addw	r2, r2, #546	; 0x222
 800342a:	6839      	ldr	r1, [r7, #0]
 800342c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	605a      	str	r2, [r3, #4]
        return true;
 800343a:	2301      	movs	r3, #1
 800343c:	e006      	b.n	800344c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	3301      	adds	r3, #1
 8003442:	60fb      	str	r3, [r7, #12]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2b18      	cmp	r3, #24
 8003448:	dde3      	ble.n	8003412 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x10>
      }
    }
    return false;
 800344a:	2300      	movs	r3, #0
  }
 800344c:	4618      	mov	r0, r3
 800344e:	3714      	adds	r7, #20
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr

08003458 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce() override
 8003458:	b580      	push	{r7, lr}
 800345a:	b084      	sub	sp, #16
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	3304      	adds	r3, #4
 8003464:	4618      	mov	r0, r3
 8003466:	f7fe fe25 	bl	80020b4 <_ZN13STM32Hardware4timeEv>
 800346a:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 8003472:	68fa      	ldr	r2, [r7, #12]
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	f642 22f8 	movw	r2, #11000	; 0x2af8
 800347a:	4293      	cmp	r3, r2
 800347c:	d903      	bls.n	8003486 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2200      	movs	r2, #0
 8003482:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    if (mode_ != MODE_FIRST_FF)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800348c:	2b00      	cmp	r3, #0
 800348e:	d009      	beq.n	80034a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 8003496:	68fa      	ldr	r2, [r7, #12]
 8003498:	429a      	cmp	r2, r3
 800349a:	d903      	bls.n	80034a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
      if (spin_timeout_ > 0)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d014      	beq.n	80034d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	3304      	adds	r3, #4
 80034b2:	4618      	mov	r0, r3
 80034b4:	f7fe fdfe 	bl	80020b4 <_ZN13STM32Hardware4timeEv>
 80034b8:	4602      	mov	r2, r0
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	1ad2      	subs	r2, r2, r3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 80034c4:	429a      	cmp	r2, r3
 80034c6:	bf8c      	ite	hi
 80034c8:	2301      	movhi	r3, #1
 80034ca:	2300      	movls	r3, #0
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d002      	beq.n	80034d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 80034d2:	f06f 0301 	mvn.w	r3, #1
 80034d6:	e194      	b.n	8003802 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      int data = hardware_.read();
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	3304      	adds	r3, #4
 80034dc:	4618      	mov	r0, r3
 80034de:	f7fe fd01 	bl	8001ee4 <_ZN13STM32Hardware4readEv>
 80034e2:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	f2c0 8174 	blt.w	80037d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x37c>
      checksum_ += data;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	441a      	add	r2, r3
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003502:	2b07      	cmp	r3, #7
 8003504:	d11e      	bne.n	8003544 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 800350c:	1c59      	adds	r1, r3, #1
 800350e:	687a      	ldr	r2, [r7, #4]
 8003510:	f8c2 18f8 	str.w	r1, [r2, #2296]	; 0x8f8
 8003514:	68ba      	ldr	r2, [r7, #8]
 8003516:	b2d1      	uxtb	r1, r2
 8003518:	687a      	ldr	r2, [r7, #4]
 800351a:	4413      	add	r3, r2
 800351c:	460a      	mov	r2, r1
 800351e:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8003528:	1e5a      	subs	r2, r3, #1
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8003536:	2b00      	cmp	r3, #0
 8003538:	d1b4      	bne.n	80034a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2208      	movs	r2, #8
 800353e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003542:	e7af      	b.n	80034a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800354a:	2b00      	cmp	r3, #0
 800354c:	d128      	bne.n	80035a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	2bff      	cmp	r3, #255	; 0xff
 8003552:	d10d      	bne.n	8003570 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800355a:	1c5a      	adds	r2, r3, #1
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	f103 0214 	add.w	r2, r3, #20
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 800356e:	e799      	b.n	80034a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	3304      	adds	r3, #4
 8003574:	4618      	mov	r0, r3
 8003576:	f7fe fd9d 	bl	80020b4 <_ZN13STM32Hardware4timeEv>
 800357a:	4602      	mov	r2, r0
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	1ad3      	subs	r3, r2, r3
 8003580:	f241 3288 	movw	r2, #5000	; 0x1388
 8003584:	4293      	cmp	r3, r2
 8003586:	bf8c      	ite	hi
 8003588:	2301      	movhi	r3, #1
 800358a:	2300      	movls	r3, #0
 800358c:	b2db      	uxtb	r3, r3
 800358e:	2b00      	cmp	r3, #0
 8003590:	d088      	beq.n	80034a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2200      	movs	r2, #0
 8003596:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 800359a:	f06f 0301 	mvn.w	r3, #1
 800359e:	e130      	b.n	8003802 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      else if (mode_ == MODE_PROTOCOL_VER)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d118      	bne.n	80035dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
        if (data == PROTOCOL_VER)
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	2bfe      	cmp	r3, #254	; 0xfe
 80035ae:	d107      	bne.n	80035c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80035b6:	1c5a      	adds	r2, r3, #1
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80035be:	e771      	b.n	80034a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2200      	movs	r2, #0
 80035c4:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          if (configured_ == false)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	f47f af68 	bne.w	80034a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f000 f918 	bl	800380a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 80035da:	e763      	b.n	80034a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80035e2:	2b02      	cmp	r3, #2
 80035e4:	d113      	bne.n	800360e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
        bytes_ = data;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	68ba      	ldr	r2, [r7, #8]
 80035ea:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        index_ = 0;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
        mode_++;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80035fc:	1c5a      	adds	r2, r3, #1
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	68ba      	ldr	r2, [r7, #8]
 8003608:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 800360c:	e74a      	b.n	80034a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003614:	2b03      	cmp	r3, #3
 8003616:	d110      	bne.n	800363a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e2>
        bytes_ += data << 8;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	021b      	lsls	r3, r3, #8
 8003622:	441a      	add	r2, r3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        mode_++;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003630:	1c5a      	adds	r2, r3, #1
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003638:	e734      	b.n	80034a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003640:	2b04      	cmp	r3, #4
 8003642:	d116      	bne.n	8003672 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
        if ((checksum_ % 256) == 255)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 800364a:	425a      	negs	r2, r3
 800364c:	b2db      	uxtb	r3, r3
 800364e:	b2d2      	uxtb	r2, r2
 8003650:	bf58      	it	pl
 8003652:	4253      	negpl	r3, r2
 8003654:	2bff      	cmp	r3, #255	; 0xff
 8003656:	d107      	bne.n	8003668 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
          mode_++;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800365e:	1c5a      	adds	r2, r3, #1
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003666:	e71d      	b.n	80034a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8003670:	e718      	b.n	80034a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8003678:	2b05      	cmp	r3, #5
 800367a:	d10f      	bne.n	800369c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
        topic_ = data;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	68ba      	ldr	r2, [r7, #8]
 8003680:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_++;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800368a:	1c5a      	adds	r2, r3, #1
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	68ba      	ldr	r2, [r7, #8]
 8003696:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 800369a:	e703      	b.n	80034a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80036a2:	2b06      	cmp	r3, #6
 80036a4:	d117      	bne.n	80036d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27e>
        topic_ += data << 8;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	021b      	lsls	r3, r3, #8
 80036b0:	441a      	add	r2, r3
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2207      	movs	r2, #7
 80036bc:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if (bytes_ == 0)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	f47f aeec 	bne.w	80034a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2208      	movs	r2, #8
 80036d0:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80036d4:	e6e6      	b.n	80034a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80036dc:	2b08      	cmp	r3, #8
 80036de:	f47f aee1 	bne.w	80034a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 80036f0:	425a      	negs	r2, r3
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	b2d2      	uxtb	r2, r2
 80036f6:	bf58      	it	pl
 80036f8:	4253      	negpl	r3, r2
 80036fa:	2bff      	cmp	r3, #255	; 0xff
 80036fc:	f47f aed2 	bne.w	80034a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003706:	2b00      	cmp	r3, #0
 8003708:	d110      	bne.n	800372c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
            requestSyncTime();
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f000 f87d 	bl	800380a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f000 f898 	bl	8003846 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	68fa      	ldr	r2, [r7, #12]
 800371a:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            last_sync_receive_time = c_time;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	68fa      	ldr	r2, [r7, #12]
 8003722:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
            return SPIN_ERR;
 8003726:	f04f 33ff 	mov.w	r3, #4294967295
 800372a:	e06a      	b.n	8003802 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
          else if (topic_ == TopicInfo::ID_TIME)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003732:	2b0a      	cmp	r3, #10
 8003734:	d107      	bne.n	8003746 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ee>
            syncTime(message_in);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	f203 4324 	addw	r3, r3, #1060	; 0x424
 800373c:	4619      	mov	r1, r3
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f000 f960 	bl	8003a04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8003744:	e6ae      	b.n	80034a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800374c:	2b06      	cmp	r3, #6
 800374e:	d10e      	bne.n	800376e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x316>
            req_param_resp.deserialize(message_in);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	f603 1214 	addw	r2, r3, #2324	; 0x914
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f203 4324 	addw	r3, r3, #1060	; 0x424
 800375c:	4619      	mov	r1, r3
 800375e:	4610      	mov	r0, r2
 8003760:	f7fe f9b1 	bl	8001ac6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 800376c:	e69a      	b.n	80034a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003774:	2b0b      	cmp	r3, #11
 8003776:	d104      	bne.n	8003782 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x32a>
            configured_ = false;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2200      	movs	r2, #0
 800377c:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8003780:	e690      	b.n	80034a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8003788:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003792:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003796:	2b00      	cmp	r3, #0
 8003798:	f43f ae84 	beq.w	80034a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80037a2:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f202 2222 	addw	r2, r2, #546	; 0x222
 80037ac:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80037b6:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f202 2222 	addw	r2, r2, #546	; 0x222
 80037c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	f202 4224 	addw	r2, r2, #1060	; 0x424
 80037ce:	4611      	mov	r1, r2
 80037d0:	4798      	blx	r3
    while (true)
 80037d2:	e667      	b.n	80034a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 80037d4:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d00f      	beq.n	8003800 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 80037e6:	68fa      	ldr	r2, [r7, #12]
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d906      	bls.n	8003800 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
      requestSyncTime();
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f000 f809 	bl	800380a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	68fa      	ldr	r2, [r7, #12]
 80037fc:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    return SPIN_OK;
 8003800:	2300      	movs	r3, #0
  }
 8003802:	4618      	mov	r0, r3
 8003804:	3710      	adds	r7, #16
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}

0800380a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 800380a:	b580      	push	{r7, lr}
 800380c:	b086      	sub	sp, #24
 800380e:	af00      	add	r7, sp, #0
 8003810:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8003812:	f107 030c 	add.w	r3, r7, #12
 8003816:	4618      	mov	r0, r3
 8003818:	f7fd fcb2 	bl	8001180 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f107 020c 	add.w	r2, r7, #12
 8003826:	210a      	movs	r1, #10
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	4798      	blx	r3
    rt_time = hardware_.time();
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	3304      	adds	r3, #4
 8003830:	4618      	mov	r0, r3
 8003832:	f7fe fc3f 	bl	80020b4 <_ZN13STM32Hardware4timeEv>
 8003836:	4602      	mov	r2, r0
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 800383e:	bf00      	nop
 8003840:	3718      	adds	r7, #24
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}

08003846 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
    bool v = advertise(srv.pub);
    bool w = subscribe(srv);
    return v && w;
  }

  void negotiateTopics()
 8003846:	b590      	push	{r4, r7, lr}
 8003848:	b08b      	sub	sp, #44	; 0x2c
 800384a:	af00      	add	r7, sp, #0
 800384c:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 800384e:	f107 030c 	add.w	r3, r7, #12
 8003852:	4618      	mov	r0, r3
 8003854:	f7fd fd84 	bl	8001360 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8003858:	2300      	movs	r3, #0
 800385a:	627b      	str	r3, [r7, #36]	; 0x24
 800385c:	e062      	b.n	8003924 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xde>
    {
      if (publishers[i] != 0) // non-empty slot
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003862:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	4413      	add	r3, r2
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d056      	beq.n	800391e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xd8>
      {
        ti.topic_id = publishers[i]->id_;
 8003870:	687a      	ldr	r2, [r7, #4]
 8003872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003874:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003878:	009b      	lsls	r3, r3, #2
 800387a:	4413      	add	r3, r2
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	b29b      	uxth	r3, r3
 8003882:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003888:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	4413      	add	r3, r2
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	4413      	add	r3, r2
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	6859      	ldr	r1, [r3, #4]
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038aa:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	4413      	add	r3, r2
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	3308      	adds	r3, #8
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4608      	mov	r0, r1
 80038be:	4798      	blx	r3
 80038c0:	4603      	mov	r3, r0
 80038c2:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	4413      	add	r3, r2
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	6859      	ldr	r1, [r3, #4]
 80038d4:	687a      	ldr	r2, [r7, #4]
 80038d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80038dc:	009b      	lsls	r3, r3, #2
 80038de:	4413      	add	r3, r2
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	330c      	adds	r3, #12
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4608      	mov	r0, r1
 80038ec:	4798      	blx	r3
 80038ee:	4603      	mov	r3, r0
 80038f0:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 80038f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80038f6:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681c      	ldr	r4, [r3, #0]
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003902:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	4413      	add	r3, r2
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	4618      	mov	r0, r3
 800390e:	f7fe fa92 	bl	8001e36 <_ZN3ros9Publisher15getEndpointTypeEv>
 8003912:	4601      	mov	r1, r0
 8003914:	f107 030c 	add.w	r3, r7, #12
 8003918:	461a      	mov	r2, r3
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 800391e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003920:	3301      	adds	r3, #1
 8003922:	627b      	str	r3, [r7, #36]	; 0x24
 8003924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003926:	2b18      	cmp	r3, #24
 8003928:	dd99      	ble.n	800385e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x18>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 800392a:	2300      	movs	r3, #0
 800392c:	627b      	str	r3, [r7, #36]	; 0x24
 800392e:	e05e      	b.n	80039ee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a8>
    {
      if (subscribers[i] != 0) // non-empty slot
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003934:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003938:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d053      	beq.n	80039e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a2>
      {
        ti.topic_id = subscribers[i]->id_;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003944:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003948:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	b29b      	uxth	r3, r3
 8003950:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003956:	f202 2222 	addw	r2, r2, #546	; 0x222
 800395a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003966:	f202 2222 	addw	r2, r2, #546	; 0x222
 800396a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003972:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003976:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	3308      	adds	r3, #8
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4608      	mov	r0, r1
 8003982:	4798      	blx	r3
 8003984:	4603      	mov	r3, r0
 8003986:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800398c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8003990:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003998:	f202 2222 	addw	r2, r2, #546	; 0x222
 800399c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	330c      	adds	r3, #12
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4608      	mov	r0, r1
 80039a8:	4798      	blx	r3
 80039aa:	4603      	mov	r3, r0
 80039ac:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 80039ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80039b2:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681c      	ldr	r4, [r3, #0]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039be:	f202 2222 	addw	r2, r2, #546	; 0x222
 80039c2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039ca:	f202 2222 	addw	r2, r2, #546	; 0x222
 80039ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	3304      	adds	r3, #4
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4608      	mov	r0, r1
 80039da:	4798      	blx	r3
 80039dc:	4601      	mov	r1, r0
 80039de:	f107 030c 	add.w	r3, r7, #12
 80039e2:	461a      	mov	r2, r3
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80039e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ea:	3301      	adds	r3, #1
 80039ec:	627b      	str	r3, [r7, #36]	; 0x24
 80039ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f0:	2b18      	cmp	r3, #24
 80039f2:	dd9d      	ble.n	8003930 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xea>
      }
    }
    configured_ = true;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2201      	movs	r2, #1
 80039f8:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 80039fc:	bf00      	nop
 80039fe:	372c      	adds	r7, #44	; 0x2c
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd90      	pop	{r4, r7, pc}

08003a04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b086      	sub	sp, #24
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
 8003a0c:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8003a0e:	f107 0308 	add.w	r3, r7, #8
 8003a12:	4618      	mov	r0, r3
 8003a14:	f7fd fbb4 	bl	8001180 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	3304      	adds	r3, #4
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f7fe fb49 	bl	80020b4 <_ZN13STM32Hardware4timeEv>
 8003a22:	4602      	mov	r2, r0
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8003a2a:	1ad3      	subs	r3, r2, r3
 8003a2c:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8003a2e:	f107 0308 	add.w	r3, r7, #8
 8003a32:	6839      	ldr	r1, [r7, #0]
 8003a34:	4618      	mov	r0, r3
 8003a36:	f7fd fc13 	bl	8001260 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8003a3a:	68fa      	ldr	r2, [r7, #12]
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	4915      	ldr	r1, [pc, #84]	; (8003a94 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8003a40:	fba1 1303 	umull	r1, r3, r1, r3
 8003a44:	099b      	lsrs	r3, r3, #6
 8003a46:	4413      	add	r3, r2
 8003a48:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8003a4a:	6939      	ldr	r1, [r7, #16]
 8003a4c:	697a      	ldr	r2, [r7, #20]
 8003a4e:	4b11      	ldr	r3, [pc, #68]	; (8003a94 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8003a50:	fba3 0302 	umull	r0, r3, r3, r2
 8003a54:	099b      	lsrs	r3, r3, #6
 8003a56:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003a5a:	fb00 f303 	mul.w	r3, r0, r3
 8003a5e:	1ad3      	subs	r3, r2, r3
 8003a60:	4a0d      	ldr	r2, [pc, #52]	; (8003a98 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8003a62:	fb02 f303 	mul.w	r3, r2, r3
 8003a66:	440b      	add	r3, r1
 8003a68:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8003a6a:	f107 0308 	add.w	r3, r7, #8
 8003a6e:	3304      	adds	r3, #4
 8003a70:	4619      	mov	r1, r3
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f000 f8a6 	bl	8003bc4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	3304      	adds	r3, #4
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f7fe fb19 	bl	80020b4 <_ZN13STM32Hardware4timeEv>
 8003a82:	4602      	mov	r2, r0
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 8003a8a:	bf00      	nop
 8003a8c:	3718      	adds	r7, #24
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	bf00      	nop
 8003a94:	10624dd3 	.word	0x10624dd3
 8003a98:	000f4240 	.word	0x000f4240

08003a9c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg) override
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b088      	sub	sp, #32
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	60f8      	str	r0, [r7, #12]
 8003aa4:	60b9      	str	r1, [r7, #8]
 8003aa6:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	2b63      	cmp	r3, #99	; 0x63
 8003aac:	dd09      	ble.n	8003ac2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8003ab4:	f083 0301 	eor.w	r3, r3, #1
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d001      	beq.n	8003ac2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	e079      	b.n	8003bb6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	68fa      	ldr	r2, [r7, #12]
 8003aca:	f202 6224 	addw	r2, r2, #1572	; 0x624
 8003ace:	3207      	adds	r2, #7
 8003ad0:	4611      	mov	r1, r2
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	4798      	blx	r3
 8003ad6:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	22ff      	movs	r2, #255	; 0xff
 8003adc:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    message_out[1] = PROTOCOL_VER;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	22fe      	movs	r2, #254	; 0xfe
 8003ae4:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	b2da      	uxtb	r2, r3
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	b29b      	uxth	r3, r3
 8003af6:	0a1b      	lsrs	r3, r3, #8
 8003af8:	b29b      	uxth	r3, r3
 8003afa:	b2da      	uxtb	r2, r3
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f893 3627 	ldrb.w	r3, [r3, #1575]	; 0x627
 8003b0e:	4413      	add	r3, r2
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	43db      	mvns	r3, r3
 8003b14:	b2da      	uxtb	r2, r3
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	b2da      	uxtb	r2, r3
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	b21b      	sxth	r3, r3
 8003b2a:	121b      	asrs	r3, r3, #8
 8003b2c:	b21b      	sxth	r3, r3
 8003b2e:	b2da      	uxtb	r2, r3
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a

    /* calculate checksum */
    int chk = 0;
 8003b36:	2300      	movs	r3, #0
 8003b38:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003b3a:	2305      	movs	r3, #5
 8003b3c:	61bb      	str	r3, [r7, #24]
 8003b3e:	e00c      	b.n	8003b5a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xbe>
      chk += message_out[i];
 8003b40:	68fa      	ldr	r2, [r7, #12]
 8003b42:	69bb      	ldr	r3, [r7, #24]
 8003b44:	4413      	add	r3, r2
 8003b46:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8003b4a:	781b      	ldrb	r3, [r3, #0]
 8003b4c:	461a      	mov	r2, r3
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	4413      	add	r3, r2
 8003b52:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003b54:	69bb      	ldr	r3, [r7, #24]
 8003b56:	3301      	adds	r3, #1
 8003b58:	61bb      	str	r3, [r7, #24]
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	3306      	adds	r3, #6
 8003b5e:	69ba      	ldr	r2, [r7, #24]
 8003b60:	429a      	cmp	r2, r3
 8003b62:	dded      	ble.n	8003b40 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa4>
    l += 7;
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	3307      	adds	r3, #7
 8003b68:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	425a      	negs	r2, r3
 8003b6e:	b2db      	uxtb	r3, r3
 8003b70:	b2d2      	uxtb	r2, r2
 8003b72:	bf58      	it	pl
 8003b74:	4253      	negpl	r3, r2
 8003b76:	b2da      	uxtb	r2, r3
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	1c59      	adds	r1, r3, #1
 8003b7c:	6179      	str	r1, [r7, #20]
 8003b7e:	43d2      	mvns	r2, r2
 8003b80:	b2d1      	uxtb	r1, r2
 8003b82:	68fa      	ldr	r2, [r7, #12]
 8003b84:	4413      	add	r3, r2
 8003b86:	460a      	mov	r2, r1
 8003b88:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624

    if (l <= OUTPUT_SIZE)
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b92:	dc0a      	bgt.n	8003baa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	1d18      	adds	r0, r3, #4
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8003b9e:	697a      	ldr	r2, [r7, #20]
 8003ba0:	4619      	mov	r1, r3
 8003ba2:	f7fe fa41 	bl	8002028 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	e005      	b.n	8003bb6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8003baa:	4905      	ldr	r1, [pc, #20]	; (8003bc0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 8003bac:	68f8      	ldr	r0, [r7, #12]
 8003bae:	f000 f849 	bl	8003c44 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8003bb2:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3720      	adds	r7, #32
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	bf00      	nop
 8003bc0:	08007e40 	.word	0x08007e40

08003bc4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b084      	sub	sp, #16
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
 8003bcc:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	3304      	adds	r3, #4
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f7fe fa6e 	bl	80020b4 <_ZN13STM32Hardware4timeEv>
 8003bd8:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	4915      	ldr	r1, [pc, #84]	; (8003c38 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 8003be2:	fba1 1303 	umull	r1, r3, r1, r3
 8003be6:	099b      	lsrs	r3, r3, #6
 8003be8:	1ad3      	subs	r3, r2, r3
 8003bea:	1e5a      	subs	r2, r3, #1
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	6859      	ldr	r1, [r3, #4]
 8003bf6:	68fa      	ldr	r2, [r7, #12]
 8003bf8:	4b0f      	ldr	r3, [pc, #60]	; (8003c38 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 8003bfa:	fba3 0302 	umull	r0, r3, r3, r2
 8003bfe:	099b      	lsrs	r3, r3, #6
 8003c00:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003c04:	fb00 f303 	mul.w	r3, r0, r3
 8003c08:	1ad3      	subs	r3, r2, r3
 8003c0a:	4a0c      	ldr	r2, [pc, #48]	; (8003c3c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x78>)
 8003c0c:	fb02 f303 	mul.w	r3, r2, r3
 8003c10:	1aca      	subs	r2, r1, r3
 8003c12:	4b0b      	ldr	r3, [pc, #44]	; (8003c40 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x7c>)
 8003c14:	4413      	add	r3, r2
 8003c16:	687a      	ldr	r2, [r7, #4]
 8003c18:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8003c28:	4619      	mov	r1, r3
 8003c2a:	4610      	mov	r0, r2
 8003c2c:	f000 fa76 	bl	800411c <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8003c30:	bf00      	nop
 8003c32:	3710      	adds	r7, #16
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}
 8003c38:	10624dd3 	.word	0x10624dd3
 8003c3c:	000f4240 	.word	0x000f4240
 8003c40:	3b9aca00 	.word	0x3b9aca00

08003c44 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b082      	sub	sp, #8
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8003c4e:	683a      	ldr	r2, [r7, #0]
 8003c50:	2103      	movs	r1, #3
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f000 f804 	bl	8003c60 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8003c58:	bf00      	nop
 8003c5a:	3708      	adds	r7, #8
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}

08003c60 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b088      	sub	sp, #32
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	60f8      	str	r0, [r7, #12]
 8003c68:	460b      	mov	r3, r1
 8003c6a:	607a      	str	r2, [r7, #4]
 8003c6c:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8003c6e:	f107 0314 	add.w	r3, r7, #20
 8003c72:	4618      	mov	r0, r3
 8003c74:	f7fd fd38 	bl	80016e8 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8003c78:	7afb      	ldrb	r3, [r7, #11]
 8003c7a:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f107 0214 	add.w	r2, r7, #20
 8003c8a:	2107      	movs	r1, #7
 8003c8c:	68f8      	ldr	r0, [r7, #12]
 8003c8e:	4798      	blx	r3
  }
 8003c90:	bf00      	nop
 8003c92:	3720      	adds	r7, #32
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}

08003c98 <_Z41__static_initialization_and_destruction_0ii>:
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b082      	sub	sp, #8
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	6039      	str	r1, [r7, #0]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d11f      	bne.n	8003ce8 <_Z41__static_initialization_and_destruction_0ii+0x50>
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d11a      	bne.n	8003ce8 <_Z41__static_initialization_and_destruction_0ii+0x50>
ros::NodeHandle nh;
 8003cb2:	480f      	ldr	r0, [pc, #60]	; (8003cf0 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8003cb4:	f7ff f858 	bl	8002d68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
std_msgs::Int16 left_wheel_msg;
 8003cb8:	480e      	ldr	r0, [pc, #56]	; (8003cf4 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8003cba:	f7fe ffa1 	bl	8002c00 <_ZN8std_msgs5Int16C1Ev>
ros::Publisher left_wheel_pub("lwheel", &left_wheel_msg);
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	4a0c      	ldr	r2, [pc, #48]	; (8003cf4 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8003cc2:	490d      	ldr	r1, [pc, #52]	; (8003cf8 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8003cc4:	480d      	ldr	r0, [pc, #52]	; (8003cfc <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8003cc6:	f7fe f88b 	bl	8001de0 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
std_msgs::Int16 right_wheel_msg;
 8003cca:	480d      	ldr	r0, [pc, #52]	; (8003d00 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8003ccc:	f7fe ff98 	bl	8002c00 <_ZN8std_msgs5Int16C1Ev>
ros::Publisher right_wheel_pub("rwheel", &right_wheel_msg);
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	4a0b      	ldr	r2, [pc, #44]	; (8003d00 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8003cd4:	490b      	ldr	r1, [pc, #44]	; (8003d04 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8003cd6:	480c      	ldr	r0, [pc, #48]	; (8003d08 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8003cd8:	f7fe f882 	bl	8001de0 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Subscriber<geometry_msgs::Twist> sub("cmd_vel", cmd_vel_cb );
 8003cdc:	2301      	movs	r3, #1
 8003cde:	4a0b      	ldr	r2, [pc, #44]	; (8003d0c <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8003ce0:	490b      	ldr	r1, [pc, #44]	; (8003d10 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8003ce2:	480c      	ldr	r0, [pc, #48]	; (8003d14 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8003ce4:	f7ff fb10 	bl	8003308 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>
}
 8003ce8:	bf00      	nop
 8003cea:	3708      	adds	r7, #8
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}
 8003cf0:	20000208 	.word	0x20000208
 8003cf4:	20000b44 	.word	0x20000b44
 8003cf8:	08007e7c 	.word	0x08007e7c
 8003cfc:	20000b4c 	.word	0x20000b4c
 8003d00:	20000b60 	.word	0x20000b60
 8003d04:	08007e84 	.word	0x08007e84
 8003d08:	20000b68 	.word	0x20000b68
 8003d0c:	08002d09 	.word	0x08002d09
 8003d10:	08007e8c 	.word	0x08007e8c
 8003d14:	20000b80 	.word	0x20000b80

08003d18 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE8callbackEPh>:

  virtual void callback(unsigned char* data) override
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b082      	sub	sp, #8
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
 8003d20:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	3310      	adds	r3, #16
 8003d26:	6839      	ldr	r1, [r7, #0]
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f7fe ff27 	bl	8002b7c <_ZN13geometry_msgs5Twist11deserializeEPh>
    this->cb_(msg);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d32:	687a      	ldr	r2, [r7, #4]
 8003d34:	3210      	adds	r2, #16
 8003d36:	4610      	mov	r0, r2
 8003d38:	4798      	blx	r3
  }
 8003d3a:	bf00      	nop
 8003d3c:	3708      	adds	r7, #8
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}

08003d42 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5() override
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType() override
 8003d42:	b480      	push	{r7}
 8003d44:	b083      	sub	sp, #12
 8003d46:	af00      	add	r7, sp, #0
 8003d48:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  }
 8003d4e:	4618      	mov	r0, r3
 8003d50:	370c      	adds	r7, #12
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr

08003d5a <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE10getMsgTypeEv>:
  virtual const char * getMsgType() override
 8003d5a:	b580      	push	{r7, lr}
 8003d5c:	b082      	sub	sp, #8
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	3310      	adds	r3, #16
 8003d66:	4618      	mov	r0, r3
 8003d68:	f7fe ff2e 	bl	8002bc8 <_ZN13geometry_msgs5Twist7getTypeEv>
 8003d6c:	4603      	mov	r3, r0
  }
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3708      	adds	r7, #8
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}

08003d76 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5() override
 8003d76:	b580      	push	{r7, lr}
 8003d78:	b082      	sub	sp, #8
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	3310      	adds	r3, #16
 8003d82:	4618      	mov	r0, r3
 8003d84:	f7fe ff2e 	bl	8002be4 <_ZN13geometry_msgs5Twist6getMD5Ev>
 8003d88:	4603      	mov	r3, r0
  }
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3708      	adds	r7, #8
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}

08003d92 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected() override
 8003d92:	b480      	push	{r7}
 8003d94:	b083      	sub	sp, #12
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	6078      	str	r0, [r7, #4]
    return configured_;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 8003da0:	4618      	mov	r0, r3
 8003da2:	370c      	adds	r7, #12
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr

08003dac <_GLOBAL__sub_I_flag>:
 8003dac:	b580      	push	{r7, lr}
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003db4:	2001      	movs	r0, #1
 8003db6:	f7ff ff6f 	bl	8003c98 <_Z41__static_initialization_and_destruction_0ii>
 8003dba:	bd80      	pop	{r7, pc}

08003dbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b082      	sub	sp, #8
 8003dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	607b      	str	r3, [r7, #4]
 8003dc6:	4b10      	ldr	r3, [pc, #64]	; (8003e08 <HAL_MspInit+0x4c>)
 8003dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dca:	4a0f      	ldr	r2, [pc, #60]	; (8003e08 <HAL_MspInit+0x4c>)
 8003dcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003dd0:	6453      	str	r3, [r2, #68]	; 0x44
 8003dd2:	4b0d      	ldr	r3, [pc, #52]	; (8003e08 <HAL_MspInit+0x4c>)
 8003dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003dda:	607b      	str	r3, [r7, #4]
 8003ddc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003dde:	2300      	movs	r3, #0
 8003de0:	603b      	str	r3, [r7, #0]
 8003de2:	4b09      	ldr	r3, [pc, #36]	; (8003e08 <HAL_MspInit+0x4c>)
 8003de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de6:	4a08      	ldr	r2, [pc, #32]	; (8003e08 <HAL_MspInit+0x4c>)
 8003de8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dec:	6413      	str	r3, [r2, #64]	; 0x40
 8003dee:	4b06      	ldr	r3, [pc, #24]	; (8003e08 <HAL_MspInit+0x4c>)
 8003df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003df6:	603b      	str	r3, [r7, #0]
 8003df8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003dfa:	2007      	movs	r0, #7
 8003dfc:	f000 fb4a 	bl	8004494 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003e00:	bf00      	nop
 8003e02:	3708      	adds	r7, #8
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}
 8003e08:	40023800 	.word	0x40023800

08003e0c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e1c:	d115      	bne.n	8003e4a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003e1e:	2300      	movs	r3, #0
 8003e20:	60fb      	str	r3, [r7, #12]
 8003e22:	4b0c      	ldr	r3, [pc, #48]	; (8003e54 <HAL_TIM_Base_MspInit+0x48>)
 8003e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e26:	4a0b      	ldr	r2, [pc, #44]	; (8003e54 <HAL_TIM_Base_MspInit+0x48>)
 8003e28:	f043 0301 	orr.w	r3, r3, #1
 8003e2c:	6413      	str	r3, [r2, #64]	; 0x40
 8003e2e:	4b09      	ldr	r3, [pc, #36]	; (8003e54 <HAL_TIM_Base_MspInit+0x48>)
 8003e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e32:	f003 0301 	and.w	r3, r3, #1
 8003e36:	60fb      	str	r3, [r7, #12]
 8003e38:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	2100      	movs	r1, #0
 8003e3e:	201c      	movs	r0, #28
 8003e40:	f000 fb33 	bl	80044aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003e44:	201c      	movs	r0, #28
 8003e46:	f000 fb4c 	bl	80044e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003e4a:	bf00      	nop
 8003e4c:	3710      	adds	r7, #16
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop
 8003e54:	40023800 	.word	0x40023800

08003e58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b08a      	sub	sp, #40	; 0x28
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e60:	f107 0314 	add.w	r3, r7, #20
 8003e64:	2200      	movs	r2, #0
 8003e66:	601a      	str	r2, [r3, #0]
 8003e68:	605a      	str	r2, [r3, #4]
 8003e6a:	609a      	str	r2, [r3, #8]
 8003e6c:	60da      	str	r2, [r3, #12]
 8003e6e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a4d      	ldr	r2, [pc, #308]	; (8003fac <HAL_UART_MspInit+0x154>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	f040 8093 	bne.w	8003fa2 <HAL_UART_MspInit+0x14a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	613b      	str	r3, [r7, #16]
 8003e80:	4b4b      	ldr	r3, [pc, #300]	; (8003fb0 <HAL_UART_MspInit+0x158>)
 8003e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e84:	4a4a      	ldr	r2, [pc, #296]	; (8003fb0 <HAL_UART_MspInit+0x158>)
 8003e86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e8a:	6413      	str	r3, [r2, #64]	; 0x40
 8003e8c:	4b48      	ldr	r3, [pc, #288]	; (8003fb0 <HAL_UART_MspInit+0x158>)
 8003e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e94:	613b      	str	r3, [r7, #16]
 8003e96:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e98:	2300      	movs	r3, #0
 8003e9a:	60fb      	str	r3, [r7, #12]
 8003e9c:	4b44      	ldr	r3, [pc, #272]	; (8003fb0 <HAL_UART_MspInit+0x158>)
 8003e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea0:	4a43      	ldr	r2, [pc, #268]	; (8003fb0 <HAL_UART_MspInit+0x158>)
 8003ea2:	f043 0301 	orr.w	r3, r3, #1
 8003ea6:	6313      	str	r3, [r2, #48]	; 0x30
 8003ea8:	4b41      	ldr	r3, [pc, #260]	; (8003fb0 <HAL_UART_MspInit+0x158>)
 8003eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eac:	f003 0301 	and.w	r3, r3, #1
 8003eb0:	60fb      	str	r3, [r7, #12]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003eb4:	230c      	movs	r3, #12
 8003eb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003eb8:	2302      	movs	r3, #2
 8003eba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ec0:	2303      	movs	r3, #3
 8003ec2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003ec4:	2307      	movs	r3, #7
 8003ec6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ec8:	f107 0314 	add.w	r3, r7, #20
 8003ecc:	4619      	mov	r1, r3
 8003ece:	4839      	ldr	r0, [pc, #228]	; (8003fb4 <HAL_UART_MspInit+0x15c>)
 8003ed0:	f000 ff24 	bl	8004d1c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8003ed4:	4b38      	ldr	r3, [pc, #224]	; (8003fb8 <HAL_UART_MspInit+0x160>)
 8003ed6:	4a39      	ldr	r2, [pc, #228]	; (8003fbc <HAL_UART_MspInit+0x164>)
 8003ed8:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8003eda:	4b37      	ldr	r3, [pc, #220]	; (8003fb8 <HAL_UART_MspInit+0x160>)
 8003edc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003ee0:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003ee2:	4b35      	ldr	r3, [pc, #212]	; (8003fb8 <HAL_UART_MspInit+0x160>)
 8003ee4:	2240      	movs	r2, #64	; 0x40
 8003ee6:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003ee8:	4b33      	ldr	r3, [pc, #204]	; (8003fb8 <HAL_UART_MspInit+0x160>)
 8003eea:	2200      	movs	r2, #0
 8003eec:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003eee:	4b32      	ldr	r3, [pc, #200]	; (8003fb8 <HAL_UART_MspInit+0x160>)
 8003ef0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003ef4:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003ef6:	4b30      	ldr	r3, [pc, #192]	; (8003fb8 <HAL_UART_MspInit+0x160>)
 8003ef8:	2200      	movs	r2, #0
 8003efa:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003efc:	4b2e      	ldr	r3, [pc, #184]	; (8003fb8 <HAL_UART_MspInit+0x160>)
 8003efe:	2200      	movs	r2, #0
 8003f00:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003f02:	4b2d      	ldr	r3, [pc, #180]	; (8003fb8 <HAL_UART_MspInit+0x160>)
 8003f04:	2200      	movs	r2, #0
 8003f06:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8003f08:	4b2b      	ldr	r3, [pc, #172]	; (8003fb8 <HAL_UART_MspInit+0x160>)
 8003f0a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003f0e:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003f10:	4b29      	ldr	r3, [pc, #164]	; (8003fb8 <HAL_UART_MspInit+0x160>)
 8003f12:	2200      	movs	r2, #0
 8003f14:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003f16:	4828      	ldr	r0, [pc, #160]	; (8003fb8 <HAL_UART_MspInit+0x160>)
 8003f18:	f000 fafe 	bl	8004518 <HAL_DMA_Init>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d001      	beq.n	8003f26 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8003f22:	f7fd f907 	bl	8001134 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	4a23      	ldr	r2, [pc, #140]	; (8003fb8 <HAL_UART_MspInit+0x160>)
 8003f2a:	635a      	str	r2, [r3, #52]	; 0x34
 8003f2c:	4a22      	ldr	r2, [pc, #136]	; (8003fb8 <HAL_UART_MspInit+0x160>)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003f32:	4b23      	ldr	r3, [pc, #140]	; (8003fc0 <HAL_UART_MspInit+0x168>)
 8003f34:	4a23      	ldr	r2, [pc, #140]	; (8003fc4 <HAL_UART_MspInit+0x16c>)
 8003f36:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8003f38:	4b21      	ldr	r3, [pc, #132]	; (8003fc0 <HAL_UART_MspInit+0x168>)
 8003f3a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003f3e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003f40:	4b1f      	ldr	r3, [pc, #124]	; (8003fc0 <HAL_UART_MspInit+0x168>)
 8003f42:	2200      	movs	r2, #0
 8003f44:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f46:	4b1e      	ldr	r3, [pc, #120]	; (8003fc0 <HAL_UART_MspInit+0x168>)
 8003f48:	2200      	movs	r2, #0
 8003f4a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003f4c:	4b1c      	ldr	r3, [pc, #112]	; (8003fc0 <HAL_UART_MspInit+0x168>)
 8003f4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003f52:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003f54:	4b1a      	ldr	r3, [pc, #104]	; (8003fc0 <HAL_UART_MspInit+0x168>)
 8003f56:	2200      	movs	r2, #0
 8003f58:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003f5a:	4b19      	ldr	r3, [pc, #100]	; (8003fc0 <HAL_UART_MspInit+0x168>)
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8003f60:	4b17      	ldr	r3, [pc, #92]	; (8003fc0 <HAL_UART_MspInit+0x168>)
 8003f62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f66:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8003f68:	4b15      	ldr	r3, [pc, #84]	; (8003fc0 <HAL_UART_MspInit+0x168>)
 8003f6a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003f6e:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003f70:	4b13      	ldr	r3, [pc, #76]	; (8003fc0 <HAL_UART_MspInit+0x168>)
 8003f72:	2200      	movs	r2, #0
 8003f74:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003f76:	4812      	ldr	r0, [pc, #72]	; (8003fc0 <HAL_UART_MspInit+0x168>)
 8003f78:	f000 face 	bl	8004518 <HAL_DMA_Init>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d001      	beq.n	8003f86 <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 8003f82:	f7fd f8d7 	bl	8001134 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	4a0d      	ldr	r2, [pc, #52]	; (8003fc0 <HAL_UART_MspInit+0x168>)
 8003f8a:	639a      	str	r2, [r3, #56]	; 0x38
 8003f8c:	4a0c      	ldr	r2, [pc, #48]	; (8003fc0 <HAL_UART_MspInit+0x168>)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003f92:	2200      	movs	r2, #0
 8003f94:	2100      	movs	r1, #0
 8003f96:	2026      	movs	r0, #38	; 0x26
 8003f98:	f000 fa87 	bl	80044aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003f9c:	2026      	movs	r0, #38	; 0x26
 8003f9e:	f000 faa0 	bl	80044e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003fa2:	bf00      	nop
 8003fa4:	3728      	adds	r7, #40	; 0x28
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}
 8003faa:	bf00      	nop
 8003fac:	40004400 	.word	0x40004400
 8003fb0:	40023800 	.word	0x40023800
 8003fb4:	40020000 	.word	0x40020000
 8003fb8:	20000168 	.word	0x20000168
 8003fbc:	400260a0 	.word	0x400260a0
 8003fc0:	20000108 	.word	0x20000108
 8003fc4:	40026088 	.word	0x40026088

08003fc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003fcc:	e7fe      	b.n	8003fcc <NMI_Handler+0x4>

08003fce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003fce:	b480      	push	{r7}
 8003fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003fd2:	e7fe      	b.n	8003fd2 <HardFault_Handler+0x4>

08003fd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003fd8:	e7fe      	b.n	8003fd8 <MemManage_Handler+0x4>

08003fda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003fda:	b480      	push	{r7}
 8003fdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003fde:	e7fe      	b.n	8003fde <BusFault_Handler+0x4>

08003fe0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003fe4:	e7fe      	b.n	8003fe4 <UsageFault_Handler+0x4>

08003fe6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003fe6:	b480      	push	{r7}
 8003fe8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003fea:	bf00      	nop
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr

08003ff4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003ff8:	bf00      	nop
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr

08004002 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004002:	b480      	push	{r7}
 8004004:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004006:	bf00      	nop
 8004008:	46bd      	mov	sp, r7
 800400a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400e:	4770      	bx	lr

08004010 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004014:	f000 f92a 	bl	800426c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004018:	bf00      	nop
 800401a:	bd80      	pop	{r7, pc}

0800401c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004020:	4802      	ldr	r0, [pc, #8]	; (800402c <DMA1_Stream5_IRQHandler+0x10>)
 8004022:	f000 fc11 	bl	8004848 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8004026:	bf00      	nop
 8004028:	bd80      	pop	{r7, pc}
 800402a:	bf00      	nop
 800402c:	20000108 	.word	0x20000108

08004030 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004034:	4802      	ldr	r0, [pc, #8]	; (8004040 <DMA1_Stream6_IRQHandler+0x10>)
 8004036:	f000 fc07 	bl	8004848 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800403a:	bf00      	nop
 800403c:	bd80      	pop	{r7, pc}
 800403e:	bf00      	nop
 8004040:	20000168 	.word	0x20000168

08004044 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RightEncoderA_Pin);
 8004048:	2040      	movs	r0, #64	; 0x40
 800404a:	f001 f847 	bl	80050dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800404e:	bf00      	nop
 8004050:	bd80      	pop	{r7, pc}
	...

08004054 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004058:	4802      	ldr	r0, [pc, #8]	; (8004064 <TIM2_IRQHandler+0x10>)
 800405a:	f001 feff 	bl	8005e5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800405e:	bf00      	nop
 8004060:	bd80      	pop	{r7, pc}
 8004062:	bf00      	nop
 8004064:	2000007c 	.word	0x2000007c

08004068 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800406c:	4802      	ldr	r0, [pc, #8]	; (8004078 <USART2_IRQHandler+0x10>)
 800406e:	f002 fbb3 	bl	80067d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004072:	bf00      	nop
 8004074:	bd80      	pop	{r7, pc}
 8004076:	bf00      	nop
 8004078:	200000c4 	.word	0x200000c4

0800407c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LeftEncoderA_Pin);
 8004080:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8004084:	f001 f82a 	bl	80050dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004088:	bf00      	nop
 800408a:	bd80      	pop	{r7, pc}

0800408c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b086      	sub	sp, #24
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004094:	4a14      	ldr	r2, [pc, #80]	; (80040e8 <_sbrk+0x5c>)
 8004096:	4b15      	ldr	r3, [pc, #84]	; (80040ec <_sbrk+0x60>)
 8004098:	1ad3      	subs	r3, r2, r3
 800409a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80040a0:	4b13      	ldr	r3, [pc, #76]	; (80040f0 <_sbrk+0x64>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d102      	bne.n	80040ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80040a8:	4b11      	ldr	r3, [pc, #68]	; (80040f0 <_sbrk+0x64>)
 80040aa:	4a12      	ldr	r2, [pc, #72]	; (80040f4 <_sbrk+0x68>)
 80040ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80040ae:	4b10      	ldr	r3, [pc, #64]	; (80040f0 <_sbrk+0x64>)
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	4413      	add	r3, r2
 80040b6:	693a      	ldr	r2, [r7, #16]
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d207      	bcs.n	80040cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80040bc:	f003 fcac 	bl	8007a18 <__errno>
 80040c0:	4603      	mov	r3, r0
 80040c2:	220c      	movs	r2, #12
 80040c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80040c6:	f04f 33ff 	mov.w	r3, #4294967295
 80040ca:	e009      	b.n	80040e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80040cc:	4b08      	ldr	r3, [pc, #32]	; (80040f0 <_sbrk+0x64>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80040d2:	4b07      	ldr	r3, [pc, #28]	; (80040f0 <_sbrk+0x64>)
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4413      	add	r3, r2
 80040da:	4a05      	ldr	r2, [pc, #20]	; (80040f0 <_sbrk+0x64>)
 80040dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80040de:	68fb      	ldr	r3, [r7, #12]
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3718      	adds	r7, #24
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	20020000 	.word	0x20020000
 80040ec:	00000400 	.word	0x00000400
 80040f0:	20000be0 	.word	0x20000be0
 80040f4:	20000d30 	.word	0x20000d30

080040f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80040f8:	b480      	push	{r7}
 80040fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80040fc:	4b06      	ldr	r3, [pc, #24]	; (8004118 <SystemInit+0x20>)
 80040fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004102:	4a05      	ldr	r2, [pc, #20]	; (8004118 <SystemInit+0x20>)
 8004104:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004108:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800410c:	bf00      	nop
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr
 8004116:	bf00      	nop
 8004118:	e000ed00 	.word	0xe000ed00

0800411c <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 800411c:	b480      	push	{r7}
 800411e:	b085      	sub	sp, #20
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
 8004124:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	0a5a      	lsrs	r2, r3, #9
 800412c:	490f      	ldr	r1, [pc, #60]	; (800416c <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800412e:	fba1 1202 	umull	r1, r2, r1, r2
 8004132:	09d2      	lsrs	r2, r2, #7
 8004134:	490e      	ldr	r1, [pc, #56]	; (8004170 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 8004136:	fb01 f202 	mul.w	r2, r1, r2
 800413a:	1a9b      	subs	r3, r3, r2
 800413c:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	0a5b      	lsrs	r3, r3, #9
 8004144:	4a09      	ldr	r2, [pc, #36]	; (800416c <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8004146:	fba2 2303 	umull	r2, r3, r2, r3
 800414a:	09db      	lsrs	r3, r3, #7
 800414c:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	441a      	add	r2, r3
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	68fa      	ldr	r2, [r7, #12]
 800415e:	601a      	str	r2, [r3, #0]
}
 8004160:	bf00      	nop
 8004162:	3714      	adds	r7, #20
 8004164:	46bd      	mov	sp, r7
 8004166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416a:	4770      	bx	lr
 800416c:	00044b83 	.word	0x00044b83
 8004170:	3b9aca00 	.word	0x3b9aca00

08004174 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004174:	f8df d034 	ldr.w	sp, [pc, #52]	; 80041ac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004178:	480d      	ldr	r0, [pc, #52]	; (80041b0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800417a:	490e      	ldr	r1, [pc, #56]	; (80041b4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800417c:	4a0e      	ldr	r2, [pc, #56]	; (80041b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800417e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004180:	e002      	b.n	8004188 <LoopCopyDataInit>

08004182 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004182:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004184:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004186:	3304      	adds	r3, #4

08004188 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004188:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800418a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800418c:	d3f9      	bcc.n	8004182 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800418e:	4a0b      	ldr	r2, [pc, #44]	; (80041bc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004190:	4c0b      	ldr	r4, [pc, #44]	; (80041c0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004192:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004194:	e001      	b.n	800419a <LoopFillZerobss>

08004196 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004196:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004198:	3204      	adds	r2, #4

0800419a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800419a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800419c:	d3fb      	bcc.n	8004196 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800419e:	f7ff ffab 	bl	80040f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80041a2:	f003 fc3f 	bl	8007a24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80041a6:	f7fc fdfb 	bl	8000da0 <main>
  bx  lr    
 80041aa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80041ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80041b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80041b4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80041b8:	08007ffc 	.word	0x08007ffc
  ldr r2, =_sbss
 80041bc:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80041c0:	20000d30 	.word	0x20000d30

080041c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80041c4:	e7fe      	b.n	80041c4 <ADC_IRQHandler>
	...

080041c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80041cc:	4b0e      	ldr	r3, [pc, #56]	; (8004208 <HAL_Init+0x40>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a0d      	ldr	r2, [pc, #52]	; (8004208 <HAL_Init+0x40>)
 80041d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80041d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80041d8:	4b0b      	ldr	r3, [pc, #44]	; (8004208 <HAL_Init+0x40>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a0a      	ldr	r2, [pc, #40]	; (8004208 <HAL_Init+0x40>)
 80041de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80041e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80041e4:	4b08      	ldr	r3, [pc, #32]	; (8004208 <HAL_Init+0x40>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a07      	ldr	r2, [pc, #28]	; (8004208 <HAL_Init+0x40>)
 80041ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80041f0:	2003      	movs	r0, #3
 80041f2:	f000 f94f 	bl	8004494 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80041f6:	2000      	movs	r0, #0
 80041f8:	f000 f808 	bl	800420c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80041fc:	f7ff fdde 	bl	8003dbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004200:	2300      	movs	r3, #0
}
 8004202:	4618      	mov	r0, r3
 8004204:	bd80      	pop	{r7, pc}
 8004206:	bf00      	nop
 8004208:	40023c00 	.word	0x40023c00

0800420c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b082      	sub	sp, #8
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004214:	4b12      	ldr	r3, [pc, #72]	; (8004260 <HAL_InitTick+0x54>)
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	4b12      	ldr	r3, [pc, #72]	; (8004264 <HAL_InitTick+0x58>)
 800421a:	781b      	ldrb	r3, [r3, #0]
 800421c:	4619      	mov	r1, r3
 800421e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004222:	fbb3 f3f1 	udiv	r3, r3, r1
 8004226:	fbb2 f3f3 	udiv	r3, r2, r3
 800422a:	4618      	mov	r0, r3
 800422c:	f000 f967 	bl	80044fe <HAL_SYSTICK_Config>
 8004230:	4603      	mov	r3, r0
 8004232:	2b00      	cmp	r3, #0
 8004234:	d001      	beq.n	800423a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	e00e      	b.n	8004258 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2b0f      	cmp	r3, #15
 800423e:	d80a      	bhi.n	8004256 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004240:	2200      	movs	r2, #0
 8004242:	6879      	ldr	r1, [r7, #4]
 8004244:	f04f 30ff 	mov.w	r0, #4294967295
 8004248:	f000 f92f 	bl	80044aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800424c:	4a06      	ldr	r2, [pc, #24]	; (8004268 <HAL_InitTick+0x5c>)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004252:	2300      	movs	r3, #0
 8004254:	e000      	b.n	8004258 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
}
 8004258:	4618      	mov	r0, r3
 800425a:	3708      	adds	r7, #8
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}
 8004260:	20000000 	.word	0x20000000
 8004264:	20000008 	.word	0x20000008
 8004268:	20000004 	.word	0x20000004

0800426c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800426c:	b480      	push	{r7}
 800426e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004270:	4b06      	ldr	r3, [pc, #24]	; (800428c <HAL_IncTick+0x20>)
 8004272:	781b      	ldrb	r3, [r3, #0]
 8004274:	461a      	mov	r2, r3
 8004276:	4b06      	ldr	r3, [pc, #24]	; (8004290 <HAL_IncTick+0x24>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4413      	add	r3, r2
 800427c:	4a04      	ldr	r2, [pc, #16]	; (8004290 <HAL_IncTick+0x24>)
 800427e:	6013      	str	r3, [r2, #0]
}
 8004280:	bf00      	nop
 8004282:	46bd      	mov	sp, r7
 8004284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004288:	4770      	bx	lr
 800428a:	bf00      	nop
 800428c:	20000008 	.word	0x20000008
 8004290:	20000be4 	.word	0x20000be4

08004294 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004294:	b480      	push	{r7}
 8004296:	af00      	add	r7, sp, #0
  return uwTick;
 8004298:	4b03      	ldr	r3, [pc, #12]	; (80042a8 <HAL_GetTick+0x14>)
 800429a:	681b      	ldr	r3, [r3, #0]
}
 800429c:	4618      	mov	r0, r3
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr
 80042a6:	bf00      	nop
 80042a8:	20000be4 	.word	0x20000be4

080042ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b084      	sub	sp, #16
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80042b4:	f7ff ffee 	bl	8004294 <HAL_GetTick>
 80042b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042c4:	d005      	beq.n	80042d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80042c6:	4b0a      	ldr	r3, [pc, #40]	; (80042f0 <HAL_Delay+0x44>)
 80042c8:	781b      	ldrb	r3, [r3, #0]
 80042ca:	461a      	mov	r2, r3
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	4413      	add	r3, r2
 80042d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80042d2:	bf00      	nop
 80042d4:	f7ff ffde 	bl	8004294 <HAL_GetTick>
 80042d8:	4602      	mov	r2, r0
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	1ad3      	subs	r3, r2, r3
 80042de:	68fa      	ldr	r2, [r7, #12]
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d8f7      	bhi.n	80042d4 <HAL_Delay+0x28>
  {
  }
}
 80042e4:	bf00      	nop
 80042e6:	bf00      	nop
 80042e8:	3710      	adds	r7, #16
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	bf00      	nop
 80042f0:	20000008 	.word	0x20000008

080042f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b085      	sub	sp, #20
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	f003 0307 	and.w	r3, r3, #7
 8004302:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004304:	4b0c      	ldr	r3, [pc, #48]	; (8004338 <__NVIC_SetPriorityGrouping+0x44>)
 8004306:	68db      	ldr	r3, [r3, #12]
 8004308:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800430a:	68ba      	ldr	r2, [r7, #8]
 800430c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004310:	4013      	ands	r3, r2
 8004312:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800431c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004320:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004324:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004326:	4a04      	ldr	r2, [pc, #16]	; (8004338 <__NVIC_SetPriorityGrouping+0x44>)
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	60d3      	str	r3, [r2, #12]
}
 800432c:	bf00      	nop
 800432e:	3714      	adds	r7, #20
 8004330:	46bd      	mov	sp, r7
 8004332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004336:	4770      	bx	lr
 8004338:	e000ed00 	.word	0xe000ed00

0800433c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800433c:	b480      	push	{r7}
 800433e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004340:	4b04      	ldr	r3, [pc, #16]	; (8004354 <__NVIC_GetPriorityGrouping+0x18>)
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	0a1b      	lsrs	r3, r3, #8
 8004346:	f003 0307 	and.w	r3, r3, #7
}
 800434a:	4618      	mov	r0, r3
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr
 8004354:	e000ed00 	.word	0xe000ed00

08004358 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004358:	b480      	push	{r7}
 800435a:	b083      	sub	sp, #12
 800435c:	af00      	add	r7, sp, #0
 800435e:	4603      	mov	r3, r0
 8004360:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004366:	2b00      	cmp	r3, #0
 8004368:	db0b      	blt.n	8004382 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800436a:	79fb      	ldrb	r3, [r7, #7]
 800436c:	f003 021f 	and.w	r2, r3, #31
 8004370:	4907      	ldr	r1, [pc, #28]	; (8004390 <__NVIC_EnableIRQ+0x38>)
 8004372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004376:	095b      	lsrs	r3, r3, #5
 8004378:	2001      	movs	r0, #1
 800437a:	fa00 f202 	lsl.w	r2, r0, r2
 800437e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004382:	bf00      	nop
 8004384:	370c      	adds	r7, #12
 8004386:	46bd      	mov	sp, r7
 8004388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438c:	4770      	bx	lr
 800438e:	bf00      	nop
 8004390:	e000e100 	.word	0xe000e100

08004394 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004394:	b480      	push	{r7}
 8004396:	b083      	sub	sp, #12
 8004398:	af00      	add	r7, sp, #0
 800439a:	4603      	mov	r3, r0
 800439c:	6039      	str	r1, [r7, #0]
 800439e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	db0a      	blt.n	80043be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	b2da      	uxtb	r2, r3
 80043ac:	490c      	ldr	r1, [pc, #48]	; (80043e0 <__NVIC_SetPriority+0x4c>)
 80043ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043b2:	0112      	lsls	r2, r2, #4
 80043b4:	b2d2      	uxtb	r2, r2
 80043b6:	440b      	add	r3, r1
 80043b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80043bc:	e00a      	b.n	80043d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	b2da      	uxtb	r2, r3
 80043c2:	4908      	ldr	r1, [pc, #32]	; (80043e4 <__NVIC_SetPriority+0x50>)
 80043c4:	79fb      	ldrb	r3, [r7, #7]
 80043c6:	f003 030f 	and.w	r3, r3, #15
 80043ca:	3b04      	subs	r3, #4
 80043cc:	0112      	lsls	r2, r2, #4
 80043ce:	b2d2      	uxtb	r2, r2
 80043d0:	440b      	add	r3, r1
 80043d2:	761a      	strb	r2, [r3, #24]
}
 80043d4:	bf00      	nop
 80043d6:	370c      	adds	r7, #12
 80043d8:	46bd      	mov	sp, r7
 80043da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043de:	4770      	bx	lr
 80043e0:	e000e100 	.word	0xe000e100
 80043e4:	e000ed00 	.word	0xe000ed00

080043e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b089      	sub	sp, #36	; 0x24
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	60f8      	str	r0, [r7, #12]
 80043f0:	60b9      	str	r1, [r7, #8]
 80043f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f003 0307 	and.w	r3, r3, #7
 80043fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80043fc:	69fb      	ldr	r3, [r7, #28]
 80043fe:	f1c3 0307 	rsb	r3, r3, #7
 8004402:	2b04      	cmp	r3, #4
 8004404:	bf28      	it	cs
 8004406:	2304      	movcs	r3, #4
 8004408:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800440a:	69fb      	ldr	r3, [r7, #28]
 800440c:	3304      	adds	r3, #4
 800440e:	2b06      	cmp	r3, #6
 8004410:	d902      	bls.n	8004418 <NVIC_EncodePriority+0x30>
 8004412:	69fb      	ldr	r3, [r7, #28]
 8004414:	3b03      	subs	r3, #3
 8004416:	e000      	b.n	800441a <NVIC_EncodePriority+0x32>
 8004418:	2300      	movs	r3, #0
 800441a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800441c:	f04f 32ff 	mov.w	r2, #4294967295
 8004420:	69bb      	ldr	r3, [r7, #24]
 8004422:	fa02 f303 	lsl.w	r3, r2, r3
 8004426:	43da      	mvns	r2, r3
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	401a      	ands	r2, r3
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004430:	f04f 31ff 	mov.w	r1, #4294967295
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	fa01 f303 	lsl.w	r3, r1, r3
 800443a:	43d9      	mvns	r1, r3
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004440:	4313      	orrs	r3, r2
         );
}
 8004442:	4618      	mov	r0, r3
 8004444:	3724      	adds	r7, #36	; 0x24
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr
	...

08004450 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b082      	sub	sp, #8
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	3b01      	subs	r3, #1
 800445c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004460:	d301      	bcc.n	8004466 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004462:	2301      	movs	r3, #1
 8004464:	e00f      	b.n	8004486 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004466:	4a0a      	ldr	r2, [pc, #40]	; (8004490 <SysTick_Config+0x40>)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	3b01      	subs	r3, #1
 800446c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800446e:	210f      	movs	r1, #15
 8004470:	f04f 30ff 	mov.w	r0, #4294967295
 8004474:	f7ff ff8e 	bl	8004394 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004478:	4b05      	ldr	r3, [pc, #20]	; (8004490 <SysTick_Config+0x40>)
 800447a:	2200      	movs	r2, #0
 800447c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800447e:	4b04      	ldr	r3, [pc, #16]	; (8004490 <SysTick_Config+0x40>)
 8004480:	2207      	movs	r2, #7
 8004482:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004484:	2300      	movs	r3, #0
}
 8004486:	4618      	mov	r0, r3
 8004488:	3708      	adds	r7, #8
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}
 800448e:	bf00      	nop
 8004490:	e000e010 	.word	0xe000e010

08004494 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b082      	sub	sp, #8
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	f7ff ff29 	bl	80042f4 <__NVIC_SetPriorityGrouping>
}
 80044a2:	bf00      	nop
 80044a4:	3708      	adds	r7, #8
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}

080044aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80044aa:	b580      	push	{r7, lr}
 80044ac:	b086      	sub	sp, #24
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	4603      	mov	r3, r0
 80044b2:	60b9      	str	r1, [r7, #8]
 80044b4:	607a      	str	r2, [r7, #4]
 80044b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80044b8:	2300      	movs	r3, #0
 80044ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80044bc:	f7ff ff3e 	bl	800433c <__NVIC_GetPriorityGrouping>
 80044c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	68b9      	ldr	r1, [r7, #8]
 80044c6:	6978      	ldr	r0, [r7, #20]
 80044c8:	f7ff ff8e 	bl	80043e8 <NVIC_EncodePriority>
 80044cc:	4602      	mov	r2, r0
 80044ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044d2:	4611      	mov	r1, r2
 80044d4:	4618      	mov	r0, r3
 80044d6:	f7ff ff5d 	bl	8004394 <__NVIC_SetPriority>
}
 80044da:	bf00      	nop
 80044dc:	3718      	adds	r7, #24
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}

080044e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044e2:	b580      	push	{r7, lr}
 80044e4:	b082      	sub	sp, #8
 80044e6:	af00      	add	r7, sp, #0
 80044e8:	4603      	mov	r3, r0
 80044ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80044ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044f0:	4618      	mov	r0, r3
 80044f2:	f7ff ff31 	bl	8004358 <__NVIC_EnableIRQ>
}
 80044f6:	bf00      	nop
 80044f8:	3708      	adds	r7, #8
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}

080044fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80044fe:	b580      	push	{r7, lr}
 8004500:	b082      	sub	sp, #8
 8004502:	af00      	add	r7, sp, #0
 8004504:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f7ff ffa2 	bl	8004450 <SysTick_Config>
 800450c:	4603      	mov	r3, r0
}
 800450e:	4618      	mov	r0, r3
 8004510:	3708      	adds	r7, #8
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}
	...

08004518 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b086      	sub	sp, #24
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004520:	2300      	movs	r3, #0
 8004522:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004524:	f7ff feb6 	bl	8004294 <HAL_GetTick>
 8004528:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d101      	bne.n	8004534 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	e099      	b.n	8004668 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2202      	movs	r2, #2
 8004538:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2200      	movs	r2, #0
 8004540:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f022 0201 	bic.w	r2, r2, #1
 8004552:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004554:	e00f      	b.n	8004576 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004556:	f7ff fe9d 	bl	8004294 <HAL_GetTick>
 800455a:	4602      	mov	r2, r0
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	1ad3      	subs	r3, r2, r3
 8004560:	2b05      	cmp	r3, #5
 8004562:	d908      	bls.n	8004576 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2220      	movs	r2, #32
 8004568:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2203      	movs	r2, #3
 800456e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004572:	2303      	movs	r3, #3
 8004574:	e078      	b.n	8004668 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 0301 	and.w	r3, r3, #1
 8004580:	2b00      	cmp	r3, #0
 8004582:	d1e8      	bne.n	8004556 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800458c:	697a      	ldr	r2, [r7, #20]
 800458e:	4b38      	ldr	r3, [pc, #224]	; (8004670 <HAL_DMA_Init+0x158>)
 8004590:	4013      	ands	r3, r2
 8004592:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	685a      	ldr	r2, [r3, #4]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80045a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	691b      	ldr	r3, [r3, #16]
 80045a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	699b      	ldr	r3, [r3, #24]
 80045b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6a1b      	ldr	r3, [r3, #32]
 80045c0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80045c2:	697a      	ldr	r2, [r7, #20]
 80045c4:	4313      	orrs	r3, r2
 80045c6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045cc:	2b04      	cmp	r3, #4
 80045ce:	d107      	bne.n	80045e0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d8:	4313      	orrs	r3, r2
 80045da:	697a      	ldr	r2, [r7, #20]
 80045dc:	4313      	orrs	r3, r2
 80045de:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	697a      	ldr	r2, [r7, #20]
 80045e6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	695b      	ldr	r3, [r3, #20]
 80045ee:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	f023 0307 	bic.w	r3, r3, #7
 80045f6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045fc:	697a      	ldr	r2, [r7, #20]
 80045fe:	4313      	orrs	r3, r2
 8004600:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004606:	2b04      	cmp	r3, #4
 8004608:	d117      	bne.n	800463a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800460e:	697a      	ldr	r2, [r7, #20]
 8004610:	4313      	orrs	r3, r2
 8004612:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004618:	2b00      	cmp	r3, #0
 800461a:	d00e      	beq.n	800463a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	f000 fb01 	bl	8004c24 <DMA_CheckFifoParam>
 8004622:	4603      	mov	r3, r0
 8004624:	2b00      	cmp	r3, #0
 8004626:	d008      	beq.n	800463a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2240      	movs	r2, #64	; 0x40
 800462c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2201      	movs	r2, #1
 8004632:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004636:	2301      	movs	r3, #1
 8004638:	e016      	b.n	8004668 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	697a      	ldr	r2, [r7, #20]
 8004640:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f000 fab8 	bl	8004bb8 <DMA_CalcBaseAndBitshift>
 8004648:	4603      	mov	r3, r0
 800464a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004650:	223f      	movs	r2, #63	; 0x3f
 8004652:	409a      	lsls	r2, r3
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2200      	movs	r2, #0
 800465c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2201      	movs	r2, #1
 8004662:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004666:	2300      	movs	r3, #0
}
 8004668:	4618      	mov	r0, r3
 800466a:	3718      	adds	r7, #24
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}
 8004670:	f010803f 	.word	0xf010803f

08004674 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b086      	sub	sp, #24
 8004678:	af00      	add	r7, sp, #0
 800467a:	60f8      	str	r0, [r7, #12]
 800467c:	60b9      	str	r1, [r7, #8]
 800467e:	607a      	str	r2, [r7, #4]
 8004680:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004682:	2300      	movs	r3, #0
 8004684:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800468a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004692:	2b01      	cmp	r3, #1
 8004694:	d101      	bne.n	800469a <HAL_DMA_Start_IT+0x26>
 8004696:	2302      	movs	r3, #2
 8004698:	e040      	b.n	800471c <HAL_DMA_Start_IT+0xa8>
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2201      	movs	r2, #1
 800469e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d12f      	bne.n	800470e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2202      	movs	r2, #2
 80046b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2200      	movs	r2, #0
 80046ba:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	687a      	ldr	r2, [r7, #4]
 80046c0:	68b9      	ldr	r1, [r7, #8]
 80046c2:	68f8      	ldr	r0, [r7, #12]
 80046c4:	f000 fa4a 	bl	8004b5c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046cc:	223f      	movs	r2, #63	; 0x3f
 80046ce:	409a      	lsls	r2, r3
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f042 0216 	orr.w	r2, r2, #22
 80046e2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d007      	beq.n	80046fc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f042 0208 	orr.w	r2, r2, #8
 80046fa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f042 0201 	orr.w	r2, r2, #1
 800470a:	601a      	str	r2, [r3, #0]
 800470c:	e005      	b.n	800471a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2200      	movs	r2, #0
 8004712:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004716:	2302      	movs	r3, #2
 8004718:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800471a:	7dfb      	ldrb	r3, [r7, #23]
}
 800471c:	4618      	mov	r0, r3
 800471e:	3718      	adds	r7, #24
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}

08004724 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b084      	sub	sp, #16
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004730:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004732:	f7ff fdaf 	bl	8004294 <HAL_GetTick>
 8004736:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800473e:	b2db      	uxtb	r3, r3
 8004740:	2b02      	cmp	r3, #2
 8004742:	d008      	beq.n	8004756 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2280      	movs	r2, #128	; 0x80
 8004748:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2200      	movs	r2, #0
 800474e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	e052      	b.n	80047fc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f022 0216 	bic.w	r2, r2, #22
 8004764:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	695a      	ldr	r2, [r3, #20]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004774:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477a:	2b00      	cmp	r3, #0
 800477c:	d103      	bne.n	8004786 <HAL_DMA_Abort+0x62>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004782:	2b00      	cmp	r3, #0
 8004784:	d007      	beq.n	8004796 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f022 0208 	bic.w	r2, r2, #8
 8004794:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f022 0201 	bic.w	r2, r2, #1
 80047a4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80047a6:	e013      	b.n	80047d0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80047a8:	f7ff fd74 	bl	8004294 <HAL_GetTick>
 80047ac:	4602      	mov	r2, r0
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	2b05      	cmp	r3, #5
 80047b4:	d90c      	bls.n	80047d0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2220      	movs	r2, #32
 80047ba:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2203      	movs	r2, #3
 80047c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2200      	movs	r2, #0
 80047c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80047cc:	2303      	movs	r3, #3
 80047ce:	e015      	b.n	80047fc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 0301 	and.w	r3, r3, #1
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d1e4      	bne.n	80047a8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047e2:	223f      	movs	r2, #63	; 0x3f
 80047e4:	409a      	lsls	r2, r3
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2201      	movs	r2, #1
 80047ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2200      	movs	r2, #0
 80047f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80047fa:	2300      	movs	r3, #0
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3710      	adds	r7, #16
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}

08004804 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004804:	b480      	push	{r7}
 8004806:	b083      	sub	sp, #12
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004812:	b2db      	uxtb	r3, r3
 8004814:	2b02      	cmp	r3, #2
 8004816:	d004      	beq.n	8004822 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2280      	movs	r2, #128	; 0x80
 800481c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	e00c      	b.n	800483c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2205      	movs	r2, #5
 8004826:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f022 0201 	bic.w	r2, r2, #1
 8004838:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800483a:	2300      	movs	r3, #0
}
 800483c:	4618      	mov	r0, r3
 800483e:	370c      	adds	r7, #12
 8004840:	46bd      	mov	sp, r7
 8004842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004846:	4770      	bx	lr

08004848 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b086      	sub	sp, #24
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004850:	2300      	movs	r3, #0
 8004852:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004854:	4b8e      	ldr	r3, [pc, #568]	; (8004a90 <HAL_DMA_IRQHandler+0x248>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a8e      	ldr	r2, [pc, #568]	; (8004a94 <HAL_DMA_IRQHandler+0x24c>)
 800485a:	fba2 2303 	umull	r2, r3, r2, r3
 800485e:	0a9b      	lsrs	r3, r3, #10
 8004860:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004866:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004872:	2208      	movs	r2, #8
 8004874:	409a      	lsls	r2, r3
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	4013      	ands	r3, r2
 800487a:	2b00      	cmp	r3, #0
 800487c:	d01a      	beq.n	80048b4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f003 0304 	and.w	r3, r3, #4
 8004888:	2b00      	cmp	r3, #0
 800488a:	d013      	beq.n	80048b4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f022 0204 	bic.w	r2, r2, #4
 800489a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048a0:	2208      	movs	r2, #8
 80048a2:	409a      	lsls	r2, r3
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048ac:	f043 0201 	orr.w	r2, r3, #1
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048b8:	2201      	movs	r2, #1
 80048ba:	409a      	lsls	r2, r3
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	4013      	ands	r3, r2
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d012      	beq.n	80048ea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	695b      	ldr	r3, [r3, #20]
 80048ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d00b      	beq.n	80048ea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048d6:	2201      	movs	r2, #1
 80048d8:	409a      	lsls	r2, r3
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048e2:	f043 0202 	orr.w	r2, r3, #2
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048ee:	2204      	movs	r2, #4
 80048f0:	409a      	lsls	r2, r3
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	4013      	ands	r3, r2
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d012      	beq.n	8004920 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 0302 	and.w	r3, r3, #2
 8004904:	2b00      	cmp	r3, #0
 8004906:	d00b      	beq.n	8004920 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800490c:	2204      	movs	r2, #4
 800490e:	409a      	lsls	r2, r3
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004918:	f043 0204 	orr.w	r2, r3, #4
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004924:	2210      	movs	r2, #16
 8004926:	409a      	lsls	r2, r3
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	4013      	ands	r3, r2
 800492c:	2b00      	cmp	r3, #0
 800492e:	d043      	beq.n	80049b8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 0308 	and.w	r3, r3, #8
 800493a:	2b00      	cmp	r3, #0
 800493c:	d03c      	beq.n	80049b8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004942:	2210      	movs	r2, #16
 8004944:	409a      	lsls	r2, r3
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004954:	2b00      	cmp	r3, #0
 8004956:	d018      	beq.n	800498a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004962:	2b00      	cmp	r3, #0
 8004964:	d108      	bne.n	8004978 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800496a:	2b00      	cmp	r3, #0
 800496c:	d024      	beq.n	80049b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	4798      	blx	r3
 8004976:	e01f      	b.n	80049b8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800497c:	2b00      	cmp	r3, #0
 800497e:	d01b      	beq.n	80049b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	4798      	blx	r3
 8004988:	e016      	b.n	80049b8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004994:	2b00      	cmp	r3, #0
 8004996:	d107      	bne.n	80049a8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f022 0208 	bic.w	r2, r2, #8
 80049a6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d003      	beq.n	80049b8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b4:	6878      	ldr	r0, [r7, #4]
 80049b6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049bc:	2220      	movs	r2, #32
 80049be:	409a      	lsls	r2, r3
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	4013      	ands	r3, r2
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	f000 808f 	beq.w	8004ae8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f003 0310 	and.w	r3, r3, #16
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	f000 8087 	beq.w	8004ae8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049de:	2220      	movs	r2, #32
 80049e0:	409a      	lsls	r2, r3
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	2b05      	cmp	r3, #5
 80049f0:	d136      	bne.n	8004a60 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f022 0216 	bic.w	r2, r2, #22
 8004a00:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	695a      	ldr	r2, [r3, #20]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a10:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d103      	bne.n	8004a22 <HAL_DMA_IRQHandler+0x1da>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d007      	beq.n	8004a32 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f022 0208 	bic.w	r2, r2, #8
 8004a30:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a36:	223f      	movs	r2, #63	; 0x3f
 8004a38:	409a      	lsls	r2, r3
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2201      	movs	r2, #1
 8004a42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d07e      	beq.n	8004b54 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	4798      	blx	r3
        }
        return;
 8004a5e:	e079      	b.n	8004b54 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d01d      	beq.n	8004aaa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d10d      	bne.n	8004a98 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d031      	beq.n	8004ae8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a88:	6878      	ldr	r0, [r7, #4]
 8004a8a:	4798      	blx	r3
 8004a8c:	e02c      	b.n	8004ae8 <HAL_DMA_IRQHandler+0x2a0>
 8004a8e:	bf00      	nop
 8004a90:	20000000 	.word	0x20000000
 8004a94:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d023      	beq.n	8004ae8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	4798      	blx	r3
 8004aa8:	e01e      	b.n	8004ae8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d10f      	bne.n	8004ad8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f022 0210 	bic.w	r2, r2, #16
 8004ac6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2201      	movs	r2, #1
 8004acc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d003      	beq.n	8004ae8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d032      	beq.n	8004b56 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004af4:	f003 0301 	and.w	r3, r3, #1
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d022      	beq.n	8004b42 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2205      	movs	r2, #5
 8004b00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f022 0201 	bic.w	r2, r2, #1
 8004b12:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	3301      	adds	r3, #1
 8004b18:	60bb      	str	r3, [r7, #8]
 8004b1a:	697a      	ldr	r2, [r7, #20]
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d307      	bcc.n	8004b30 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f003 0301 	and.w	r3, r3, #1
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d1f2      	bne.n	8004b14 <HAL_DMA_IRQHandler+0x2cc>
 8004b2e:	e000      	b.n	8004b32 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004b30:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2201      	movs	r2, #1
 8004b36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d005      	beq.n	8004b56 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	4798      	blx	r3
 8004b52:	e000      	b.n	8004b56 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004b54:	bf00      	nop
    }
  }
}
 8004b56:	3718      	adds	r7, #24
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}

08004b5c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b085      	sub	sp, #20
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	60f8      	str	r0, [r7, #12]
 8004b64:	60b9      	str	r1, [r7, #8]
 8004b66:	607a      	str	r2, [r7, #4]
 8004b68:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004b78:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	683a      	ldr	r2, [r7, #0]
 8004b80:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	2b40      	cmp	r3, #64	; 0x40
 8004b88:	d108      	bne.n	8004b9c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	687a      	ldr	r2, [r7, #4]
 8004b90:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	68ba      	ldr	r2, [r7, #8]
 8004b98:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004b9a:	e007      	b.n	8004bac <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	68ba      	ldr	r2, [r7, #8]
 8004ba2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	687a      	ldr	r2, [r7, #4]
 8004baa:	60da      	str	r2, [r3, #12]
}
 8004bac:	bf00      	nop
 8004bae:	3714      	adds	r7, #20
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr

08004bb8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b085      	sub	sp, #20
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	3b10      	subs	r3, #16
 8004bc8:	4a14      	ldr	r2, [pc, #80]	; (8004c1c <DMA_CalcBaseAndBitshift+0x64>)
 8004bca:	fba2 2303 	umull	r2, r3, r2, r3
 8004bce:	091b      	lsrs	r3, r3, #4
 8004bd0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004bd2:	4a13      	ldr	r2, [pc, #76]	; (8004c20 <DMA_CalcBaseAndBitshift+0x68>)
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	4413      	add	r3, r2
 8004bd8:	781b      	ldrb	r3, [r3, #0]
 8004bda:	461a      	mov	r2, r3
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2b03      	cmp	r3, #3
 8004be4:	d909      	bls.n	8004bfa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004bee:	f023 0303 	bic.w	r3, r3, #3
 8004bf2:	1d1a      	adds	r2, r3, #4
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	659a      	str	r2, [r3, #88]	; 0x58
 8004bf8:	e007      	b.n	8004c0a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004c02:	f023 0303 	bic.w	r3, r3, #3
 8004c06:	687a      	ldr	r2, [r7, #4]
 8004c08:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3714      	adds	r7, #20
 8004c12:	46bd      	mov	sp, r7
 8004c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c18:	4770      	bx	lr
 8004c1a:	bf00      	nop
 8004c1c:	aaaaaaab 	.word	0xaaaaaaab
 8004c20:	08007fe0 	.word	0x08007fe0

08004c24 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b085      	sub	sp, #20
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c34:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	699b      	ldr	r3, [r3, #24]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d11f      	bne.n	8004c7e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	2b03      	cmp	r3, #3
 8004c42:	d856      	bhi.n	8004cf2 <DMA_CheckFifoParam+0xce>
 8004c44:	a201      	add	r2, pc, #4	; (adr r2, 8004c4c <DMA_CheckFifoParam+0x28>)
 8004c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c4a:	bf00      	nop
 8004c4c:	08004c5d 	.word	0x08004c5d
 8004c50:	08004c6f 	.word	0x08004c6f
 8004c54:	08004c5d 	.word	0x08004c5d
 8004c58:	08004cf3 	.word	0x08004cf3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d046      	beq.n	8004cf6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c6c:	e043      	b.n	8004cf6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c72:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004c76:	d140      	bne.n	8004cfa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c7c:	e03d      	b.n	8004cfa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	699b      	ldr	r3, [r3, #24]
 8004c82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c86:	d121      	bne.n	8004ccc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	2b03      	cmp	r3, #3
 8004c8c:	d837      	bhi.n	8004cfe <DMA_CheckFifoParam+0xda>
 8004c8e:	a201      	add	r2, pc, #4	; (adr r2, 8004c94 <DMA_CheckFifoParam+0x70>)
 8004c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c94:	08004ca5 	.word	0x08004ca5
 8004c98:	08004cab 	.word	0x08004cab
 8004c9c:	08004ca5 	.word	0x08004ca5
 8004ca0:	08004cbd 	.word	0x08004cbd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	73fb      	strb	r3, [r7, #15]
      break;
 8004ca8:	e030      	b.n	8004d0c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d025      	beq.n	8004d02 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004cba:	e022      	b.n	8004d02 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004cc4:	d11f      	bne.n	8004d06 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004cca:	e01c      	b.n	8004d06 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	2b02      	cmp	r3, #2
 8004cd0:	d903      	bls.n	8004cda <DMA_CheckFifoParam+0xb6>
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	2b03      	cmp	r3, #3
 8004cd6:	d003      	beq.n	8004ce0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004cd8:	e018      	b.n	8004d0c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	73fb      	strb	r3, [r7, #15]
      break;
 8004cde:	e015      	b.n	8004d0c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d00e      	beq.n	8004d0a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	73fb      	strb	r3, [r7, #15]
      break;
 8004cf0:	e00b      	b.n	8004d0a <DMA_CheckFifoParam+0xe6>
      break;
 8004cf2:	bf00      	nop
 8004cf4:	e00a      	b.n	8004d0c <DMA_CheckFifoParam+0xe8>
      break;
 8004cf6:	bf00      	nop
 8004cf8:	e008      	b.n	8004d0c <DMA_CheckFifoParam+0xe8>
      break;
 8004cfa:	bf00      	nop
 8004cfc:	e006      	b.n	8004d0c <DMA_CheckFifoParam+0xe8>
      break;
 8004cfe:	bf00      	nop
 8004d00:	e004      	b.n	8004d0c <DMA_CheckFifoParam+0xe8>
      break;
 8004d02:	bf00      	nop
 8004d04:	e002      	b.n	8004d0c <DMA_CheckFifoParam+0xe8>
      break;   
 8004d06:	bf00      	nop
 8004d08:	e000      	b.n	8004d0c <DMA_CheckFifoParam+0xe8>
      break;
 8004d0a:	bf00      	nop
    }
  } 
  
  return status; 
 8004d0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3714      	adds	r7, #20
 8004d12:	46bd      	mov	sp, r7
 8004d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d18:	4770      	bx	lr
 8004d1a:	bf00      	nop

08004d1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b089      	sub	sp, #36	; 0x24
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
 8004d24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004d26:	2300      	movs	r3, #0
 8004d28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d32:	2300      	movs	r3, #0
 8004d34:	61fb      	str	r3, [r7, #28]
 8004d36:	e165      	b.n	8005004 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004d38:	2201      	movs	r2, #1
 8004d3a:	69fb      	ldr	r3, [r7, #28]
 8004d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	697a      	ldr	r2, [r7, #20]
 8004d48:	4013      	ands	r3, r2
 8004d4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004d4c:	693a      	ldr	r2, [r7, #16]
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	429a      	cmp	r2, r3
 8004d52:	f040 8154 	bne.w	8004ffe <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	f003 0303 	and.w	r3, r3, #3
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	d005      	beq.n	8004d6e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004d6a:	2b02      	cmp	r3, #2
 8004d6c:	d130      	bne.n	8004dd0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004d74:	69fb      	ldr	r3, [r7, #28]
 8004d76:	005b      	lsls	r3, r3, #1
 8004d78:	2203      	movs	r2, #3
 8004d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d7e:	43db      	mvns	r3, r3
 8004d80:	69ba      	ldr	r2, [r7, #24]
 8004d82:	4013      	ands	r3, r2
 8004d84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	68da      	ldr	r2, [r3, #12]
 8004d8a:	69fb      	ldr	r3, [r7, #28]
 8004d8c:	005b      	lsls	r3, r3, #1
 8004d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d92:	69ba      	ldr	r2, [r7, #24]
 8004d94:	4313      	orrs	r3, r2
 8004d96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	69ba      	ldr	r2, [r7, #24]
 8004d9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004da4:	2201      	movs	r2, #1
 8004da6:	69fb      	ldr	r3, [r7, #28]
 8004da8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dac:	43db      	mvns	r3, r3
 8004dae:	69ba      	ldr	r2, [r7, #24]
 8004db0:	4013      	ands	r3, r2
 8004db2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	091b      	lsrs	r3, r3, #4
 8004dba:	f003 0201 	and.w	r2, r3, #1
 8004dbe:	69fb      	ldr	r3, [r7, #28]
 8004dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc4:	69ba      	ldr	r2, [r7, #24]
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	69ba      	ldr	r2, [r7, #24]
 8004dce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	f003 0303 	and.w	r3, r3, #3
 8004dd8:	2b03      	cmp	r3, #3
 8004dda:	d017      	beq.n	8004e0c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	68db      	ldr	r3, [r3, #12]
 8004de0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004de2:	69fb      	ldr	r3, [r7, #28]
 8004de4:	005b      	lsls	r3, r3, #1
 8004de6:	2203      	movs	r2, #3
 8004de8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dec:	43db      	mvns	r3, r3
 8004dee:	69ba      	ldr	r2, [r7, #24]
 8004df0:	4013      	ands	r3, r2
 8004df2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	689a      	ldr	r2, [r3, #8]
 8004df8:	69fb      	ldr	r3, [r7, #28]
 8004dfa:	005b      	lsls	r3, r3, #1
 8004dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8004e00:	69ba      	ldr	r2, [r7, #24]
 8004e02:	4313      	orrs	r3, r2
 8004e04:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	69ba      	ldr	r2, [r7, #24]
 8004e0a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	f003 0303 	and.w	r3, r3, #3
 8004e14:	2b02      	cmp	r3, #2
 8004e16:	d123      	bne.n	8004e60 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004e18:	69fb      	ldr	r3, [r7, #28]
 8004e1a:	08da      	lsrs	r2, r3, #3
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	3208      	adds	r2, #8
 8004e20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e24:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004e26:	69fb      	ldr	r3, [r7, #28]
 8004e28:	f003 0307 	and.w	r3, r3, #7
 8004e2c:	009b      	lsls	r3, r3, #2
 8004e2e:	220f      	movs	r2, #15
 8004e30:	fa02 f303 	lsl.w	r3, r2, r3
 8004e34:	43db      	mvns	r3, r3
 8004e36:	69ba      	ldr	r2, [r7, #24]
 8004e38:	4013      	ands	r3, r2
 8004e3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	691a      	ldr	r2, [r3, #16]
 8004e40:	69fb      	ldr	r3, [r7, #28]
 8004e42:	f003 0307 	and.w	r3, r3, #7
 8004e46:	009b      	lsls	r3, r3, #2
 8004e48:	fa02 f303 	lsl.w	r3, r2, r3
 8004e4c:	69ba      	ldr	r2, [r7, #24]
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004e52:	69fb      	ldr	r3, [r7, #28]
 8004e54:	08da      	lsrs	r2, r3, #3
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	3208      	adds	r2, #8
 8004e5a:	69b9      	ldr	r1, [r7, #24]
 8004e5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004e66:	69fb      	ldr	r3, [r7, #28]
 8004e68:	005b      	lsls	r3, r3, #1
 8004e6a:	2203      	movs	r2, #3
 8004e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e70:	43db      	mvns	r3, r3
 8004e72:	69ba      	ldr	r2, [r7, #24]
 8004e74:	4013      	ands	r3, r2
 8004e76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	f003 0203 	and.w	r2, r3, #3
 8004e80:	69fb      	ldr	r3, [r7, #28]
 8004e82:	005b      	lsls	r3, r3, #1
 8004e84:	fa02 f303 	lsl.w	r3, r2, r3
 8004e88:	69ba      	ldr	r2, [r7, #24]
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	69ba      	ldr	r2, [r7, #24]
 8004e92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	f000 80ae 	beq.w	8004ffe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	60fb      	str	r3, [r7, #12]
 8004ea6:	4b5d      	ldr	r3, [pc, #372]	; (800501c <HAL_GPIO_Init+0x300>)
 8004ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eaa:	4a5c      	ldr	r2, [pc, #368]	; (800501c <HAL_GPIO_Init+0x300>)
 8004eac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004eb0:	6453      	str	r3, [r2, #68]	; 0x44
 8004eb2:	4b5a      	ldr	r3, [pc, #360]	; (800501c <HAL_GPIO_Init+0x300>)
 8004eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004eba:	60fb      	str	r3, [r7, #12]
 8004ebc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004ebe:	4a58      	ldr	r2, [pc, #352]	; (8005020 <HAL_GPIO_Init+0x304>)
 8004ec0:	69fb      	ldr	r3, [r7, #28]
 8004ec2:	089b      	lsrs	r3, r3, #2
 8004ec4:	3302      	adds	r3, #2
 8004ec6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004eca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004ecc:	69fb      	ldr	r3, [r7, #28]
 8004ece:	f003 0303 	and.w	r3, r3, #3
 8004ed2:	009b      	lsls	r3, r3, #2
 8004ed4:	220f      	movs	r2, #15
 8004ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8004eda:	43db      	mvns	r3, r3
 8004edc:	69ba      	ldr	r2, [r7, #24]
 8004ede:	4013      	ands	r3, r2
 8004ee0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	4a4f      	ldr	r2, [pc, #316]	; (8005024 <HAL_GPIO_Init+0x308>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d025      	beq.n	8004f36 <HAL_GPIO_Init+0x21a>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	4a4e      	ldr	r2, [pc, #312]	; (8005028 <HAL_GPIO_Init+0x30c>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d01f      	beq.n	8004f32 <HAL_GPIO_Init+0x216>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	4a4d      	ldr	r2, [pc, #308]	; (800502c <HAL_GPIO_Init+0x310>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d019      	beq.n	8004f2e <HAL_GPIO_Init+0x212>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	4a4c      	ldr	r2, [pc, #304]	; (8005030 <HAL_GPIO_Init+0x314>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d013      	beq.n	8004f2a <HAL_GPIO_Init+0x20e>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	4a4b      	ldr	r2, [pc, #300]	; (8005034 <HAL_GPIO_Init+0x318>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d00d      	beq.n	8004f26 <HAL_GPIO_Init+0x20a>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	4a4a      	ldr	r2, [pc, #296]	; (8005038 <HAL_GPIO_Init+0x31c>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d007      	beq.n	8004f22 <HAL_GPIO_Init+0x206>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	4a49      	ldr	r2, [pc, #292]	; (800503c <HAL_GPIO_Init+0x320>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d101      	bne.n	8004f1e <HAL_GPIO_Init+0x202>
 8004f1a:	2306      	movs	r3, #6
 8004f1c:	e00c      	b.n	8004f38 <HAL_GPIO_Init+0x21c>
 8004f1e:	2307      	movs	r3, #7
 8004f20:	e00a      	b.n	8004f38 <HAL_GPIO_Init+0x21c>
 8004f22:	2305      	movs	r3, #5
 8004f24:	e008      	b.n	8004f38 <HAL_GPIO_Init+0x21c>
 8004f26:	2304      	movs	r3, #4
 8004f28:	e006      	b.n	8004f38 <HAL_GPIO_Init+0x21c>
 8004f2a:	2303      	movs	r3, #3
 8004f2c:	e004      	b.n	8004f38 <HAL_GPIO_Init+0x21c>
 8004f2e:	2302      	movs	r3, #2
 8004f30:	e002      	b.n	8004f38 <HAL_GPIO_Init+0x21c>
 8004f32:	2301      	movs	r3, #1
 8004f34:	e000      	b.n	8004f38 <HAL_GPIO_Init+0x21c>
 8004f36:	2300      	movs	r3, #0
 8004f38:	69fa      	ldr	r2, [r7, #28]
 8004f3a:	f002 0203 	and.w	r2, r2, #3
 8004f3e:	0092      	lsls	r2, r2, #2
 8004f40:	4093      	lsls	r3, r2
 8004f42:	69ba      	ldr	r2, [r7, #24]
 8004f44:	4313      	orrs	r3, r2
 8004f46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004f48:	4935      	ldr	r1, [pc, #212]	; (8005020 <HAL_GPIO_Init+0x304>)
 8004f4a:	69fb      	ldr	r3, [r7, #28]
 8004f4c:	089b      	lsrs	r3, r3, #2
 8004f4e:	3302      	adds	r3, #2
 8004f50:	69ba      	ldr	r2, [r7, #24]
 8004f52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004f56:	4b3a      	ldr	r3, [pc, #232]	; (8005040 <HAL_GPIO_Init+0x324>)
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	43db      	mvns	r3, r3
 8004f60:	69ba      	ldr	r2, [r7, #24]
 8004f62:	4013      	ands	r3, r2
 8004f64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d003      	beq.n	8004f7a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004f72:	69ba      	ldr	r2, [r7, #24]
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	4313      	orrs	r3, r2
 8004f78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004f7a:	4a31      	ldr	r2, [pc, #196]	; (8005040 <HAL_GPIO_Init+0x324>)
 8004f7c:	69bb      	ldr	r3, [r7, #24]
 8004f7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004f80:	4b2f      	ldr	r3, [pc, #188]	; (8005040 <HAL_GPIO_Init+0x324>)
 8004f82:	68db      	ldr	r3, [r3, #12]
 8004f84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	43db      	mvns	r3, r3
 8004f8a:	69ba      	ldr	r2, [r7, #24]
 8004f8c:	4013      	ands	r3, r2
 8004f8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d003      	beq.n	8004fa4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004f9c:	69ba      	ldr	r2, [r7, #24]
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004fa4:	4a26      	ldr	r2, [pc, #152]	; (8005040 <HAL_GPIO_Init+0x324>)
 8004fa6:	69bb      	ldr	r3, [r7, #24]
 8004fa8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004faa:	4b25      	ldr	r3, [pc, #148]	; (8005040 <HAL_GPIO_Init+0x324>)
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	43db      	mvns	r3, r3
 8004fb4:	69ba      	ldr	r2, [r7, #24]
 8004fb6:	4013      	ands	r3, r2
 8004fb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d003      	beq.n	8004fce <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004fc6:	69ba      	ldr	r2, [r7, #24]
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004fce:	4a1c      	ldr	r2, [pc, #112]	; (8005040 <HAL_GPIO_Init+0x324>)
 8004fd0:	69bb      	ldr	r3, [r7, #24]
 8004fd2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004fd4:	4b1a      	ldr	r3, [pc, #104]	; (8005040 <HAL_GPIO_Init+0x324>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	43db      	mvns	r3, r3
 8004fde:	69ba      	ldr	r2, [r7, #24]
 8004fe0:	4013      	ands	r3, r2
 8004fe2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d003      	beq.n	8004ff8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004ff0:	69ba      	ldr	r2, [r7, #24]
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004ff8:	4a11      	ldr	r2, [pc, #68]	; (8005040 <HAL_GPIO_Init+0x324>)
 8004ffa:	69bb      	ldr	r3, [r7, #24]
 8004ffc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004ffe:	69fb      	ldr	r3, [r7, #28]
 8005000:	3301      	adds	r3, #1
 8005002:	61fb      	str	r3, [r7, #28]
 8005004:	69fb      	ldr	r3, [r7, #28]
 8005006:	2b0f      	cmp	r3, #15
 8005008:	f67f ae96 	bls.w	8004d38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800500c:	bf00      	nop
 800500e:	bf00      	nop
 8005010:	3724      	adds	r7, #36	; 0x24
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr
 800501a:	bf00      	nop
 800501c:	40023800 	.word	0x40023800
 8005020:	40013800 	.word	0x40013800
 8005024:	40020000 	.word	0x40020000
 8005028:	40020400 	.word	0x40020400
 800502c:	40020800 	.word	0x40020800
 8005030:	40020c00 	.word	0x40020c00
 8005034:	40021000 	.word	0x40021000
 8005038:	40021400 	.word	0x40021400
 800503c:	40021800 	.word	0x40021800
 8005040:	40013c00 	.word	0x40013c00

08005044 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005044:	b480      	push	{r7}
 8005046:	b085      	sub	sp, #20
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
 800504c:	460b      	mov	r3, r1
 800504e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	691a      	ldr	r2, [r3, #16]
 8005054:	887b      	ldrh	r3, [r7, #2]
 8005056:	4013      	ands	r3, r2
 8005058:	2b00      	cmp	r3, #0
 800505a:	d002      	beq.n	8005062 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800505c:	2301      	movs	r3, #1
 800505e:	73fb      	strb	r3, [r7, #15]
 8005060:	e001      	b.n	8005066 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005062:	2300      	movs	r3, #0
 8005064:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005066:	7bfb      	ldrb	r3, [r7, #15]
}
 8005068:	4618      	mov	r0, r3
 800506a:	3714      	adds	r7, #20
 800506c:	46bd      	mov	sp, r7
 800506e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005072:	4770      	bx	lr

08005074 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005074:	b480      	push	{r7}
 8005076:	b083      	sub	sp, #12
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
 800507c:	460b      	mov	r3, r1
 800507e:	807b      	strh	r3, [r7, #2]
 8005080:	4613      	mov	r3, r2
 8005082:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005084:	787b      	ldrb	r3, [r7, #1]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d003      	beq.n	8005092 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800508a:	887a      	ldrh	r2, [r7, #2]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005090:	e003      	b.n	800509a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005092:	887b      	ldrh	r3, [r7, #2]
 8005094:	041a      	lsls	r2, r3, #16
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	619a      	str	r2, [r3, #24]
}
 800509a:	bf00      	nop
 800509c:	370c      	adds	r7, #12
 800509e:	46bd      	mov	sp, r7
 80050a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a4:	4770      	bx	lr

080050a6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80050a6:	b480      	push	{r7}
 80050a8:	b085      	sub	sp, #20
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	6078      	str	r0, [r7, #4]
 80050ae:	460b      	mov	r3, r1
 80050b0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	695b      	ldr	r3, [r3, #20]
 80050b6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80050b8:	887a      	ldrh	r2, [r7, #2]
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	4013      	ands	r3, r2
 80050be:	041a      	lsls	r2, r3, #16
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	43d9      	mvns	r1, r3
 80050c4:	887b      	ldrh	r3, [r7, #2]
 80050c6:	400b      	ands	r3, r1
 80050c8:	431a      	orrs	r2, r3
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	619a      	str	r2, [r3, #24]
}
 80050ce:	bf00      	nop
 80050d0:	3714      	adds	r7, #20
 80050d2:	46bd      	mov	sp, r7
 80050d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d8:	4770      	bx	lr
	...

080050dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b082      	sub	sp, #8
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	4603      	mov	r3, r0
 80050e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80050e6:	4b08      	ldr	r3, [pc, #32]	; (8005108 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80050e8:	695a      	ldr	r2, [r3, #20]
 80050ea:	88fb      	ldrh	r3, [r7, #6]
 80050ec:	4013      	ands	r3, r2
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d006      	beq.n	8005100 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80050f2:	4a05      	ldr	r2, [pc, #20]	; (8005108 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80050f4:	88fb      	ldrh	r3, [r7, #6]
 80050f6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80050f8:	88fb      	ldrh	r3, [r7, #6]
 80050fa:	4618      	mov	r0, r3
 80050fc:	f7fd ff40 	bl	8002f80 <HAL_GPIO_EXTI_Callback>
  }
}
 8005100:	bf00      	nop
 8005102:	3708      	adds	r7, #8
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}
 8005108:	40013c00 	.word	0x40013c00

0800510c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b084      	sub	sp, #16
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
 8005114:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d101      	bne.n	8005120 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800511c:	2301      	movs	r3, #1
 800511e:	e0cc      	b.n	80052ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005120:	4b68      	ldr	r3, [pc, #416]	; (80052c4 <HAL_RCC_ClockConfig+0x1b8>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f003 030f 	and.w	r3, r3, #15
 8005128:	683a      	ldr	r2, [r7, #0]
 800512a:	429a      	cmp	r2, r3
 800512c:	d90c      	bls.n	8005148 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800512e:	4b65      	ldr	r3, [pc, #404]	; (80052c4 <HAL_RCC_ClockConfig+0x1b8>)
 8005130:	683a      	ldr	r2, [r7, #0]
 8005132:	b2d2      	uxtb	r2, r2
 8005134:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005136:	4b63      	ldr	r3, [pc, #396]	; (80052c4 <HAL_RCC_ClockConfig+0x1b8>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f003 030f 	and.w	r3, r3, #15
 800513e:	683a      	ldr	r2, [r7, #0]
 8005140:	429a      	cmp	r2, r3
 8005142:	d001      	beq.n	8005148 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	e0b8      	b.n	80052ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f003 0302 	and.w	r3, r3, #2
 8005150:	2b00      	cmp	r3, #0
 8005152:	d020      	beq.n	8005196 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 0304 	and.w	r3, r3, #4
 800515c:	2b00      	cmp	r3, #0
 800515e:	d005      	beq.n	800516c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005160:	4b59      	ldr	r3, [pc, #356]	; (80052c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	4a58      	ldr	r2, [pc, #352]	; (80052c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005166:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800516a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f003 0308 	and.w	r3, r3, #8
 8005174:	2b00      	cmp	r3, #0
 8005176:	d005      	beq.n	8005184 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005178:	4b53      	ldr	r3, [pc, #332]	; (80052c8 <HAL_RCC_ClockConfig+0x1bc>)
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	4a52      	ldr	r2, [pc, #328]	; (80052c8 <HAL_RCC_ClockConfig+0x1bc>)
 800517e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005182:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005184:	4b50      	ldr	r3, [pc, #320]	; (80052c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	689b      	ldr	r3, [r3, #8]
 8005190:	494d      	ldr	r1, [pc, #308]	; (80052c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005192:	4313      	orrs	r3, r2
 8005194:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f003 0301 	and.w	r3, r3, #1
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d044      	beq.n	800522c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	d107      	bne.n	80051ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051aa:	4b47      	ldr	r3, [pc, #284]	; (80052c8 <HAL_RCC_ClockConfig+0x1bc>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d119      	bne.n	80051ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	e07f      	b.n	80052ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	2b02      	cmp	r3, #2
 80051c0:	d003      	beq.n	80051ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80051c6:	2b03      	cmp	r3, #3
 80051c8:	d107      	bne.n	80051da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051ca:	4b3f      	ldr	r3, [pc, #252]	; (80052c8 <HAL_RCC_ClockConfig+0x1bc>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d109      	bne.n	80051ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	e06f      	b.n	80052ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051da:	4b3b      	ldr	r3, [pc, #236]	; (80052c8 <HAL_RCC_ClockConfig+0x1bc>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f003 0302 	and.w	r3, r3, #2
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d101      	bne.n	80051ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051e6:	2301      	movs	r3, #1
 80051e8:	e067      	b.n	80052ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80051ea:	4b37      	ldr	r3, [pc, #220]	; (80052c8 <HAL_RCC_ClockConfig+0x1bc>)
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	f023 0203 	bic.w	r2, r3, #3
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	4934      	ldr	r1, [pc, #208]	; (80052c8 <HAL_RCC_ClockConfig+0x1bc>)
 80051f8:	4313      	orrs	r3, r2
 80051fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80051fc:	f7ff f84a 	bl	8004294 <HAL_GetTick>
 8005200:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005202:	e00a      	b.n	800521a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005204:	f7ff f846 	bl	8004294 <HAL_GetTick>
 8005208:	4602      	mov	r2, r0
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	1ad3      	subs	r3, r2, r3
 800520e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005212:	4293      	cmp	r3, r2
 8005214:	d901      	bls.n	800521a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005216:	2303      	movs	r3, #3
 8005218:	e04f      	b.n	80052ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800521a:	4b2b      	ldr	r3, [pc, #172]	; (80052c8 <HAL_RCC_ClockConfig+0x1bc>)
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	f003 020c 	and.w	r2, r3, #12
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	009b      	lsls	r3, r3, #2
 8005228:	429a      	cmp	r2, r3
 800522a:	d1eb      	bne.n	8005204 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800522c:	4b25      	ldr	r3, [pc, #148]	; (80052c4 <HAL_RCC_ClockConfig+0x1b8>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f003 030f 	and.w	r3, r3, #15
 8005234:	683a      	ldr	r2, [r7, #0]
 8005236:	429a      	cmp	r2, r3
 8005238:	d20c      	bcs.n	8005254 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800523a:	4b22      	ldr	r3, [pc, #136]	; (80052c4 <HAL_RCC_ClockConfig+0x1b8>)
 800523c:	683a      	ldr	r2, [r7, #0]
 800523e:	b2d2      	uxtb	r2, r2
 8005240:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005242:	4b20      	ldr	r3, [pc, #128]	; (80052c4 <HAL_RCC_ClockConfig+0x1b8>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f003 030f 	and.w	r3, r3, #15
 800524a:	683a      	ldr	r2, [r7, #0]
 800524c:	429a      	cmp	r2, r3
 800524e:	d001      	beq.n	8005254 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005250:	2301      	movs	r3, #1
 8005252:	e032      	b.n	80052ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f003 0304 	and.w	r3, r3, #4
 800525c:	2b00      	cmp	r3, #0
 800525e:	d008      	beq.n	8005272 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005260:	4b19      	ldr	r3, [pc, #100]	; (80052c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	68db      	ldr	r3, [r3, #12]
 800526c:	4916      	ldr	r1, [pc, #88]	; (80052c8 <HAL_RCC_ClockConfig+0x1bc>)
 800526e:	4313      	orrs	r3, r2
 8005270:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f003 0308 	and.w	r3, r3, #8
 800527a:	2b00      	cmp	r3, #0
 800527c:	d009      	beq.n	8005292 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800527e:	4b12      	ldr	r3, [pc, #72]	; (80052c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005280:	689b      	ldr	r3, [r3, #8]
 8005282:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	691b      	ldr	r3, [r3, #16]
 800528a:	00db      	lsls	r3, r3, #3
 800528c:	490e      	ldr	r1, [pc, #56]	; (80052c8 <HAL_RCC_ClockConfig+0x1bc>)
 800528e:	4313      	orrs	r3, r2
 8005290:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005292:	f000 f855 	bl	8005340 <HAL_RCC_GetSysClockFreq>
 8005296:	4602      	mov	r2, r0
 8005298:	4b0b      	ldr	r3, [pc, #44]	; (80052c8 <HAL_RCC_ClockConfig+0x1bc>)
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	091b      	lsrs	r3, r3, #4
 800529e:	f003 030f 	and.w	r3, r3, #15
 80052a2:	490a      	ldr	r1, [pc, #40]	; (80052cc <HAL_RCC_ClockConfig+0x1c0>)
 80052a4:	5ccb      	ldrb	r3, [r1, r3]
 80052a6:	fa22 f303 	lsr.w	r3, r2, r3
 80052aa:	4a09      	ldr	r2, [pc, #36]	; (80052d0 <HAL_RCC_ClockConfig+0x1c4>)
 80052ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80052ae:	4b09      	ldr	r3, [pc, #36]	; (80052d4 <HAL_RCC_ClockConfig+0x1c8>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4618      	mov	r0, r3
 80052b4:	f7fe ffaa 	bl	800420c <HAL_InitTick>

  return HAL_OK;
 80052b8:	2300      	movs	r3, #0
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3710      	adds	r7, #16
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}
 80052c2:	bf00      	nop
 80052c4:	40023c00 	.word	0x40023c00
 80052c8:	40023800 	.word	0x40023800
 80052cc:	08007fc8 	.word	0x08007fc8
 80052d0:	20000000 	.word	0x20000000
 80052d4:	20000004 	.word	0x20000004

080052d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052d8:	b480      	push	{r7}
 80052da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80052dc:	4b03      	ldr	r3, [pc, #12]	; (80052ec <HAL_RCC_GetHCLKFreq+0x14>)
 80052de:	681b      	ldr	r3, [r3, #0]
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	46bd      	mov	sp, r7
 80052e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e8:	4770      	bx	lr
 80052ea:	bf00      	nop
 80052ec:	20000000 	.word	0x20000000

080052f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80052f4:	f7ff fff0 	bl	80052d8 <HAL_RCC_GetHCLKFreq>
 80052f8:	4602      	mov	r2, r0
 80052fa:	4b05      	ldr	r3, [pc, #20]	; (8005310 <HAL_RCC_GetPCLK1Freq+0x20>)
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	0a9b      	lsrs	r3, r3, #10
 8005300:	f003 0307 	and.w	r3, r3, #7
 8005304:	4903      	ldr	r1, [pc, #12]	; (8005314 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005306:	5ccb      	ldrb	r3, [r1, r3]
 8005308:	fa22 f303 	lsr.w	r3, r2, r3
}
 800530c:	4618      	mov	r0, r3
 800530e:	bd80      	pop	{r7, pc}
 8005310:	40023800 	.word	0x40023800
 8005314:	08007fd8 	.word	0x08007fd8

08005318 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800531c:	f7ff ffdc 	bl	80052d8 <HAL_RCC_GetHCLKFreq>
 8005320:	4602      	mov	r2, r0
 8005322:	4b05      	ldr	r3, [pc, #20]	; (8005338 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	0b5b      	lsrs	r3, r3, #13
 8005328:	f003 0307 	and.w	r3, r3, #7
 800532c:	4903      	ldr	r1, [pc, #12]	; (800533c <HAL_RCC_GetPCLK2Freq+0x24>)
 800532e:	5ccb      	ldrb	r3, [r1, r3]
 8005330:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005334:	4618      	mov	r0, r3
 8005336:	bd80      	pop	{r7, pc}
 8005338:	40023800 	.word	0x40023800
 800533c:	08007fd8 	.word	0x08007fd8

08005340 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005340:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005344:	b0ae      	sub	sp, #184	; 0xb8
 8005346:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005348:	2300      	movs	r3, #0
 800534a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800534e:	2300      	movs	r3, #0
 8005350:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8005354:	2300      	movs	r3, #0
 8005356:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800535a:	2300      	movs	r3, #0
 800535c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8005360:	2300      	movs	r3, #0
 8005362:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005366:	4bcb      	ldr	r3, [pc, #812]	; (8005694 <HAL_RCC_GetSysClockFreq+0x354>)
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	f003 030c 	and.w	r3, r3, #12
 800536e:	2b0c      	cmp	r3, #12
 8005370:	f200 8206 	bhi.w	8005780 <HAL_RCC_GetSysClockFreq+0x440>
 8005374:	a201      	add	r2, pc, #4	; (adr r2, 800537c <HAL_RCC_GetSysClockFreq+0x3c>)
 8005376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800537a:	bf00      	nop
 800537c:	080053b1 	.word	0x080053b1
 8005380:	08005781 	.word	0x08005781
 8005384:	08005781 	.word	0x08005781
 8005388:	08005781 	.word	0x08005781
 800538c:	080053b9 	.word	0x080053b9
 8005390:	08005781 	.word	0x08005781
 8005394:	08005781 	.word	0x08005781
 8005398:	08005781 	.word	0x08005781
 800539c:	080053c1 	.word	0x080053c1
 80053a0:	08005781 	.word	0x08005781
 80053a4:	08005781 	.word	0x08005781
 80053a8:	08005781 	.word	0x08005781
 80053ac:	080055b1 	.word	0x080055b1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80053b0:	4bb9      	ldr	r3, [pc, #740]	; (8005698 <HAL_RCC_GetSysClockFreq+0x358>)
 80053b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80053b6:	e1e7      	b.n	8005788 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80053b8:	4bb8      	ldr	r3, [pc, #736]	; (800569c <HAL_RCC_GetSysClockFreq+0x35c>)
 80053ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80053be:	e1e3      	b.n	8005788 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80053c0:	4bb4      	ldr	r3, [pc, #720]	; (8005694 <HAL_RCC_GetSysClockFreq+0x354>)
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80053c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80053cc:	4bb1      	ldr	r3, [pc, #708]	; (8005694 <HAL_RCC_GetSysClockFreq+0x354>)
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d071      	beq.n	80054bc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80053d8:	4bae      	ldr	r3, [pc, #696]	; (8005694 <HAL_RCC_GetSysClockFreq+0x354>)
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	099b      	lsrs	r3, r3, #6
 80053de:	2200      	movs	r2, #0
 80053e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80053e4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80053e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80053ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053f0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80053f4:	2300      	movs	r3, #0
 80053f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80053fa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80053fe:	4622      	mov	r2, r4
 8005400:	462b      	mov	r3, r5
 8005402:	f04f 0000 	mov.w	r0, #0
 8005406:	f04f 0100 	mov.w	r1, #0
 800540a:	0159      	lsls	r1, r3, #5
 800540c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005410:	0150      	lsls	r0, r2, #5
 8005412:	4602      	mov	r2, r0
 8005414:	460b      	mov	r3, r1
 8005416:	4621      	mov	r1, r4
 8005418:	1a51      	subs	r1, r2, r1
 800541a:	6439      	str	r1, [r7, #64]	; 0x40
 800541c:	4629      	mov	r1, r5
 800541e:	eb63 0301 	sbc.w	r3, r3, r1
 8005422:	647b      	str	r3, [r7, #68]	; 0x44
 8005424:	f04f 0200 	mov.w	r2, #0
 8005428:	f04f 0300 	mov.w	r3, #0
 800542c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8005430:	4649      	mov	r1, r9
 8005432:	018b      	lsls	r3, r1, #6
 8005434:	4641      	mov	r1, r8
 8005436:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800543a:	4641      	mov	r1, r8
 800543c:	018a      	lsls	r2, r1, #6
 800543e:	4641      	mov	r1, r8
 8005440:	1a51      	subs	r1, r2, r1
 8005442:	63b9      	str	r1, [r7, #56]	; 0x38
 8005444:	4649      	mov	r1, r9
 8005446:	eb63 0301 	sbc.w	r3, r3, r1
 800544a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800544c:	f04f 0200 	mov.w	r2, #0
 8005450:	f04f 0300 	mov.w	r3, #0
 8005454:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8005458:	4649      	mov	r1, r9
 800545a:	00cb      	lsls	r3, r1, #3
 800545c:	4641      	mov	r1, r8
 800545e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005462:	4641      	mov	r1, r8
 8005464:	00ca      	lsls	r2, r1, #3
 8005466:	4610      	mov	r0, r2
 8005468:	4619      	mov	r1, r3
 800546a:	4603      	mov	r3, r0
 800546c:	4622      	mov	r2, r4
 800546e:	189b      	adds	r3, r3, r2
 8005470:	633b      	str	r3, [r7, #48]	; 0x30
 8005472:	462b      	mov	r3, r5
 8005474:	460a      	mov	r2, r1
 8005476:	eb42 0303 	adc.w	r3, r2, r3
 800547a:	637b      	str	r3, [r7, #52]	; 0x34
 800547c:	f04f 0200 	mov.w	r2, #0
 8005480:	f04f 0300 	mov.w	r3, #0
 8005484:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005488:	4629      	mov	r1, r5
 800548a:	024b      	lsls	r3, r1, #9
 800548c:	4621      	mov	r1, r4
 800548e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005492:	4621      	mov	r1, r4
 8005494:	024a      	lsls	r2, r1, #9
 8005496:	4610      	mov	r0, r2
 8005498:	4619      	mov	r1, r3
 800549a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800549e:	2200      	movs	r2, #0
 80054a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80054a4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80054a8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80054ac:	f7fb fafa 	bl	8000aa4 <__aeabi_uldivmod>
 80054b0:	4602      	mov	r2, r0
 80054b2:	460b      	mov	r3, r1
 80054b4:	4613      	mov	r3, r2
 80054b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80054ba:	e067      	b.n	800558c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054bc:	4b75      	ldr	r3, [pc, #468]	; (8005694 <HAL_RCC_GetSysClockFreq+0x354>)
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	099b      	lsrs	r3, r3, #6
 80054c2:	2200      	movs	r2, #0
 80054c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80054c8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80054cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80054d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054d4:	67bb      	str	r3, [r7, #120]	; 0x78
 80054d6:	2300      	movs	r3, #0
 80054d8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80054da:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80054de:	4622      	mov	r2, r4
 80054e0:	462b      	mov	r3, r5
 80054e2:	f04f 0000 	mov.w	r0, #0
 80054e6:	f04f 0100 	mov.w	r1, #0
 80054ea:	0159      	lsls	r1, r3, #5
 80054ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80054f0:	0150      	lsls	r0, r2, #5
 80054f2:	4602      	mov	r2, r0
 80054f4:	460b      	mov	r3, r1
 80054f6:	4621      	mov	r1, r4
 80054f8:	1a51      	subs	r1, r2, r1
 80054fa:	62b9      	str	r1, [r7, #40]	; 0x28
 80054fc:	4629      	mov	r1, r5
 80054fe:	eb63 0301 	sbc.w	r3, r3, r1
 8005502:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005504:	f04f 0200 	mov.w	r2, #0
 8005508:	f04f 0300 	mov.w	r3, #0
 800550c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8005510:	4649      	mov	r1, r9
 8005512:	018b      	lsls	r3, r1, #6
 8005514:	4641      	mov	r1, r8
 8005516:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800551a:	4641      	mov	r1, r8
 800551c:	018a      	lsls	r2, r1, #6
 800551e:	4641      	mov	r1, r8
 8005520:	ebb2 0a01 	subs.w	sl, r2, r1
 8005524:	4649      	mov	r1, r9
 8005526:	eb63 0b01 	sbc.w	fp, r3, r1
 800552a:	f04f 0200 	mov.w	r2, #0
 800552e:	f04f 0300 	mov.w	r3, #0
 8005532:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005536:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800553a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800553e:	4692      	mov	sl, r2
 8005540:	469b      	mov	fp, r3
 8005542:	4623      	mov	r3, r4
 8005544:	eb1a 0303 	adds.w	r3, sl, r3
 8005548:	623b      	str	r3, [r7, #32]
 800554a:	462b      	mov	r3, r5
 800554c:	eb4b 0303 	adc.w	r3, fp, r3
 8005550:	627b      	str	r3, [r7, #36]	; 0x24
 8005552:	f04f 0200 	mov.w	r2, #0
 8005556:	f04f 0300 	mov.w	r3, #0
 800555a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800555e:	4629      	mov	r1, r5
 8005560:	028b      	lsls	r3, r1, #10
 8005562:	4621      	mov	r1, r4
 8005564:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005568:	4621      	mov	r1, r4
 800556a:	028a      	lsls	r2, r1, #10
 800556c:	4610      	mov	r0, r2
 800556e:	4619      	mov	r1, r3
 8005570:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005574:	2200      	movs	r2, #0
 8005576:	673b      	str	r3, [r7, #112]	; 0x70
 8005578:	677a      	str	r2, [r7, #116]	; 0x74
 800557a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800557e:	f7fb fa91 	bl	8000aa4 <__aeabi_uldivmod>
 8005582:	4602      	mov	r2, r0
 8005584:	460b      	mov	r3, r1
 8005586:	4613      	mov	r3, r2
 8005588:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800558c:	4b41      	ldr	r3, [pc, #260]	; (8005694 <HAL_RCC_GetSysClockFreq+0x354>)
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	0c1b      	lsrs	r3, r3, #16
 8005592:	f003 0303 	and.w	r3, r3, #3
 8005596:	3301      	adds	r3, #1
 8005598:	005b      	lsls	r3, r3, #1
 800559a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800559e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80055a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80055a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80055aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80055ae:	e0eb      	b.n	8005788 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80055b0:	4b38      	ldr	r3, [pc, #224]	; (8005694 <HAL_RCC_GetSysClockFreq+0x354>)
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80055b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80055bc:	4b35      	ldr	r3, [pc, #212]	; (8005694 <HAL_RCC_GetSysClockFreq+0x354>)
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d06b      	beq.n	80056a0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055c8:	4b32      	ldr	r3, [pc, #200]	; (8005694 <HAL_RCC_GetSysClockFreq+0x354>)
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	099b      	lsrs	r3, r3, #6
 80055ce:	2200      	movs	r2, #0
 80055d0:	66bb      	str	r3, [r7, #104]	; 0x68
 80055d2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80055d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80055d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055da:	663b      	str	r3, [r7, #96]	; 0x60
 80055dc:	2300      	movs	r3, #0
 80055de:	667b      	str	r3, [r7, #100]	; 0x64
 80055e0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80055e4:	4622      	mov	r2, r4
 80055e6:	462b      	mov	r3, r5
 80055e8:	f04f 0000 	mov.w	r0, #0
 80055ec:	f04f 0100 	mov.w	r1, #0
 80055f0:	0159      	lsls	r1, r3, #5
 80055f2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80055f6:	0150      	lsls	r0, r2, #5
 80055f8:	4602      	mov	r2, r0
 80055fa:	460b      	mov	r3, r1
 80055fc:	4621      	mov	r1, r4
 80055fe:	1a51      	subs	r1, r2, r1
 8005600:	61b9      	str	r1, [r7, #24]
 8005602:	4629      	mov	r1, r5
 8005604:	eb63 0301 	sbc.w	r3, r3, r1
 8005608:	61fb      	str	r3, [r7, #28]
 800560a:	f04f 0200 	mov.w	r2, #0
 800560e:	f04f 0300 	mov.w	r3, #0
 8005612:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8005616:	4659      	mov	r1, fp
 8005618:	018b      	lsls	r3, r1, #6
 800561a:	4651      	mov	r1, sl
 800561c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005620:	4651      	mov	r1, sl
 8005622:	018a      	lsls	r2, r1, #6
 8005624:	4651      	mov	r1, sl
 8005626:	ebb2 0801 	subs.w	r8, r2, r1
 800562a:	4659      	mov	r1, fp
 800562c:	eb63 0901 	sbc.w	r9, r3, r1
 8005630:	f04f 0200 	mov.w	r2, #0
 8005634:	f04f 0300 	mov.w	r3, #0
 8005638:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800563c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005640:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005644:	4690      	mov	r8, r2
 8005646:	4699      	mov	r9, r3
 8005648:	4623      	mov	r3, r4
 800564a:	eb18 0303 	adds.w	r3, r8, r3
 800564e:	613b      	str	r3, [r7, #16]
 8005650:	462b      	mov	r3, r5
 8005652:	eb49 0303 	adc.w	r3, r9, r3
 8005656:	617b      	str	r3, [r7, #20]
 8005658:	f04f 0200 	mov.w	r2, #0
 800565c:	f04f 0300 	mov.w	r3, #0
 8005660:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8005664:	4629      	mov	r1, r5
 8005666:	024b      	lsls	r3, r1, #9
 8005668:	4621      	mov	r1, r4
 800566a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800566e:	4621      	mov	r1, r4
 8005670:	024a      	lsls	r2, r1, #9
 8005672:	4610      	mov	r0, r2
 8005674:	4619      	mov	r1, r3
 8005676:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800567a:	2200      	movs	r2, #0
 800567c:	65bb      	str	r3, [r7, #88]	; 0x58
 800567e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8005680:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005684:	f7fb fa0e 	bl	8000aa4 <__aeabi_uldivmod>
 8005688:	4602      	mov	r2, r0
 800568a:	460b      	mov	r3, r1
 800568c:	4613      	mov	r3, r2
 800568e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005692:	e065      	b.n	8005760 <HAL_RCC_GetSysClockFreq+0x420>
 8005694:	40023800 	.word	0x40023800
 8005698:	00f42400 	.word	0x00f42400
 800569c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80056a0:	4b3d      	ldr	r3, [pc, #244]	; (8005798 <HAL_RCC_GetSysClockFreq+0x458>)
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	099b      	lsrs	r3, r3, #6
 80056a6:	2200      	movs	r2, #0
 80056a8:	4618      	mov	r0, r3
 80056aa:	4611      	mov	r1, r2
 80056ac:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80056b0:	653b      	str	r3, [r7, #80]	; 0x50
 80056b2:	2300      	movs	r3, #0
 80056b4:	657b      	str	r3, [r7, #84]	; 0x54
 80056b6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80056ba:	4642      	mov	r2, r8
 80056bc:	464b      	mov	r3, r9
 80056be:	f04f 0000 	mov.w	r0, #0
 80056c2:	f04f 0100 	mov.w	r1, #0
 80056c6:	0159      	lsls	r1, r3, #5
 80056c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80056cc:	0150      	lsls	r0, r2, #5
 80056ce:	4602      	mov	r2, r0
 80056d0:	460b      	mov	r3, r1
 80056d2:	4641      	mov	r1, r8
 80056d4:	1a51      	subs	r1, r2, r1
 80056d6:	60b9      	str	r1, [r7, #8]
 80056d8:	4649      	mov	r1, r9
 80056da:	eb63 0301 	sbc.w	r3, r3, r1
 80056de:	60fb      	str	r3, [r7, #12]
 80056e0:	f04f 0200 	mov.w	r2, #0
 80056e4:	f04f 0300 	mov.w	r3, #0
 80056e8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80056ec:	4659      	mov	r1, fp
 80056ee:	018b      	lsls	r3, r1, #6
 80056f0:	4651      	mov	r1, sl
 80056f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80056f6:	4651      	mov	r1, sl
 80056f8:	018a      	lsls	r2, r1, #6
 80056fa:	4651      	mov	r1, sl
 80056fc:	1a54      	subs	r4, r2, r1
 80056fe:	4659      	mov	r1, fp
 8005700:	eb63 0501 	sbc.w	r5, r3, r1
 8005704:	f04f 0200 	mov.w	r2, #0
 8005708:	f04f 0300 	mov.w	r3, #0
 800570c:	00eb      	lsls	r3, r5, #3
 800570e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005712:	00e2      	lsls	r2, r4, #3
 8005714:	4614      	mov	r4, r2
 8005716:	461d      	mov	r5, r3
 8005718:	4643      	mov	r3, r8
 800571a:	18e3      	adds	r3, r4, r3
 800571c:	603b      	str	r3, [r7, #0]
 800571e:	464b      	mov	r3, r9
 8005720:	eb45 0303 	adc.w	r3, r5, r3
 8005724:	607b      	str	r3, [r7, #4]
 8005726:	f04f 0200 	mov.w	r2, #0
 800572a:	f04f 0300 	mov.w	r3, #0
 800572e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005732:	4629      	mov	r1, r5
 8005734:	028b      	lsls	r3, r1, #10
 8005736:	4621      	mov	r1, r4
 8005738:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800573c:	4621      	mov	r1, r4
 800573e:	028a      	lsls	r2, r1, #10
 8005740:	4610      	mov	r0, r2
 8005742:	4619      	mov	r1, r3
 8005744:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005748:	2200      	movs	r2, #0
 800574a:	64bb      	str	r3, [r7, #72]	; 0x48
 800574c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800574e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005752:	f7fb f9a7 	bl	8000aa4 <__aeabi_uldivmod>
 8005756:	4602      	mov	r2, r0
 8005758:	460b      	mov	r3, r1
 800575a:	4613      	mov	r3, r2
 800575c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005760:	4b0d      	ldr	r3, [pc, #52]	; (8005798 <HAL_RCC_GetSysClockFreq+0x458>)
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	0f1b      	lsrs	r3, r3, #28
 8005766:	f003 0307 	and.w	r3, r3, #7
 800576a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800576e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005772:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005776:	fbb2 f3f3 	udiv	r3, r2, r3
 800577a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800577e:	e003      	b.n	8005788 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005780:	4b06      	ldr	r3, [pc, #24]	; (800579c <HAL_RCC_GetSysClockFreq+0x45c>)
 8005782:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8005786:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005788:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800578c:	4618      	mov	r0, r3
 800578e:	37b8      	adds	r7, #184	; 0xb8
 8005790:	46bd      	mov	sp, r7
 8005792:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005796:	bf00      	nop
 8005798:	40023800 	.word	0x40023800
 800579c:	00f42400 	.word	0x00f42400

080057a0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b086      	sub	sp, #24
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d101      	bne.n	80057b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80057ae:	2301      	movs	r3, #1
 80057b0:	e28d      	b.n	8005cce <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f003 0301 	and.w	r3, r3, #1
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	f000 8083 	beq.w	80058c6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80057c0:	4b94      	ldr	r3, [pc, #592]	; (8005a14 <HAL_RCC_OscConfig+0x274>)
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	f003 030c 	and.w	r3, r3, #12
 80057c8:	2b04      	cmp	r3, #4
 80057ca:	d019      	beq.n	8005800 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80057cc:	4b91      	ldr	r3, [pc, #580]	; (8005a14 <HAL_RCC_OscConfig+0x274>)
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80057d4:	2b08      	cmp	r3, #8
 80057d6:	d106      	bne.n	80057e6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80057d8:	4b8e      	ldr	r3, [pc, #568]	; (8005a14 <HAL_RCC_OscConfig+0x274>)
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80057e4:	d00c      	beq.n	8005800 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80057e6:	4b8b      	ldr	r3, [pc, #556]	; (8005a14 <HAL_RCC_OscConfig+0x274>)
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80057ee:	2b0c      	cmp	r3, #12
 80057f0:	d112      	bne.n	8005818 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80057f2:	4b88      	ldr	r3, [pc, #544]	; (8005a14 <HAL_RCC_OscConfig+0x274>)
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80057fe:	d10b      	bne.n	8005818 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005800:	4b84      	ldr	r3, [pc, #528]	; (8005a14 <HAL_RCC_OscConfig+0x274>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005808:	2b00      	cmp	r3, #0
 800580a:	d05b      	beq.n	80058c4 <HAL_RCC_OscConfig+0x124>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d157      	bne.n	80058c4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005814:	2301      	movs	r3, #1
 8005816:	e25a      	b.n	8005cce <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005820:	d106      	bne.n	8005830 <HAL_RCC_OscConfig+0x90>
 8005822:	4b7c      	ldr	r3, [pc, #496]	; (8005a14 <HAL_RCC_OscConfig+0x274>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a7b      	ldr	r2, [pc, #492]	; (8005a14 <HAL_RCC_OscConfig+0x274>)
 8005828:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800582c:	6013      	str	r3, [r2, #0]
 800582e:	e01d      	b.n	800586c <HAL_RCC_OscConfig+0xcc>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005838:	d10c      	bne.n	8005854 <HAL_RCC_OscConfig+0xb4>
 800583a:	4b76      	ldr	r3, [pc, #472]	; (8005a14 <HAL_RCC_OscConfig+0x274>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a75      	ldr	r2, [pc, #468]	; (8005a14 <HAL_RCC_OscConfig+0x274>)
 8005840:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005844:	6013      	str	r3, [r2, #0]
 8005846:	4b73      	ldr	r3, [pc, #460]	; (8005a14 <HAL_RCC_OscConfig+0x274>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a72      	ldr	r2, [pc, #456]	; (8005a14 <HAL_RCC_OscConfig+0x274>)
 800584c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005850:	6013      	str	r3, [r2, #0]
 8005852:	e00b      	b.n	800586c <HAL_RCC_OscConfig+0xcc>
 8005854:	4b6f      	ldr	r3, [pc, #444]	; (8005a14 <HAL_RCC_OscConfig+0x274>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a6e      	ldr	r2, [pc, #440]	; (8005a14 <HAL_RCC_OscConfig+0x274>)
 800585a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800585e:	6013      	str	r3, [r2, #0]
 8005860:	4b6c      	ldr	r3, [pc, #432]	; (8005a14 <HAL_RCC_OscConfig+0x274>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a6b      	ldr	r2, [pc, #428]	; (8005a14 <HAL_RCC_OscConfig+0x274>)
 8005866:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800586a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d013      	beq.n	800589c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005874:	f7fe fd0e 	bl	8004294 <HAL_GetTick>
 8005878:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800587a:	e008      	b.n	800588e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800587c:	f7fe fd0a 	bl	8004294 <HAL_GetTick>
 8005880:	4602      	mov	r2, r0
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	1ad3      	subs	r3, r2, r3
 8005886:	2b64      	cmp	r3, #100	; 0x64
 8005888:	d901      	bls.n	800588e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800588a:	2303      	movs	r3, #3
 800588c:	e21f      	b.n	8005cce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800588e:	4b61      	ldr	r3, [pc, #388]	; (8005a14 <HAL_RCC_OscConfig+0x274>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005896:	2b00      	cmp	r3, #0
 8005898:	d0f0      	beq.n	800587c <HAL_RCC_OscConfig+0xdc>
 800589a:	e014      	b.n	80058c6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800589c:	f7fe fcfa 	bl	8004294 <HAL_GetTick>
 80058a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80058a2:	e008      	b.n	80058b6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80058a4:	f7fe fcf6 	bl	8004294 <HAL_GetTick>
 80058a8:	4602      	mov	r2, r0
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	1ad3      	subs	r3, r2, r3
 80058ae:	2b64      	cmp	r3, #100	; 0x64
 80058b0:	d901      	bls.n	80058b6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80058b2:	2303      	movs	r3, #3
 80058b4:	e20b      	b.n	8005cce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80058b6:	4b57      	ldr	r3, [pc, #348]	; (8005a14 <HAL_RCC_OscConfig+0x274>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d1f0      	bne.n	80058a4 <HAL_RCC_OscConfig+0x104>
 80058c2:	e000      	b.n	80058c6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f003 0302 	and.w	r3, r3, #2
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d06f      	beq.n	80059b2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80058d2:	4b50      	ldr	r3, [pc, #320]	; (8005a14 <HAL_RCC_OscConfig+0x274>)
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	f003 030c 	and.w	r3, r3, #12
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d017      	beq.n	800590e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80058de:	4b4d      	ldr	r3, [pc, #308]	; (8005a14 <HAL_RCC_OscConfig+0x274>)
 80058e0:	689b      	ldr	r3, [r3, #8]
 80058e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80058e6:	2b08      	cmp	r3, #8
 80058e8:	d105      	bne.n	80058f6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80058ea:	4b4a      	ldr	r3, [pc, #296]	; (8005a14 <HAL_RCC_OscConfig+0x274>)
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d00b      	beq.n	800590e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80058f6:	4b47      	ldr	r3, [pc, #284]	; (8005a14 <HAL_RCC_OscConfig+0x274>)
 80058f8:	689b      	ldr	r3, [r3, #8]
 80058fa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80058fe:	2b0c      	cmp	r3, #12
 8005900:	d11c      	bne.n	800593c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005902:	4b44      	ldr	r3, [pc, #272]	; (8005a14 <HAL_RCC_OscConfig+0x274>)
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800590a:	2b00      	cmp	r3, #0
 800590c:	d116      	bne.n	800593c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800590e:	4b41      	ldr	r3, [pc, #260]	; (8005a14 <HAL_RCC_OscConfig+0x274>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f003 0302 	and.w	r3, r3, #2
 8005916:	2b00      	cmp	r3, #0
 8005918:	d005      	beq.n	8005926 <HAL_RCC_OscConfig+0x186>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	68db      	ldr	r3, [r3, #12]
 800591e:	2b01      	cmp	r3, #1
 8005920:	d001      	beq.n	8005926 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	e1d3      	b.n	8005cce <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005926:	4b3b      	ldr	r3, [pc, #236]	; (8005a14 <HAL_RCC_OscConfig+0x274>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	691b      	ldr	r3, [r3, #16]
 8005932:	00db      	lsls	r3, r3, #3
 8005934:	4937      	ldr	r1, [pc, #220]	; (8005a14 <HAL_RCC_OscConfig+0x274>)
 8005936:	4313      	orrs	r3, r2
 8005938:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800593a:	e03a      	b.n	80059b2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	68db      	ldr	r3, [r3, #12]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d020      	beq.n	8005986 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005944:	4b34      	ldr	r3, [pc, #208]	; (8005a18 <HAL_RCC_OscConfig+0x278>)
 8005946:	2201      	movs	r2, #1
 8005948:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800594a:	f7fe fca3 	bl	8004294 <HAL_GetTick>
 800594e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005950:	e008      	b.n	8005964 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005952:	f7fe fc9f 	bl	8004294 <HAL_GetTick>
 8005956:	4602      	mov	r2, r0
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	1ad3      	subs	r3, r2, r3
 800595c:	2b02      	cmp	r3, #2
 800595e:	d901      	bls.n	8005964 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005960:	2303      	movs	r3, #3
 8005962:	e1b4      	b.n	8005cce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005964:	4b2b      	ldr	r3, [pc, #172]	; (8005a14 <HAL_RCC_OscConfig+0x274>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f003 0302 	and.w	r3, r3, #2
 800596c:	2b00      	cmp	r3, #0
 800596e:	d0f0      	beq.n	8005952 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005970:	4b28      	ldr	r3, [pc, #160]	; (8005a14 <HAL_RCC_OscConfig+0x274>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	691b      	ldr	r3, [r3, #16]
 800597c:	00db      	lsls	r3, r3, #3
 800597e:	4925      	ldr	r1, [pc, #148]	; (8005a14 <HAL_RCC_OscConfig+0x274>)
 8005980:	4313      	orrs	r3, r2
 8005982:	600b      	str	r3, [r1, #0]
 8005984:	e015      	b.n	80059b2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005986:	4b24      	ldr	r3, [pc, #144]	; (8005a18 <HAL_RCC_OscConfig+0x278>)
 8005988:	2200      	movs	r2, #0
 800598a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800598c:	f7fe fc82 	bl	8004294 <HAL_GetTick>
 8005990:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005992:	e008      	b.n	80059a6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005994:	f7fe fc7e 	bl	8004294 <HAL_GetTick>
 8005998:	4602      	mov	r2, r0
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	1ad3      	subs	r3, r2, r3
 800599e:	2b02      	cmp	r3, #2
 80059a0:	d901      	bls.n	80059a6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80059a2:	2303      	movs	r3, #3
 80059a4:	e193      	b.n	8005cce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80059a6:	4b1b      	ldr	r3, [pc, #108]	; (8005a14 <HAL_RCC_OscConfig+0x274>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f003 0302 	and.w	r3, r3, #2
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d1f0      	bne.n	8005994 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f003 0308 	and.w	r3, r3, #8
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d036      	beq.n	8005a2c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	695b      	ldr	r3, [r3, #20]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d016      	beq.n	80059f4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80059c6:	4b15      	ldr	r3, [pc, #84]	; (8005a1c <HAL_RCC_OscConfig+0x27c>)
 80059c8:	2201      	movs	r2, #1
 80059ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059cc:	f7fe fc62 	bl	8004294 <HAL_GetTick>
 80059d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80059d2:	e008      	b.n	80059e6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80059d4:	f7fe fc5e 	bl	8004294 <HAL_GetTick>
 80059d8:	4602      	mov	r2, r0
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	1ad3      	subs	r3, r2, r3
 80059de:	2b02      	cmp	r3, #2
 80059e0:	d901      	bls.n	80059e6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80059e2:	2303      	movs	r3, #3
 80059e4:	e173      	b.n	8005cce <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80059e6:	4b0b      	ldr	r3, [pc, #44]	; (8005a14 <HAL_RCC_OscConfig+0x274>)
 80059e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059ea:	f003 0302 	and.w	r3, r3, #2
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d0f0      	beq.n	80059d4 <HAL_RCC_OscConfig+0x234>
 80059f2:	e01b      	b.n	8005a2c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80059f4:	4b09      	ldr	r3, [pc, #36]	; (8005a1c <HAL_RCC_OscConfig+0x27c>)
 80059f6:	2200      	movs	r2, #0
 80059f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059fa:	f7fe fc4b 	bl	8004294 <HAL_GetTick>
 80059fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a00:	e00e      	b.n	8005a20 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a02:	f7fe fc47 	bl	8004294 <HAL_GetTick>
 8005a06:	4602      	mov	r2, r0
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	1ad3      	subs	r3, r2, r3
 8005a0c:	2b02      	cmp	r3, #2
 8005a0e:	d907      	bls.n	8005a20 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005a10:	2303      	movs	r3, #3
 8005a12:	e15c      	b.n	8005cce <HAL_RCC_OscConfig+0x52e>
 8005a14:	40023800 	.word	0x40023800
 8005a18:	42470000 	.word	0x42470000
 8005a1c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a20:	4b8a      	ldr	r3, [pc, #552]	; (8005c4c <HAL_RCC_OscConfig+0x4ac>)
 8005a22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a24:	f003 0302 	and.w	r3, r3, #2
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d1ea      	bne.n	8005a02 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f003 0304 	and.w	r3, r3, #4
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	f000 8097 	beq.w	8005b68 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a3e:	4b83      	ldr	r3, [pc, #524]	; (8005c4c <HAL_RCC_OscConfig+0x4ac>)
 8005a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d10f      	bne.n	8005a6a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	60bb      	str	r3, [r7, #8]
 8005a4e:	4b7f      	ldr	r3, [pc, #508]	; (8005c4c <HAL_RCC_OscConfig+0x4ac>)
 8005a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a52:	4a7e      	ldr	r2, [pc, #504]	; (8005c4c <HAL_RCC_OscConfig+0x4ac>)
 8005a54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a58:	6413      	str	r3, [r2, #64]	; 0x40
 8005a5a:	4b7c      	ldr	r3, [pc, #496]	; (8005c4c <HAL_RCC_OscConfig+0x4ac>)
 8005a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a62:	60bb      	str	r3, [r7, #8]
 8005a64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a66:	2301      	movs	r3, #1
 8005a68:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a6a:	4b79      	ldr	r3, [pc, #484]	; (8005c50 <HAL_RCC_OscConfig+0x4b0>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d118      	bne.n	8005aa8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005a76:	4b76      	ldr	r3, [pc, #472]	; (8005c50 <HAL_RCC_OscConfig+0x4b0>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a75      	ldr	r2, [pc, #468]	; (8005c50 <HAL_RCC_OscConfig+0x4b0>)
 8005a7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a82:	f7fe fc07 	bl	8004294 <HAL_GetTick>
 8005a86:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a88:	e008      	b.n	8005a9c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a8a:	f7fe fc03 	bl	8004294 <HAL_GetTick>
 8005a8e:	4602      	mov	r2, r0
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	1ad3      	subs	r3, r2, r3
 8005a94:	2b02      	cmp	r3, #2
 8005a96:	d901      	bls.n	8005a9c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005a98:	2303      	movs	r3, #3
 8005a9a:	e118      	b.n	8005cce <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a9c:	4b6c      	ldr	r3, [pc, #432]	; (8005c50 <HAL_RCC_OscConfig+0x4b0>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d0f0      	beq.n	8005a8a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	689b      	ldr	r3, [r3, #8]
 8005aac:	2b01      	cmp	r3, #1
 8005aae:	d106      	bne.n	8005abe <HAL_RCC_OscConfig+0x31e>
 8005ab0:	4b66      	ldr	r3, [pc, #408]	; (8005c4c <HAL_RCC_OscConfig+0x4ac>)
 8005ab2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ab4:	4a65      	ldr	r2, [pc, #404]	; (8005c4c <HAL_RCC_OscConfig+0x4ac>)
 8005ab6:	f043 0301 	orr.w	r3, r3, #1
 8005aba:	6713      	str	r3, [r2, #112]	; 0x70
 8005abc:	e01c      	b.n	8005af8 <HAL_RCC_OscConfig+0x358>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	689b      	ldr	r3, [r3, #8]
 8005ac2:	2b05      	cmp	r3, #5
 8005ac4:	d10c      	bne.n	8005ae0 <HAL_RCC_OscConfig+0x340>
 8005ac6:	4b61      	ldr	r3, [pc, #388]	; (8005c4c <HAL_RCC_OscConfig+0x4ac>)
 8005ac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005aca:	4a60      	ldr	r2, [pc, #384]	; (8005c4c <HAL_RCC_OscConfig+0x4ac>)
 8005acc:	f043 0304 	orr.w	r3, r3, #4
 8005ad0:	6713      	str	r3, [r2, #112]	; 0x70
 8005ad2:	4b5e      	ldr	r3, [pc, #376]	; (8005c4c <HAL_RCC_OscConfig+0x4ac>)
 8005ad4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ad6:	4a5d      	ldr	r2, [pc, #372]	; (8005c4c <HAL_RCC_OscConfig+0x4ac>)
 8005ad8:	f043 0301 	orr.w	r3, r3, #1
 8005adc:	6713      	str	r3, [r2, #112]	; 0x70
 8005ade:	e00b      	b.n	8005af8 <HAL_RCC_OscConfig+0x358>
 8005ae0:	4b5a      	ldr	r3, [pc, #360]	; (8005c4c <HAL_RCC_OscConfig+0x4ac>)
 8005ae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ae4:	4a59      	ldr	r2, [pc, #356]	; (8005c4c <HAL_RCC_OscConfig+0x4ac>)
 8005ae6:	f023 0301 	bic.w	r3, r3, #1
 8005aea:	6713      	str	r3, [r2, #112]	; 0x70
 8005aec:	4b57      	ldr	r3, [pc, #348]	; (8005c4c <HAL_RCC_OscConfig+0x4ac>)
 8005aee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005af0:	4a56      	ldr	r2, [pc, #344]	; (8005c4c <HAL_RCC_OscConfig+0x4ac>)
 8005af2:	f023 0304 	bic.w	r3, r3, #4
 8005af6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	689b      	ldr	r3, [r3, #8]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d015      	beq.n	8005b2c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b00:	f7fe fbc8 	bl	8004294 <HAL_GetTick>
 8005b04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b06:	e00a      	b.n	8005b1e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b08:	f7fe fbc4 	bl	8004294 <HAL_GetTick>
 8005b0c:	4602      	mov	r2, r0
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	1ad3      	subs	r3, r2, r3
 8005b12:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d901      	bls.n	8005b1e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8005b1a:	2303      	movs	r3, #3
 8005b1c:	e0d7      	b.n	8005cce <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b1e:	4b4b      	ldr	r3, [pc, #300]	; (8005c4c <HAL_RCC_OscConfig+0x4ac>)
 8005b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b22:	f003 0302 	and.w	r3, r3, #2
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d0ee      	beq.n	8005b08 <HAL_RCC_OscConfig+0x368>
 8005b2a:	e014      	b.n	8005b56 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b2c:	f7fe fbb2 	bl	8004294 <HAL_GetTick>
 8005b30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b32:	e00a      	b.n	8005b4a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b34:	f7fe fbae 	bl	8004294 <HAL_GetTick>
 8005b38:	4602      	mov	r2, r0
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	1ad3      	subs	r3, r2, r3
 8005b3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d901      	bls.n	8005b4a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005b46:	2303      	movs	r3, #3
 8005b48:	e0c1      	b.n	8005cce <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b4a:	4b40      	ldr	r3, [pc, #256]	; (8005c4c <HAL_RCC_OscConfig+0x4ac>)
 8005b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b4e:	f003 0302 	and.w	r3, r3, #2
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d1ee      	bne.n	8005b34 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005b56:	7dfb      	ldrb	r3, [r7, #23]
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	d105      	bne.n	8005b68 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b5c:	4b3b      	ldr	r3, [pc, #236]	; (8005c4c <HAL_RCC_OscConfig+0x4ac>)
 8005b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b60:	4a3a      	ldr	r2, [pc, #232]	; (8005c4c <HAL_RCC_OscConfig+0x4ac>)
 8005b62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b66:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	699b      	ldr	r3, [r3, #24]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	f000 80ad 	beq.w	8005ccc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005b72:	4b36      	ldr	r3, [pc, #216]	; (8005c4c <HAL_RCC_OscConfig+0x4ac>)
 8005b74:	689b      	ldr	r3, [r3, #8]
 8005b76:	f003 030c 	and.w	r3, r3, #12
 8005b7a:	2b08      	cmp	r3, #8
 8005b7c:	d060      	beq.n	8005c40 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	699b      	ldr	r3, [r3, #24]
 8005b82:	2b02      	cmp	r3, #2
 8005b84:	d145      	bne.n	8005c12 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b86:	4b33      	ldr	r3, [pc, #204]	; (8005c54 <HAL_RCC_OscConfig+0x4b4>)
 8005b88:	2200      	movs	r2, #0
 8005b8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b8c:	f7fe fb82 	bl	8004294 <HAL_GetTick>
 8005b90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b92:	e008      	b.n	8005ba6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b94:	f7fe fb7e 	bl	8004294 <HAL_GetTick>
 8005b98:	4602      	mov	r2, r0
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	1ad3      	subs	r3, r2, r3
 8005b9e:	2b02      	cmp	r3, #2
 8005ba0:	d901      	bls.n	8005ba6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005ba2:	2303      	movs	r3, #3
 8005ba4:	e093      	b.n	8005cce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ba6:	4b29      	ldr	r3, [pc, #164]	; (8005c4c <HAL_RCC_OscConfig+0x4ac>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d1f0      	bne.n	8005b94 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	69da      	ldr	r2, [r3, #28]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6a1b      	ldr	r3, [r3, #32]
 8005bba:	431a      	orrs	r2, r3
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc0:	019b      	lsls	r3, r3, #6
 8005bc2:	431a      	orrs	r2, r3
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bc8:	085b      	lsrs	r3, r3, #1
 8005bca:	3b01      	subs	r3, #1
 8005bcc:	041b      	lsls	r3, r3, #16
 8005bce:	431a      	orrs	r2, r3
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bd4:	061b      	lsls	r3, r3, #24
 8005bd6:	431a      	orrs	r2, r3
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bdc:	071b      	lsls	r3, r3, #28
 8005bde:	491b      	ldr	r1, [pc, #108]	; (8005c4c <HAL_RCC_OscConfig+0x4ac>)
 8005be0:	4313      	orrs	r3, r2
 8005be2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005be4:	4b1b      	ldr	r3, [pc, #108]	; (8005c54 <HAL_RCC_OscConfig+0x4b4>)
 8005be6:	2201      	movs	r2, #1
 8005be8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bea:	f7fe fb53 	bl	8004294 <HAL_GetTick>
 8005bee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bf0:	e008      	b.n	8005c04 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005bf2:	f7fe fb4f 	bl	8004294 <HAL_GetTick>
 8005bf6:	4602      	mov	r2, r0
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	1ad3      	subs	r3, r2, r3
 8005bfc:	2b02      	cmp	r3, #2
 8005bfe:	d901      	bls.n	8005c04 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005c00:	2303      	movs	r3, #3
 8005c02:	e064      	b.n	8005cce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c04:	4b11      	ldr	r3, [pc, #68]	; (8005c4c <HAL_RCC_OscConfig+0x4ac>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d0f0      	beq.n	8005bf2 <HAL_RCC_OscConfig+0x452>
 8005c10:	e05c      	b.n	8005ccc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c12:	4b10      	ldr	r3, [pc, #64]	; (8005c54 <HAL_RCC_OscConfig+0x4b4>)
 8005c14:	2200      	movs	r2, #0
 8005c16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c18:	f7fe fb3c 	bl	8004294 <HAL_GetTick>
 8005c1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c1e:	e008      	b.n	8005c32 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c20:	f7fe fb38 	bl	8004294 <HAL_GetTick>
 8005c24:	4602      	mov	r2, r0
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	1ad3      	subs	r3, r2, r3
 8005c2a:	2b02      	cmp	r3, #2
 8005c2c:	d901      	bls.n	8005c32 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005c2e:	2303      	movs	r3, #3
 8005c30:	e04d      	b.n	8005cce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c32:	4b06      	ldr	r3, [pc, #24]	; (8005c4c <HAL_RCC_OscConfig+0x4ac>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d1f0      	bne.n	8005c20 <HAL_RCC_OscConfig+0x480>
 8005c3e:	e045      	b.n	8005ccc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	699b      	ldr	r3, [r3, #24]
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	d107      	bne.n	8005c58 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005c48:	2301      	movs	r3, #1
 8005c4a:	e040      	b.n	8005cce <HAL_RCC_OscConfig+0x52e>
 8005c4c:	40023800 	.word	0x40023800
 8005c50:	40007000 	.word	0x40007000
 8005c54:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005c58:	4b1f      	ldr	r3, [pc, #124]	; (8005cd8 <HAL_RCC_OscConfig+0x538>)
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	699b      	ldr	r3, [r3, #24]
 8005c62:	2b01      	cmp	r3, #1
 8005c64:	d030      	beq.n	8005cc8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c70:	429a      	cmp	r2, r3
 8005c72:	d129      	bne.n	8005cc8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c7e:	429a      	cmp	r2, r3
 8005c80:	d122      	bne.n	8005cc8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005c82:	68fa      	ldr	r2, [r7, #12]
 8005c84:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005c88:	4013      	ands	r3, r2
 8005c8a:	687a      	ldr	r2, [r7, #4]
 8005c8c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005c8e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d119      	bne.n	8005cc8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c9e:	085b      	lsrs	r3, r3, #1
 8005ca0:	3b01      	subs	r3, #1
 8005ca2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005ca4:	429a      	cmp	r2, r3
 8005ca6:	d10f      	bne.n	8005cc8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cb2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d107      	bne.n	8005cc8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cc2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005cc4:	429a      	cmp	r2, r3
 8005cc6:	d001      	beq.n	8005ccc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005cc8:	2301      	movs	r3, #1
 8005cca:	e000      	b.n	8005cce <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005ccc:	2300      	movs	r3, #0
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	3718      	adds	r7, #24
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}
 8005cd6:	bf00      	nop
 8005cd8:	40023800 	.word	0x40023800

08005cdc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b082      	sub	sp, #8
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d101      	bne.n	8005cee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005cea:	2301      	movs	r3, #1
 8005cec:	e041      	b.n	8005d72 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cf4:	b2db      	uxtb	r3, r3
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d106      	bne.n	8005d08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f7fe f882 	bl	8003e0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2202      	movs	r2, #2
 8005d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681a      	ldr	r2, [r3, #0]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	3304      	adds	r3, #4
 8005d18:	4619      	mov	r1, r3
 8005d1a:	4610      	mov	r0, r2
 8005d1c:	f000 fa96 	bl	800624c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2201      	movs	r2, #1
 8005d24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2201      	movs	r2, #1
 8005d34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2201      	movs	r2, #1
 8005d44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2201      	movs	r2, #1
 8005d54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2201      	movs	r2, #1
 8005d64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d70:	2300      	movs	r3, #0
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	3708      	adds	r7, #8
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd80      	pop	{r7, pc}
	...

08005d7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b085      	sub	sp, #20
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d8a:	b2db      	uxtb	r3, r3
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d001      	beq.n	8005d94 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005d90:	2301      	movs	r3, #1
 8005d92:	e04e      	b.n	8005e32 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2202      	movs	r2, #2
 8005d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	68da      	ldr	r2, [r3, #12]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f042 0201 	orr.w	r2, r2, #1
 8005daa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a23      	ldr	r2, [pc, #140]	; (8005e40 <HAL_TIM_Base_Start_IT+0xc4>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d022      	beq.n	8005dfc <HAL_TIM_Base_Start_IT+0x80>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dbe:	d01d      	beq.n	8005dfc <HAL_TIM_Base_Start_IT+0x80>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a1f      	ldr	r2, [pc, #124]	; (8005e44 <HAL_TIM_Base_Start_IT+0xc8>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d018      	beq.n	8005dfc <HAL_TIM_Base_Start_IT+0x80>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a1e      	ldr	r2, [pc, #120]	; (8005e48 <HAL_TIM_Base_Start_IT+0xcc>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d013      	beq.n	8005dfc <HAL_TIM_Base_Start_IT+0x80>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a1c      	ldr	r2, [pc, #112]	; (8005e4c <HAL_TIM_Base_Start_IT+0xd0>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d00e      	beq.n	8005dfc <HAL_TIM_Base_Start_IT+0x80>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a1b      	ldr	r2, [pc, #108]	; (8005e50 <HAL_TIM_Base_Start_IT+0xd4>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d009      	beq.n	8005dfc <HAL_TIM_Base_Start_IT+0x80>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a19      	ldr	r2, [pc, #100]	; (8005e54 <HAL_TIM_Base_Start_IT+0xd8>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d004      	beq.n	8005dfc <HAL_TIM_Base_Start_IT+0x80>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a18      	ldr	r2, [pc, #96]	; (8005e58 <HAL_TIM_Base_Start_IT+0xdc>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d111      	bne.n	8005e20 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	689b      	ldr	r3, [r3, #8]
 8005e02:	f003 0307 	and.w	r3, r3, #7
 8005e06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	2b06      	cmp	r3, #6
 8005e0c:	d010      	beq.n	8005e30 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	681a      	ldr	r2, [r3, #0]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f042 0201 	orr.w	r2, r2, #1
 8005e1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e1e:	e007      	b.n	8005e30 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	681a      	ldr	r2, [r3, #0]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f042 0201 	orr.w	r2, r2, #1
 8005e2e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005e30:	2300      	movs	r3, #0
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	3714      	adds	r7, #20
 8005e36:	46bd      	mov	sp, r7
 8005e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3c:	4770      	bx	lr
 8005e3e:	bf00      	nop
 8005e40:	40010000 	.word	0x40010000
 8005e44:	40000400 	.word	0x40000400
 8005e48:	40000800 	.word	0x40000800
 8005e4c:	40000c00 	.word	0x40000c00
 8005e50:	40010400 	.word	0x40010400
 8005e54:	40014000 	.word	0x40014000
 8005e58:	40001800 	.word	0x40001800

08005e5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b082      	sub	sp, #8
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	691b      	ldr	r3, [r3, #16]
 8005e6a:	f003 0302 	and.w	r3, r3, #2
 8005e6e:	2b02      	cmp	r3, #2
 8005e70:	d122      	bne.n	8005eb8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	68db      	ldr	r3, [r3, #12]
 8005e78:	f003 0302 	and.w	r3, r3, #2
 8005e7c:	2b02      	cmp	r3, #2
 8005e7e:	d11b      	bne.n	8005eb8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f06f 0202 	mvn.w	r2, #2
 8005e88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2201      	movs	r2, #1
 8005e8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	699b      	ldr	r3, [r3, #24]
 8005e96:	f003 0303 	and.w	r3, r3, #3
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d003      	beq.n	8005ea6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f000 f9b5 	bl	800620e <HAL_TIM_IC_CaptureCallback>
 8005ea4:	e005      	b.n	8005eb2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f000 f9a7 	bl	80061fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	f000 f9b8 	bl	8006222 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	691b      	ldr	r3, [r3, #16]
 8005ebe:	f003 0304 	and.w	r3, r3, #4
 8005ec2:	2b04      	cmp	r3, #4
 8005ec4:	d122      	bne.n	8005f0c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	68db      	ldr	r3, [r3, #12]
 8005ecc:	f003 0304 	and.w	r3, r3, #4
 8005ed0:	2b04      	cmp	r3, #4
 8005ed2:	d11b      	bne.n	8005f0c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f06f 0204 	mvn.w	r2, #4
 8005edc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2202      	movs	r2, #2
 8005ee2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	699b      	ldr	r3, [r3, #24]
 8005eea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d003      	beq.n	8005efa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f000 f98b 	bl	800620e <HAL_TIM_IC_CaptureCallback>
 8005ef8:	e005      	b.n	8005f06 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f000 f97d 	bl	80061fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f00:	6878      	ldr	r0, [r7, #4]
 8005f02:	f000 f98e 	bl	8006222 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	691b      	ldr	r3, [r3, #16]
 8005f12:	f003 0308 	and.w	r3, r3, #8
 8005f16:	2b08      	cmp	r3, #8
 8005f18:	d122      	bne.n	8005f60 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	68db      	ldr	r3, [r3, #12]
 8005f20:	f003 0308 	and.w	r3, r3, #8
 8005f24:	2b08      	cmp	r3, #8
 8005f26:	d11b      	bne.n	8005f60 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f06f 0208 	mvn.w	r2, #8
 8005f30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2204      	movs	r2, #4
 8005f36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	69db      	ldr	r3, [r3, #28]
 8005f3e:	f003 0303 	and.w	r3, r3, #3
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d003      	beq.n	8005f4e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f000 f961 	bl	800620e <HAL_TIM_IC_CaptureCallback>
 8005f4c:	e005      	b.n	8005f5a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f000 f953 	bl	80061fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	f000 f964 	bl	8006222 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	691b      	ldr	r3, [r3, #16]
 8005f66:	f003 0310 	and.w	r3, r3, #16
 8005f6a:	2b10      	cmp	r3, #16
 8005f6c:	d122      	bne.n	8005fb4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	68db      	ldr	r3, [r3, #12]
 8005f74:	f003 0310 	and.w	r3, r3, #16
 8005f78:	2b10      	cmp	r3, #16
 8005f7a:	d11b      	bne.n	8005fb4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f06f 0210 	mvn.w	r2, #16
 8005f84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2208      	movs	r2, #8
 8005f8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	69db      	ldr	r3, [r3, #28]
 8005f92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d003      	beq.n	8005fa2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f000 f937 	bl	800620e <HAL_TIM_IC_CaptureCallback>
 8005fa0:	e005      	b.n	8005fae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f000 f929 	bl	80061fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	f000 f93a 	bl	8006222 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	691b      	ldr	r3, [r3, #16]
 8005fba:	f003 0301 	and.w	r3, r3, #1
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d10e      	bne.n	8005fe0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	68db      	ldr	r3, [r3, #12]
 8005fc8:	f003 0301 	and.w	r3, r3, #1
 8005fcc:	2b01      	cmp	r3, #1
 8005fce:	d107      	bne.n	8005fe0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f06f 0201 	mvn.w	r2, #1
 8005fd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f7fc ff60 	bl	8002ea0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	691b      	ldr	r3, [r3, #16]
 8005fe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fea:	2b80      	cmp	r3, #128	; 0x80
 8005fec:	d10e      	bne.n	800600c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	68db      	ldr	r3, [r3, #12]
 8005ff4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ff8:	2b80      	cmp	r3, #128	; 0x80
 8005ffa:	d107      	bne.n	800600c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006004:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f000 fae0 	bl	80065cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	691b      	ldr	r3, [r3, #16]
 8006012:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006016:	2b40      	cmp	r3, #64	; 0x40
 8006018:	d10e      	bne.n	8006038 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	68db      	ldr	r3, [r3, #12]
 8006020:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006024:	2b40      	cmp	r3, #64	; 0x40
 8006026:	d107      	bne.n	8006038 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006030:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f000 f8ff 	bl	8006236 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	691b      	ldr	r3, [r3, #16]
 800603e:	f003 0320 	and.w	r3, r3, #32
 8006042:	2b20      	cmp	r3, #32
 8006044:	d10e      	bne.n	8006064 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	68db      	ldr	r3, [r3, #12]
 800604c:	f003 0320 	and.w	r3, r3, #32
 8006050:	2b20      	cmp	r3, #32
 8006052:	d107      	bne.n	8006064 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f06f 0220 	mvn.w	r2, #32
 800605c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	f000 faaa 	bl	80065b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006064:	bf00      	nop
 8006066:	3708      	adds	r7, #8
 8006068:	46bd      	mov	sp, r7
 800606a:	bd80      	pop	{r7, pc}

0800606c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b084      	sub	sp, #16
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
 8006074:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006076:	2300      	movs	r3, #0
 8006078:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006080:	2b01      	cmp	r3, #1
 8006082:	d101      	bne.n	8006088 <HAL_TIM_ConfigClockSource+0x1c>
 8006084:	2302      	movs	r3, #2
 8006086:	e0b4      	b.n	80061f2 <HAL_TIM_ConfigClockSource+0x186>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2201      	movs	r2, #1
 800608c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2202      	movs	r2, #2
 8006094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	689b      	ldr	r3, [r3, #8]
 800609e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80060a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80060ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	68ba      	ldr	r2, [r7, #8]
 80060b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060c0:	d03e      	beq.n	8006140 <HAL_TIM_ConfigClockSource+0xd4>
 80060c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060c6:	f200 8087 	bhi.w	80061d8 <HAL_TIM_ConfigClockSource+0x16c>
 80060ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060ce:	f000 8086 	beq.w	80061de <HAL_TIM_ConfigClockSource+0x172>
 80060d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060d6:	d87f      	bhi.n	80061d8 <HAL_TIM_ConfigClockSource+0x16c>
 80060d8:	2b70      	cmp	r3, #112	; 0x70
 80060da:	d01a      	beq.n	8006112 <HAL_TIM_ConfigClockSource+0xa6>
 80060dc:	2b70      	cmp	r3, #112	; 0x70
 80060de:	d87b      	bhi.n	80061d8 <HAL_TIM_ConfigClockSource+0x16c>
 80060e0:	2b60      	cmp	r3, #96	; 0x60
 80060e2:	d050      	beq.n	8006186 <HAL_TIM_ConfigClockSource+0x11a>
 80060e4:	2b60      	cmp	r3, #96	; 0x60
 80060e6:	d877      	bhi.n	80061d8 <HAL_TIM_ConfigClockSource+0x16c>
 80060e8:	2b50      	cmp	r3, #80	; 0x50
 80060ea:	d03c      	beq.n	8006166 <HAL_TIM_ConfigClockSource+0xfa>
 80060ec:	2b50      	cmp	r3, #80	; 0x50
 80060ee:	d873      	bhi.n	80061d8 <HAL_TIM_ConfigClockSource+0x16c>
 80060f0:	2b40      	cmp	r3, #64	; 0x40
 80060f2:	d058      	beq.n	80061a6 <HAL_TIM_ConfigClockSource+0x13a>
 80060f4:	2b40      	cmp	r3, #64	; 0x40
 80060f6:	d86f      	bhi.n	80061d8 <HAL_TIM_ConfigClockSource+0x16c>
 80060f8:	2b30      	cmp	r3, #48	; 0x30
 80060fa:	d064      	beq.n	80061c6 <HAL_TIM_ConfigClockSource+0x15a>
 80060fc:	2b30      	cmp	r3, #48	; 0x30
 80060fe:	d86b      	bhi.n	80061d8 <HAL_TIM_ConfigClockSource+0x16c>
 8006100:	2b20      	cmp	r3, #32
 8006102:	d060      	beq.n	80061c6 <HAL_TIM_ConfigClockSource+0x15a>
 8006104:	2b20      	cmp	r3, #32
 8006106:	d867      	bhi.n	80061d8 <HAL_TIM_ConfigClockSource+0x16c>
 8006108:	2b00      	cmp	r3, #0
 800610a:	d05c      	beq.n	80061c6 <HAL_TIM_ConfigClockSource+0x15a>
 800610c:	2b10      	cmp	r3, #16
 800610e:	d05a      	beq.n	80061c6 <HAL_TIM_ConfigClockSource+0x15a>
 8006110:	e062      	b.n	80061d8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6818      	ldr	r0, [r3, #0]
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	6899      	ldr	r1, [r3, #8]
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	685a      	ldr	r2, [r3, #4]
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	68db      	ldr	r3, [r3, #12]
 8006122:	f000 f9ad 	bl	8006480 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	689b      	ldr	r3, [r3, #8]
 800612c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006134:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	68ba      	ldr	r2, [r7, #8]
 800613c:	609a      	str	r2, [r3, #8]
      break;
 800613e:	e04f      	b.n	80061e0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6818      	ldr	r0, [r3, #0]
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	6899      	ldr	r1, [r3, #8]
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	685a      	ldr	r2, [r3, #4]
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	68db      	ldr	r3, [r3, #12]
 8006150:	f000 f996 	bl	8006480 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	689a      	ldr	r2, [r3, #8]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006162:	609a      	str	r2, [r3, #8]
      break;
 8006164:	e03c      	b.n	80061e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6818      	ldr	r0, [r3, #0]
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	6859      	ldr	r1, [r3, #4]
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	68db      	ldr	r3, [r3, #12]
 8006172:	461a      	mov	r2, r3
 8006174:	f000 f90a 	bl	800638c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	2150      	movs	r1, #80	; 0x50
 800617e:	4618      	mov	r0, r3
 8006180:	f000 f963 	bl	800644a <TIM_ITRx_SetConfig>
      break;
 8006184:	e02c      	b.n	80061e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6818      	ldr	r0, [r3, #0]
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	6859      	ldr	r1, [r3, #4]
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	68db      	ldr	r3, [r3, #12]
 8006192:	461a      	mov	r2, r3
 8006194:	f000 f929 	bl	80063ea <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	2160      	movs	r1, #96	; 0x60
 800619e:	4618      	mov	r0, r3
 80061a0:	f000 f953 	bl	800644a <TIM_ITRx_SetConfig>
      break;
 80061a4:	e01c      	b.n	80061e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6818      	ldr	r0, [r3, #0]
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	6859      	ldr	r1, [r3, #4]
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	68db      	ldr	r3, [r3, #12]
 80061b2:	461a      	mov	r2, r3
 80061b4:	f000 f8ea 	bl	800638c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	2140      	movs	r1, #64	; 0x40
 80061be:	4618      	mov	r0, r3
 80061c0:	f000 f943 	bl	800644a <TIM_ITRx_SetConfig>
      break;
 80061c4:	e00c      	b.n	80061e0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681a      	ldr	r2, [r3, #0]
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4619      	mov	r1, r3
 80061d0:	4610      	mov	r0, r2
 80061d2:	f000 f93a 	bl	800644a <TIM_ITRx_SetConfig>
      break;
 80061d6:	e003      	b.n	80061e0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80061d8:	2301      	movs	r3, #1
 80061da:	73fb      	strb	r3, [r7, #15]
      break;
 80061dc:	e000      	b.n	80061e0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80061de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2201      	movs	r2, #1
 80061e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2200      	movs	r2, #0
 80061ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80061f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	3710      	adds	r7, #16
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}

080061fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80061fa:	b480      	push	{r7}
 80061fc:	b083      	sub	sp, #12
 80061fe:	af00      	add	r7, sp, #0
 8006200:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006202:	bf00      	nop
 8006204:	370c      	adds	r7, #12
 8006206:	46bd      	mov	sp, r7
 8006208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620c:	4770      	bx	lr

0800620e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800620e:	b480      	push	{r7}
 8006210:	b083      	sub	sp, #12
 8006212:	af00      	add	r7, sp, #0
 8006214:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006216:	bf00      	nop
 8006218:	370c      	adds	r7, #12
 800621a:	46bd      	mov	sp, r7
 800621c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006220:	4770      	bx	lr

08006222 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006222:	b480      	push	{r7}
 8006224:	b083      	sub	sp, #12
 8006226:	af00      	add	r7, sp, #0
 8006228:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800622a:	bf00      	nop
 800622c:	370c      	adds	r7, #12
 800622e:	46bd      	mov	sp, r7
 8006230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006234:	4770      	bx	lr

08006236 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006236:	b480      	push	{r7}
 8006238:	b083      	sub	sp, #12
 800623a:	af00      	add	r7, sp, #0
 800623c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800623e:	bf00      	nop
 8006240:	370c      	adds	r7, #12
 8006242:	46bd      	mov	sp, r7
 8006244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006248:	4770      	bx	lr
	...

0800624c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800624c:	b480      	push	{r7}
 800624e:	b085      	sub	sp, #20
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
 8006254:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	4a40      	ldr	r2, [pc, #256]	; (8006360 <TIM_Base_SetConfig+0x114>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d013      	beq.n	800628c <TIM_Base_SetConfig+0x40>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800626a:	d00f      	beq.n	800628c <TIM_Base_SetConfig+0x40>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	4a3d      	ldr	r2, [pc, #244]	; (8006364 <TIM_Base_SetConfig+0x118>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d00b      	beq.n	800628c <TIM_Base_SetConfig+0x40>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	4a3c      	ldr	r2, [pc, #240]	; (8006368 <TIM_Base_SetConfig+0x11c>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d007      	beq.n	800628c <TIM_Base_SetConfig+0x40>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	4a3b      	ldr	r2, [pc, #236]	; (800636c <TIM_Base_SetConfig+0x120>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d003      	beq.n	800628c <TIM_Base_SetConfig+0x40>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	4a3a      	ldr	r2, [pc, #232]	; (8006370 <TIM_Base_SetConfig+0x124>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d108      	bne.n	800629e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006292:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	685b      	ldr	r3, [r3, #4]
 8006298:	68fa      	ldr	r2, [r7, #12]
 800629a:	4313      	orrs	r3, r2
 800629c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	4a2f      	ldr	r2, [pc, #188]	; (8006360 <TIM_Base_SetConfig+0x114>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d02b      	beq.n	80062fe <TIM_Base_SetConfig+0xb2>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062ac:	d027      	beq.n	80062fe <TIM_Base_SetConfig+0xb2>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	4a2c      	ldr	r2, [pc, #176]	; (8006364 <TIM_Base_SetConfig+0x118>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d023      	beq.n	80062fe <TIM_Base_SetConfig+0xb2>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	4a2b      	ldr	r2, [pc, #172]	; (8006368 <TIM_Base_SetConfig+0x11c>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d01f      	beq.n	80062fe <TIM_Base_SetConfig+0xb2>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	4a2a      	ldr	r2, [pc, #168]	; (800636c <TIM_Base_SetConfig+0x120>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d01b      	beq.n	80062fe <TIM_Base_SetConfig+0xb2>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	4a29      	ldr	r2, [pc, #164]	; (8006370 <TIM_Base_SetConfig+0x124>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d017      	beq.n	80062fe <TIM_Base_SetConfig+0xb2>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	4a28      	ldr	r2, [pc, #160]	; (8006374 <TIM_Base_SetConfig+0x128>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d013      	beq.n	80062fe <TIM_Base_SetConfig+0xb2>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	4a27      	ldr	r2, [pc, #156]	; (8006378 <TIM_Base_SetConfig+0x12c>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d00f      	beq.n	80062fe <TIM_Base_SetConfig+0xb2>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	4a26      	ldr	r2, [pc, #152]	; (800637c <TIM_Base_SetConfig+0x130>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d00b      	beq.n	80062fe <TIM_Base_SetConfig+0xb2>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	4a25      	ldr	r2, [pc, #148]	; (8006380 <TIM_Base_SetConfig+0x134>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d007      	beq.n	80062fe <TIM_Base_SetConfig+0xb2>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	4a24      	ldr	r2, [pc, #144]	; (8006384 <TIM_Base_SetConfig+0x138>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d003      	beq.n	80062fe <TIM_Base_SetConfig+0xb2>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	4a23      	ldr	r2, [pc, #140]	; (8006388 <TIM_Base_SetConfig+0x13c>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d108      	bne.n	8006310 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006304:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	68db      	ldr	r3, [r3, #12]
 800630a:	68fa      	ldr	r2, [r7, #12]
 800630c:	4313      	orrs	r3, r2
 800630e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	695b      	ldr	r3, [r3, #20]
 800631a:	4313      	orrs	r3, r2
 800631c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	68fa      	ldr	r2, [r7, #12]
 8006322:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	689a      	ldr	r2, [r3, #8]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	681a      	ldr	r2, [r3, #0]
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	4a0a      	ldr	r2, [pc, #40]	; (8006360 <TIM_Base_SetConfig+0x114>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d003      	beq.n	8006344 <TIM_Base_SetConfig+0xf8>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	4a0c      	ldr	r2, [pc, #48]	; (8006370 <TIM_Base_SetConfig+0x124>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d103      	bne.n	800634c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	691a      	ldr	r2, [r3, #16]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2201      	movs	r2, #1
 8006350:	615a      	str	r2, [r3, #20]
}
 8006352:	bf00      	nop
 8006354:	3714      	adds	r7, #20
 8006356:	46bd      	mov	sp, r7
 8006358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635c:	4770      	bx	lr
 800635e:	bf00      	nop
 8006360:	40010000 	.word	0x40010000
 8006364:	40000400 	.word	0x40000400
 8006368:	40000800 	.word	0x40000800
 800636c:	40000c00 	.word	0x40000c00
 8006370:	40010400 	.word	0x40010400
 8006374:	40014000 	.word	0x40014000
 8006378:	40014400 	.word	0x40014400
 800637c:	40014800 	.word	0x40014800
 8006380:	40001800 	.word	0x40001800
 8006384:	40001c00 	.word	0x40001c00
 8006388:	40002000 	.word	0x40002000

0800638c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800638c:	b480      	push	{r7}
 800638e:	b087      	sub	sp, #28
 8006390:	af00      	add	r7, sp, #0
 8006392:	60f8      	str	r0, [r7, #12]
 8006394:	60b9      	str	r1, [r7, #8]
 8006396:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	6a1b      	ldr	r3, [r3, #32]
 800639c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	6a1b      	ldr	r3, [r3, #32]
 80063a2:	f023 0201 	bic.w	r2, r3, #1
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	699b      	ldr	r3, [r3, #24]
 80063ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80063b0:	693b      	ldr	r3, [r7, #16]
 80063b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80063b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	011b      	lsls	r3, r3, #4
 80063bc:	693a      	ldr	r2, [r7, #16]
 80063be:	4313      	orrs	r3, r2
 80063c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80063c2:	697b      	ldr	r3, [r7, #20]
 80063c4:	f023 030a 	bic.w	r3, r3, #10
 80063c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80063ca:	697a      	ldr	r2, [r7, #20]
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	4313      	orrs	r3, r2
 80063d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	693a      	ldr	r2, [r7, #16]
 80063d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	697a      	ldr	r2, [r7, #20]
 80063dc:	621a      	str	r2, [r3, #32]
}
 80063de:	bf00      	nop
 80063e0:	371c      	adds	r7, #28
 80063e2:	46bd      	mov	sp, r7
 80063e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e8:	4770      	bx	lr

080063ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063ea:	b480      	push	{r7}
 80063ec:	b087      	sub	sp, #28
 80063ee:	af00      	add	r7, sp, #0
 80063f0:	60f8      	str	r0, [r7, #12]
 80063f2:	60b9      	str	r1, [r7, #8]
 80063f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	6a1b      	ldr	r3, [r3, #32]
 80063fa:	f023 0210 	bic.w	r2, r3, #16
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	699b      	ldr	r3, [r3, #24]
 8006406:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	6a1b      	ldr	r3, [r3, #32]
 800640c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006414:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	031b      	lsls	r3, r3, #12
 800641a:	697a      	ldr	r2, [r7, #20]
 800641c:	4313      	orrs	r3, r2
 800641e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006420:	693b      	ldr	r3, [r7, #16]
 8006422:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006426:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	011b      	lsls	r3, r3, #4
 800642c:	693a      	ldr	r2, [r7, #16]
 800642e:	4313      	orrs	r3, r2
 8006430:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	697a      	ldr	r2, [r7, #20]
 8006436:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	693a      	ldr	r2, [r7, #16]
 800643c:	621a      	str	r2, [r3, #32]
}
 800643e:	bf00      	nop
 8006440:	371c      	adds	r7, #28
 8006442:	46bd      	mov	sp, r7
 8006444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006448:	4770      	bx	lr

0800644a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800644a:	b480      	push	{r7}
 800644c:	b085      	sub	sp, #20
 800644e:	af00      	add	r7, sp, #0
 8006450:	6078      	str	r0, [r7, #4]
 8006452:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	689b      	ldr	r3, [r3, #8]
 8006458:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006460:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006462:	683a      	ldr	r2, [r7, #0]
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	4313      	orrs	r3, r2
 8006468:	f043 0307 	orr.w	r3, r3, #7
 800646c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	68fa      	ldr	r2, [r7, #12]
 8006472:	609a      	str	r2, [r3, #8]
}
 8006474:	bf00      	nop
 8006476:	3714      	adds	r7, #20
 8006478:	46bd      	mov	sp, r7
 800647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647e:	4770      	bx	lr

08006480 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006480:	b480      	push	{r7}
 8006482:	b087      	sub	sp, #28
 8006484:	af00      	add	r7, sp, #0
 8006486:	60f8      	str	r0, [r7, #12]
 8006488:	60b9      	str	r1, [r7, #8]
 800648a:	607a      	str	r2, [r7, #4]
 800648c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	689b      	ldr	r3, [r3, #8]
 8006492:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800649a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	021a      	lsls	r2, r3, #8
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	431a      	orrs	r2, r3
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	4313      	orrs	r3, r2
 80064a8:	697a      	ldr	r2, [r7, #20]
 80064aa:	4313      	orrs	r3, r2
 80064ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	697a      	ldr	r2, [r7, #20]
 80064b2:	609a      	str	r2, [r3, #8]
}
 80064b4:	bf00      	nop
 80064b6:	371c      	adds	r7, #28
 80064b8:	46bd      	mov	sp, r7
 80064ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064be:	4770      	bx	lr

080064c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b085      	sub	sp, #20
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
 80064c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064d0:	2b01      	cmp	r3, #1
 80064d2:	d101      	bne.n	80064d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80064d4:	2302      	movs	r3, #2
 80064d6:	e05a      	b.n	800658e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2201      	movs	r2, #1
 80064dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2202      	movs	r2, #2
 80064e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	689b      	ldr	r3, [r3, #8]
 80064f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	68fa      	ldr	r2, [r7, #12]
 8006506:	4313      	orrs	r3, r2
 8006508:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	68fa      	ldr	r2, [r7, #12]
 8006510:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a21      	ldr	r2, [pc, #132]	; (800659c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d022      	beq.n	8006562 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006524:	d01d      	beq.n	8006562 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a1d      	ldr	r2, [pc, #116]	; (80065a0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d018      	beq.n	8006562 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4a1b      	ldr	r2, [pc, #108]	; (80065a4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d013      	beq.n	8006562 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a1a      	ldr	r2, [pc, #104]	; (80065a8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d00e      	beq.n	8006562 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4a18      	ldr	r2, [pc, #96]	; (80065ac <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d009      	beq.n	8006562 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a17      	ldr	r2, [pc, #92]	; (80065b0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d004      	beq.n	8006562 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4a15      	ldr	r2, [pc, #84]	; (80065b4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d10c      	bne.n	800657c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006568:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	68ba      	ldr	r2, [r7, #8]
 8006570:	4313      	orrs	r3, r2
 8006572:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	68ba      	ldr	r2, [r7, #8]
 800657a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2201      	movs	r2, #1
 8006580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2200      	movs	r2, #0
 8006588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800658c:	2300      	movs	r3, #0
}
 800658e:	4618      	mov	r0, r3
 8006590:	3714      	adds	r7, #20
 8006592:	46bd      	mov	sp, r7
 8006594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006598:	4770      	bx	lr
 800659a:	bf00      	nop
 800659c:	40010000 	.word	0x40010000
 80065a0:	40000400 	.word	0x40000400
 80065a4:	40000800 	.word	0x40000800
 80065a8:	40000c00 	.word	0x40000c00
 80065ac:	40010400 	.word	0x40010400
 80065b0:	40014000 	.word	0x40014000
 80065b4:	40001800 	.word	0x40001800

080065b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80065b8:	b480      	push	{r7}
 80065ba:	b083      	sub	sp, #12
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80065c0:	bf00      	nop
 80065c2:	370c      	adds	r7, #12
 80065c4:	46bd      	mov	sp, r7
 80065c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ca:	4770      	bx	lr

080065cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80065cc:	b480      	push	{r7}
 80065ce:	b083      	sub	sp, #12
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80065d4:	bf00      	nop
 80065d6:	370c      	adds	r7, #12
 80065d8:	46bd      	mov	sp, r7
 80065da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065de:	4770      	bx	lr

080065e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b082      	sub	sp, #8
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d101      	bne.n	80065f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80065ee:	2301      	movs	r3, #1
 80065f0:	e03f      	b.n	8006672 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065f8:	b2db      	uxtb	r3, r3
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d106      	bne.n	800660c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2200      	movs	r2, #0
 8006602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f7fd fc26 	bl	8003e58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2224      	movs	r2, #36	; 0x24
 8006610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	68da      	ldr	r2, [r3, #12]
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006622:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f000 ff43 	bl	80074b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	691a      	ldr	r2, [r3, #16]
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006638:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	695a      	ldr	r2, [r3, #20]
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006648:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	68da      	ldr	r2, [r3, #12]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006658:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2200      	movs	r2, #0
 800665e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2220      	movs	r2, #32
 8006664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2220      	movs	r2, #32
 800666c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006670:	2300      	movs	r3, #0
}
 8006672:	4618      	mov	r0, r3
 8006674:	3708      	adds	r7, #8
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}
	...

0800667c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b08c      	sub	sp, #48	; 0x30
 8006680:	af00      	add	r7, sp, #0
 8006682:	60f8      	str	r0, [r7, #12]
 8006684:	60b9      	str	r1, [r7, #8]
 8006686:	4613      	mov	r3, r2
 8006688:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006690:	b2db      	uxtb	r3, r3
 8006692:	2b20      	cmp	r3, #32
 8006694:	d165      	bne.n	8006762 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d002      	beq.n	80066a2 <HAL_UART_Transmit_DMA+0x26>
 800669c:	88fb      	ldrh	r3, [r7, #6]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d101      	bne.n	80066a6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80066a2:	2301      	movs	r3, #1
 80066a4:	e05e      	b.n	8006764 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066ac:	2b01      	cmp	r3, #1
 80066ae:	d101      	bne.n	80066b4 <HAL_UART_Transmit_DMA+0x38>
 80066b0:	2302      	movs	r3, #2
 80066b2:	e057      	b.n	8006764 <HAL_UART_Transmit_DMA+0xe8>
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	2201      	movs	r2, #1
 80066b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80066bc:	68ba      	ldr	r2, [r7, #8]
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	88fa      	ldrh	r2, [r7, #6]
 80066c6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	88fa      	ldrh	r2, [r7, #6]
 80066cc:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	2200      	movs	r2, #0
 80066d2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	2221      	movs	r2, #33	; 0x21
 80066d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066e0:	4a22      	ldr	r2, [pc, #136]	; (800676c <HAL_UART_Transmit_DMA+0xf0>)
 80066e2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066e8:	4a21      	ldr	r2, [pc, #132]	; (8006770 <HAL_UART_Transmit_DMA+0xf4>)
 80066ea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066f0:	4a20      	ldr	r2, [pc, #128]	; (8006774 <HAL_UART_Transmit_DMA+0xf8>)
 80066f2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066f8:	2200      	movs	r2, #0
 80066fa:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80066fc:	f107 0308 	add.w	r3, r7, #8
 8006700:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006708:	6819      	ldr	r1, [r3, #0]
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	3304      	adds	r3, #4
 8006710:	461a      	mov	r2, r3
 8006712:	88fb      	ldrh	r3, [r7, #6]
 8006714:	f7fd ffae 	bl	8004674 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006720:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	2200      	movs	r2, #0
 8006726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	3314      	adds	r3, #20
 8006730:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006732:	69bb      	ldr	r3, [r7, #24]
 8006734:	e853 3f00 	ldrex	r3, [r3]
 8006738:	617b      	str	r3, [r7, #20]
   return(result);
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006740:	62bb      	str	r3, [r7, #40]	; 0x28
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	3314      	adds	r3, #20
 8006748:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800674a:	627a      	str	r2, [r7, #36]	; 0x24
 800674c:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800674e:	6a39      	ldr	r1, [r7, #32]
 8006750:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006752:	e841 2300 	strex	r3, r2, [r1]
 8006756:	61fb      	str	r3, [r7, #28]
   return(result);
 8006758:	69fb      	ldr	r3, [r7, #28]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d1e5      	bne.n	800672a <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800675e:	2300      	movs	r3, #0
 8006760:	e000      	b.n	8006764 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8006762:	2302      	movs	r3, #2
  }
}
 8006764:	4618      	mov	r0, r3
 8006766:	3730      	adds	r7, #48	; 0x30
 8006768:	46bd      	mov	sp, r7
 800676a:	bd80      	pop	{r7, pc}
 800676c:	08006d49 	.word	0x08006d49
 8006770:	08006de3 	.word	0x08006de3
 8006774:	08006f5b 	.word	0x08006f5b

08006778 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b084      	sub	sp, #16
 800677c:	af00      	add	r7, sp, #0
 800677e:	60f8      	str	r0, [r7, #12]
 8006780:	60b9      	str	r1, [r7, #8]
 8006782:	4613      	mov	r3, r2
 8006784:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800678c:	b2db      	uxtb	r3, r3
 800678e:	2b20      	cmp	r3, #32
 8006790:	d11d      	bne.n	80067ce <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d002      	beq.n	800679e <HAL_UART_Receive_DMA+0x26>
 8006798:	88fb      	ldrh	r3, [r7, #6]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d101      	bne.n	80067a2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800679e:	2301      	movs	r3, #1
 80067a0:	e016      	b.n	80067d0 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067a8:	2b01      	cmp	r3, #1
 80067aa:	d101      	bne.n	80067b0 <HAL_UART_Receive_DMA+0x38>
 80067ac:	2302      	movs	r3, #2
 80067ae:	e00f      	b.n	80067d0 <HAL_UART_Receive_DMA+0x58>
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	2201      	movs	r2, #1
 80067b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	2200      	movs	r2, #0
 80067bc:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80067be:	88fb      	ldrh	r3, [r7, #6]
 80067c0:	461a      	mov	r2, r3
 80067c2:	68b9      	ldr	r1, [r7, #8]
 80067c4:	68f8      	ldr	r0, [r7, #12]
 80067c6:	f000 fc13 	bl	8006ff0 <UART_Start_Receive_DMA>
 80067ca:	4603      	mov	r3, r0
 80067cc:	e000      	b.n	80067d0 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80067ce:	2302      	movs	r3, #2
  }
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	3710      	adds	r7, #16
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}

080067d8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b0ba      	sub	sp, #232	; 0xe8
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	68db      	ldr	r3, [r3, #12]
 80067f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	695b      	ldr	r3, [r3, #20]
 80067fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80067fe:	2300      	movs	r3, #0
 8006800:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006804:	2300      	movs	r3, #0
 8006806:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800680a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800680e:	f003 030f 	and.w	r3, r3, #15
 8006812:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006816:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800681a:	2b00      	cmp	r3, #0
 800681c:	d10f      	bne.n	800683e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800681e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006822:	f003 0320 	and.w	r3, r3, #32
 8006826:	2b00      	cmp	r3, #0
 8006828:	d009      	beq.n	800683e <HAL_UART_IRQHandler+0x66>
 800682a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800682e:	f003 0320 	and.w	r3, r3, #32
 8006832:	2b00      	cmp	r3, #0
 8006834:	d003      	beq.n	800683e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f000 fd7f 	bl	800733a <UART_Receive_IT>
      return;
 800683c:	e256      	b.n	8006cec <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800683e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006842:	2b00      	cmp	r3, #0
 8006844:	f000 80de 	beq.w	8006a04 <HAL_UART_IRQHandler+0x22c>
 8006848:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800684c:	f003 0301 	and.w	r3, r3, #1
 8006850:	2b00      	cmp	r3, #0
 8006852:	d106      	bne.n	8006862 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006854:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006858:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800685c:	2b00      	cmp	r3, #0
 800685e:	f000 80d1 	beq.w	8006a04 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006862:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006866:	f003 0301 	and.w	r3, r3, #1
 800686a:	2b00      	cmp	r3, #0
 800686c:	d00b      	beq.n	8006886 <HAL_UART_IRQHandler+0xae>
 800686e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006872:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006876:	2b00      	cmp	r3, #0
 8006878:	d005      	beq.n	8006886 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800687e:	f043 0201 	orr.w	r2, r3, #1
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006886:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800688a:	f003 0304 	and.w	r3, r3, #4
 800688e:	2b00      	cmp	r3, #0
 8006890:	d00b      	beq.n	80068aa <HAL_UART_IRQHandler+0xd2>
 8006892:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006896:	f003 0301 	and.w	r3, r3, #1
 800689a:	2b00      	cmp	r3, #0
 800689c:	d005      	beq.n	80068aa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068a2:	f043 0202 	orr.w	r2, r3, #2
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80068aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068ae:	f003 0302 	and.w	r3, r3, #2
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d00b      	beq.n	80068ce <HAL_UART_IRQHandler+0xf6>
 80068b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068ba:	f003 0301 	and.w	r3, r3, #1
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d005      	beq.n	80068ce <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068c6:	f043 0204 	orr.w	r2, r3, #4
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80068ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068d2:	f003 0308 	and.w	r3, r3, #8
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d011      	beq.n	80068fe <HAL_UART_IRQHandler+0x126>
 80068da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068de:	f003 0320 	and.w	r3, r3, #32
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d105      	bne.n	80068f2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80068e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068ea:	f003 0301 	and.w	r3, r3, #1
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d005      	beq.n	80068fe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068f6:	f043 0208 	orr.w	r2, r3, #8
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006902:	2b00      	cmp	r3, #0
 8006904:	f000 81ed 	beq.w	8006ce2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006908:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800690c:	f003 0320 	and.w	r3, r3, #32
 8006910:	2b00      	cmp	r3, #0
 8006912:	d008      	beq.n	8006926 <HAL_UART_IRQHandler+0x14e>
 8006914:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006918:	f003 0320 	and.w	r3, r3, #32
 800691c:	2b00      	cmp	r3, #0
 800691e:	d002      	beq.n	8006926 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f000 fd0a 	bl	800733a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	695b      	ldr	r3, [r3, #20]
 800692c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006930:	2b40      	cmp	r3, #64	; 0x40
 8006932:	bf0c      	ite	eq
 8006934:	2301      	moveq	r3, #1
 8006936:	2300      	movne	r3, #0
 8006938:	b2db      	uxtb	r3, r3
 800693a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006942:	f003 0308 	and.w	r3, r3, #8
 8006946:	2b00      	cmp	r3, #0
 8006948:	d103      	bne.n	8006952 <HAL_UART_IRQHandler+0x17a>
 800694a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800694e:	2b00      	cmp	r3, #0
 8006950:	d04f      	beq.n	80069f2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f000 fc12 	bl	800717c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	695b      	ldr	r3, [r3, #20]
 800695e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006962:	2b40      	cmp	r3, #64	; 0x40
 8006964:	d141      	bne.n	80069ea <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	3314      	adds	r3, #20
 800696c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006970:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006974:	e853 3f00 	ldrex	r3, [r3]
 8006978:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800697c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006980:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006984:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	3314      	adds	r3, #20
 800698e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006992:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006996:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800699a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800699e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80069a2:	e841 2300 	strex	r3, r2, [r1]
 80069a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80069aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d1d9      	bne.n	8006966 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d013      	beq.n	80069e2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069be:	4a7d      	ldr	r2, [pc, #500]	; (8006bb4 <HAL_UART_IRQHandler+0x3dc>)
 80069c0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069c6:	4618      	mov	r0, r3
 80069c8:	f7fd ff1c 	bl	8004804 <HAL_DMA_Abort_IT>
 80069cc:	4603      	mov	r3, r0
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d016      	beq.n	8006a00 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069d8:	687a      	ldr	r2, [r7, #4]
 80069da:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80069dc:	4610      	mov	r0, r2
 80069de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069e0:	e00e      	b.n	8006a00 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f000 f99a 	bl	8006d1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069e8:	e00a      	b.n	8006a00 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f000 f996 	bl	8006d1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069f0:	e006      	b.n	8006a00 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f000 f992 	bl	8006d1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2200      	movs	r2, #0
 80069fc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80069fe:	e170      	b.n	8006ce2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a00:	bf00      	nop
    return;
 8006a02:	e16e      	b.n	8006ce2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a08:	2b01      	cmp	r3, #1
 8006a0a:	f040 814a 	bne.w	8006ca2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006a0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a12:	f003 0310 	and.w	r3, r3, #16
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	f000 8143 	beq.w	8006ca2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006a1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a20:	f003 0310 	and.w	r3, r3, #16
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	f000 813c 	beq.w	8006ca2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	60bb      	str	r3, [r7, #8]
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	60bb      	str	r3, [r7, #8]
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	685b      	ldr	r3, [r3, #4]
 8006a3c:	60bb      	str	r3, [r7, #8]
 8006a3e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	695b      	ldr	r3, [r3, #20]
 8006a46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a4a:	2b40      	cmp	r3, #64	; 0x40
 8006a4c:	f040 80b4 	bne.w	8006bb8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	685b      	ldr	r3, [r3, #4]
 8006a58:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006a5c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	f000 8140 	beq.w	8006ce6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006a6a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006a6e:	429a      	cmp	r2, r3
 8006a70:	f080 8139 	bcs.w	8006ce6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006a7a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a80:	69db      	ldr	r3, [r3, #28]
 8006a82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a86:	f000 8088 	beq.w	8006b9a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	330c      	adds	r3, #12
 8006a90:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a94:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006a98:	e853 3f00 	ldrex	r3, [r3]
 8006a9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006aa0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006aa4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006aa8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	330c      	adds	r3, #12
 8006ab2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006ab6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006aba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006abe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006ac2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006ac6:	e841 2300 	strex	r3, r2, [r1]
 8006aca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006ace:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d1d9      	bne.n	8006a8a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	3314      	adds	r3, #20
 8006adc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ade:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ae0:	e853 3f00 	ldrex	r3, [r3]
 8006ae4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006ae6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006ae8:	f023 0301 	bic.w	r3, r3, #1
 8006aec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	3314      	adds	r3, #20
 8006af6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006afa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006afe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b00:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006b02:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006b06:	e841 2300 	strex	r3, r2, [r1]
 8006b0a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006b0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d1e1      	bne.n	8006ad6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	3314      	adds	r3, #20
 8006b18:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006b1c:	e853 3f00 	ldrex	r3, [r3]
 8006b20:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006b22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b28:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	3314      	adds	r3, #20
 8006b32:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006b36:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006b38:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b3a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006b3c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006b3e:	e841 2300 	strex	r3, r2, [r1]
 8006b42:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006b44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d1e3      	bne.n	8006b12 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2220      	movs	r2, #32
 8006b4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2200      	movs	r2, #0
 8006b56:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	330c      	adds	r3, #12
 8006b5e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b62:	e853 3f00 	ldrex	r3, [r3]
 8006b66:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006b68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b6a:	f023 0310 	bic.w	r3, r3, #16
 8006b6e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	330c      	adds	r3, #12
 8006b78:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006b7c:	65ba      	str	r2, [r7, #88]	; 0x58
 8006b7e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b80:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006b82:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006b84:	e841 2300 	strex	r3, r2, [r1]
 8006b88:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006b8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d1e3      	bne.n	8006b58 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b94:	4618      	mov	r0, r3
 8006b96:	f7fd fdc5 	bl	8004724 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006ba2:	b29b      	uxth	r3, r3
 8006ba4:	1ad3      	subs	r3, r2, r3
 8006ba6:	b29b      	uxth	r3, r3
 8006ba8:	4619      	mov	r1, r3
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f000 f8c0 	bl	8006d30 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006bb0:	e099      	b.n	8006ce6 <HAL_UART_IRQHandler+0x50e>
 8006bb2:	bf00      	nop
 8006bb4:	08007243 	.word	0x08007243
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006bc0:	b29b      	uxth	r3, r3
 8006bc2:	1ad3      	subs	r3, r2, r3
 8006bc4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006bcc:	b29b      	uxth	r3, r3
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	f000 808b 	beq.w	8006cea <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006bd4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	f000 8086 	beq.w	8006cea <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	330c      	adds	r3, #12
 8006be4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006be8:	e853 3f00 	ldrex	r3, [r3]
 8006bec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006bee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bf0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006bf4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	330c      	adds	r3, #12
 8006bfe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006c02:	647a      	str	r2, [r7, #68]	; 0x44
 8006c04:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c06:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006c08:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c0a:	e841 2300 	strex	r3, r2, [r1]
 8006c0e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006c10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d1e3      	bne.n	8006bde <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	3314      	adds	r3, #20
 8006c1c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c20:	e853 3f00 	ldrex	r3, [r3]
 8006c24:	623b      	str	r3, [r7, #32]
   return(result);
 8006c26:	6a3b      	ldr	r3, [r7, #32]
 8006c28:	f023 0301 	bic.w	r3, r3, #1
 8006c2c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	3314      	adds	r3, #20
 8006c36:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006c3a:	633a      	str	r2, [r7, #48]	; 0x30
 8006c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006c40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c42:	e841 2300 	strex	r3, r2, [r1]
 8006c46:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d1e3      	bne.n	8006c16 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2220      	movs	r2, #32
 8006c52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	330c      	adds	r3, #12
 8006c62:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	e853 3f00 	ldrex	r3, [r3]
 8006c6a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	f023 0310 	bic.w	r3, r3, #16
 8006c72:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	330c      	adds	r3, #12
 8006c7c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006c80:	61fa      	str	r2, [r7, #28]
 8006c82:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c84:	69b9      	ldr	r1, [r7, #24]
 8006c86:	69fa      	ldr	r2, [r7, #28]
 8006c88:	e841 2300 	strex	r3, r2, [r1]
 8006c8c:	617b      	str	r3, [r7, #20]
   return(result);
 8006c8e:	697b      	ldr	r3, [r7, #20]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d1e3      	bne.n	8006c5c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006c94:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006c98:	4619      	mov	r1, r3
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f000 f848 	bl	8006d30 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006ca0:	e023      	b.n	8006cea <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006ca2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ca6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d009      	beq.n	8006cc2 <HAL_UART_IRQHandler+0x4ea>
 8006cae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d003      	beq.n	8006cc2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f000 fad5 	bl	800726a <UART_Transmit_IT>
    return;
 8006cc0:	e014      	b.n	8006cec <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006cc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d00e      	beq.n	8006cec <HAL_UART_IRQHandler+0x514>
 8006cce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d008      	beq.n	8006cec <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f000 fb15 	bl	800730a <UART_EndTransmit_IT>
    return;
 8006ce0:	e004      	b.n	8006cec <HAL_UART_IRQHandler+0x514>
    return;
 8006ce2:	bf00      	nop
 8006ce4:	e002      	b.n	8006cec <HAL_UART_IRQHandler+0x514>
      return;
 8006ce6:	bf00      	nop
 8006ce8:	e000      	b.n	8006cec <HAL_UART_IRQHandler+0x514>
      return;
 8006cea:	bf00      	nop
  }
}
 8006cec:	37e8      	adds	r7, #232	; 0xe8
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd80      	pop	{r7, pc}
 8006cf2:	bf00      	nop

08006cf4 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b083      	sub	sp, #12
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006cfc:	bf00      	nop
 8006cfe:	370c      	adds	r7, #12
 8006d00:	46bd      	mov	sp, r7
 8006d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d06:	4770      	bx	lr

08006d08 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b083      	sub	sp, #12
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006d10:	bf00      	nop
 8006d12:	370c      	adds	r7, #12
 8006d14:	46bd      	mov	sp, r7
 8006d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1a:	4770      	bx	lr

08006d1c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b083      	sub	sp, #12
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006d24:	bf00      	nop
 8006d26:	370c      	adds	r7, #12
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2e:	4770      	bx	lr

08006d30 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006d30:	b480      	push	{r7}
 8006d32:	b083      	sub	sp, #12
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
 8006d38:	460b      	mov	r3, r1
 8006d3a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006d3c:	bf00      	nop
 8006d3e:	370c      	adds	r7, #12
 8006d40:	46bd      	mov	sp, r7
 8006d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d46:	4770      	bx	lr

08006d48 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b090      	sub	sp, #64	; 0x40
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d54:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d137      	bne.n	8006dd4 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8006d64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d66:	2200      	movs	r2, #0
 8006d68:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006d6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	3314      	adds	r3, #20
 8006d70:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d74:	e853 3f00 	ldrex	r3, [r3]
 8006d78:	623b      	str	r3, [r7, #32]
   return(result);
 8006d7a:	6a3b      	ldr	r3, [r7, #32]
 8006d7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d80:	63bb      	str	r3, [r7, #56]	; 0x38
 8006d82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	3314      	adds	r3, #20
 8006d88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d8a:	633a      	str	r2, [r7, #48]	; 0x30
 8006d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d8e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006d90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d92:	e841 2300 	strex	r3, r2, [r1]
 8006d96:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d1e5      	bne.n	8006d6a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006d9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	330c      	adds	r3, #12
 8006da4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	e853 3f00 	ldrex	r3, [r3]
 8006dac:	60fb      	str	r3, [r7, #12]
   return(result);
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006db4:	637b      	str	r3, [r7, #52]	; 0x34
 8006db6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	330c      	adds	r3, #12
 8006dbc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006dbe:	61fa      	str	r2, [r7, #28]
 8006dc0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dc2:	69b9      	ldr	r1, [r7, #24]
 8006dc4:	69fa      	ldr	r2, [r7, #28]
 8006dc6:	e841 2300 	strex	r3, r2, [r1]
 8006dca:	617b      	str	r3, [r7, #20]
   return(result);
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d1e5      	bne.n	8006d9e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006dd2:	e002      	b.n	8006dda <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006dd4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006dd6:	f7fc f9bd 	bl	8003154 <HAL_UART_TxCpltCallback>
}
 8006dda:	bf00      	nop
 8006ddc:	3740      	adds	r7, #64	; 0x40
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}

08006de2 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006de2:	b580      	push	{r7, lr}
 8006de4:	b084      	sub	sp, #16
 8006de6:	af00      	add	r7, sp, #0
 8006de8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dee:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006df0:	68f8      	ldr	r0, [r7, #12]
 8006df2:	f7ff ff7f 	bl	8006cf4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006df6:	bf00      	nop
 8006df8:	3710      	adds	r7, #16
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd80      	pop	{r7, pc}

08006dfe <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006dfe:	b580      	push	{r7, lr}
 8006e00:	b09c      	sub	sp, #112	; 0x70
 8006e02:	af00      	add	r7, sp, #0
 8006e04:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e0a:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d172      	bne.n	8006f00 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006e1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	330c      	adds	r3, #12
 8006e26:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e2a:	e853 3f00 	ldrex	r3, [r3]
 8006e2e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006e30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e32:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e36:	66bb      	str	r3, [r7, #104]	; 0x68
 8006e38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	330c      	adds	r3, #12
 8006e3e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006e40:	65ba      	str	r2, [r7, #88]	; 0x58
 8006e42:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e44:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006e46:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006e48:	e841 2300 	strex	r3, r2, [r1]
 8006e4c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006e4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d1e5      	bne.n	8006e20 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	3314      	adds	r3, #20
 8006e5a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e5e:	e853 3f00 	ldrex	r3, [r3]
 8006e62:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006e64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e66:	f023 0301 	bic.w	r3, r3, #1
 8006e6a:	667b      	str	r3, [r7, #100]	; 0x64
 8006e6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	3314      	adds	r3, #20
 8006e72:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006e74:	647a      	str	r2, [r7, #68]	; 0x44
 8006e76:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e78:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006e7a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006e7c:	e841 2300 	strex	r3, r2, [r1]
 8006e80:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006e82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d1e5      	bne.n	8006e54 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	3314      	adds	r3, #20
 8006e8e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e92:	e853 3f00 	ldrex	r3, [r3]
 8006e96:	623b      	str	r3, [r7, #32]
   return(result);
 8006e98:	6a3b      	ldr	r3, [r7, #32]
 8006e9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e9e:	663b      	str	r3, [r7, #96]	; 0x60
 8006ea0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	3314      	adds	r3, #20
 8006ea6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006ea8:	633a      	str	r2, [r7, #48]	; 0x30
 8006eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006eae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006eb0:	e841 2300 	strex	r3, r2, [r1]
 8006eb4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d1e5      	bne.n	8006e88 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006ebc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ebe:	2220      	movs	r2, #32
 8006ec0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ec4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ec8:	2b01      	cmp	r3, #1
 8006eca:	d119      	bne.n	8006f00 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ecc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	330c      	adds	r3, #12
 8006ed2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ed4:	693b      	ldr	r3, [r7, #16]
 8006ed6:	e853 3f00 	ldrex	r3, [r3]
 8006eda:	60fb      	str	r3, [r7, #12]
   return(result);
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	f023 0310 	bic.w	r3, r3, #16
 8006ee2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006ee4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	330c      	adds	r3, #12
 8006eea:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006eec:	61fa      	str	r2, [r7, #28]
 8006eee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ef0:	69b9      	ldr	r1, [r7, #24]
 8006ef2:	69fa      	ldr	r2, [r7, #28]
 8006ef4:	e841 2300 	strex	r3, r2, [r1]
 8006ef8:	617b      	str	r3, [r7, #20]
   return(result);
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d1e5      	bne.n	8006ecc <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f04:	2b01      	cmp	r3, #1
 8006f06:	d106      	bne.n	8006f16 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006f08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f0a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006f0c:	4619      	mov	r1, r3
 8006f0e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006f10:	f7ff ff0e 	bl	8006d30 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006f14:	e002      	b.n	8006f1c <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8006f16:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006f18:	f7fc f92e 	bl	8003178 <HAL_UART_RxCpltCallback>
}
 8006f1c:	bf00      	nop
 8006f1e:	3770      	adds	r7, #112	; 0x70
 8006f20:	46bd      	mov	sp, r7
 8006f22:	bd80      	pop	{r7, pc}

08006f24 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b084      	sub	sp, #16
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f30:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f36:	2b01      	cmp	r3, #1
 8006f38:	d108      	bne.n	8006f4c <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006f3e:	085b      	lsrs	r3, r3, #1
 8006f40:	b29b      	uxth	r3, r3
 8006f42:	4619      	mov	r1, r3
 8006f44:	68f8      	ldr	r0, [r7, #12]
 8006f46:	f7ff fef3 	bl	8006d30 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006f4a:	e002      	b.n	8006f52 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8006f4c:	68f8      	ldr	r0, [r7, #12]
 8006f4e:	f7ff fedb 	bl	8006d08 <HAL_UART_RxHalfCpltCallback>
}
 8006f52:	bf00      	nop
 8006f54:	3710      	adds	r7, #16
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd80      	pop	{r7, pc}

08006f5a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006f5a:	b580      	push	{r7, lr}
 8006f5c:	b084      	sub	sp, #16
 8006f5e:	af00      	add	r7, sp, #0
 8006f60:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006f62:	2300      	movs	r3, #0
 8006f64:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f6a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	695b      	ldr	r3, [r3, #20]
 8006f72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f76:	2b80      	cmp	r3, #128	; 0x80
 8006f78:	bf0c      	ite	eq
 8006f7a:	2301      	moveq	r3, #1
 8006f7c:	2300      	movne	r3, #0
 8006f7e:	b2db      	uxtb	r3, r3
 8006f80:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f88:	b2db      	uxtb	r3, r3
 8006f8a:	2b21      	cmp	r3, #33	; 0x21
 8006f8c:	d108      	bne.n	8006fa0 <UART_DMAError+0x46>
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d005      	beq.n	8006fa0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	2200      	movs	r2, #0
 8006f98:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006f9a:	68b8      	ldr	r0, [r7, #8]
 8006f9c:	f000 f8c6 	bl	800712c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	695b      	ldr	r3, [r3, #20]
 8006fa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006faa:	2b40      	cmp	r3, #64	; 0x40
 8006fac:	bf0c      	ite	eq
 8006fae:	2301      	moveq	r3, #1
 8006fb0:	2300      	movne	r3, #0
 8006fb2:	b2db      	uxtb	r3, r3
 8006fb4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006fbc:	b2db      	uxtb	r3, r3
 8006fbe:	2b22      	cmp	r3, #34	; 0x22
 8006fc0:	d108      	bne.n	8006fd4 <UART_DMAError+0x7a>
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d005      	beq.n	8006fd4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	2200      	movs	r2, #0
 8006fcc:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006fce:	68b8      	ldr	r0, [r7, #8]
 8006fd0:	f000 f8d4 	bl	800717c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fd8:	f043 0210 	orr.w	r2, r3, #16
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006fe0:	68b8      	ldr	r0, [r7, #8]
 8006fe2:	f7ff fe9b 	bl	8006d1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006fe6:	bf00      	nop
 8006fe8:	3710      	adds	r7, #16
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd80      	pop	{r7, pc}
	...

08006ff0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b098      	sub	sp, #96	; 0x60
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	60f8      	str	r0, [r7, #12]
 8006ff8:	60b9      	str	r1, [r7, #8]
 8006ffa:	4613      	mov	r3, r2
 8006ffc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006ffe:	68ba      	ldr	r2, [r7, #8]
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	88fa      	ldrh	r2, [r7, #6]
 8007008:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	2200      	movs	r2, #0
 800700e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	2222      	movs	r2, #34	; 0x22
 8007014:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800701c:	4a40      	ldr	r2, [pc, #256]	; (8007120 <UART_Start_Receive_DMA+0x130>)
 800701e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007024:	4a3f      	ldr	r2, [pc, #252]	; (8007124 <UART_Start_Receive_DMA+0x134>)
 8007026:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800702c:	4a3e      	ldr	r2, [pc, #248]	; (8007128 <UART_Start_Receive_DMA+0x138>)
 800702e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007034:	2200      	movs	r2, #0
 8007036:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007038:	f107 0308 	add.w	r3, r7, #8
 800703c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	3304      	adds	r3, #4
 8007048:	4619      	mov	r1, r3
 800704a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800704c:	681a      	ldr	r2, [r3, #0]
 800704e:	88fb      	ldrh	r3, [r7, #6]
 8007050:	f7fd fb10 	bl	8004674 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007054:	2300      	movs	r3, #0
 8007056:	613b      	str	r3, [r7, #16]
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	613b      	str	r3, [r7, #16]
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	685b      	ldr	r3, [r3, #4]
 8007066:	613b      	str	r3, [r7, #16]
 8007068:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	2200      	movs	r2, #0
 800706e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	691b      	ldr	r3, [r3, #16]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d019      	beq.n	80070ae <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	330c      	adds	r3, #12
 8007080:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007082:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007084:	e853 3f00 	ldrex	r3, [r3]
 8007088:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800708a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800708c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007090:	65bb      	str	r3, [r7, #88]	; 0x58
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	330c      	adds	r3, #12
 8007098:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800709a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800709c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800709e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80070a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80070a2:	e841 2300 	strex	r3, r2, [r1]
 80070a6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80070a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d1e5      	bne.n	800707a <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	3314      	adds	r3, #20
 80070b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070b8:	e853 3f00 	ldrex	r3, [r3]
 80070bc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80070be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070c0:	f043 0301 	orr.w	r3, r3, #1
 80070c4:	657b      	str	r3, [r7, #84]	; 0x54
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	3314      	adds	r3, #20
 80070cc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80070ce:	63ba      	str	r2, [r7, #56]	; 0x38
 80070d0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070d2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80070d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80070d6:	e841 2300 	strex	r3, r2, [r1]
 80070da:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80070dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d1e5      	bne.n	80070ae <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	3314      	adds	r3, #20
 80070e8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ea:	69bb      	ldr	r3, [r7, #24]
 80070ec:	e853 3f00 	ldrex	r3, [r3]
 80070f0:	617b      	str	r3, [r7, #20]
   return(result);
 80070f2:	697b      	ldr	r3, [r7, #20]
 80070f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070f8:	653b      	str	r3, [r7, #80]	; 0x50
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	3314      	adds	r3, #20
 8007100:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007102:	627a      	str	r2, [r7, #36]	; 0x24
 8007104:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007106:	6a39      	ldr	r1, [r7, #32]
 8007108:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800710a:	e841 2300 	strex	r3, r2, [r1]
 800710e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007110:	69fb      	ldr	r3, [r7, #28]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d1e5      	bne.n	80070e2 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8007116:	2300      	movs	r3, #0
}
 8007118:	4618      	mov	r0, r3
 800711a:	3760      	adds	r7, #96	; 0x60
 800711c:	46bd      	mov	sp, r7
 800711e:	bd80      	pop	{r7, pc}
 8007120:	08006dff 	.word	0x08006dff
 8007124:	08006f25 	.word	0x08006f25
 8007128:	08006f5b 	.word	0x08006f5b

0800712c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800712c:	b480      	push	{r7}
 800712e:	b089      	sub	sp, #36	; 0x24
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	330c      	adds	r3, #12
 800713a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	e853 3f00 	ldrex	r3, [r3]
 8007142:	60bb      	str	r3, [r7, #8]
   return(result);
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800714a:	61fb      	str	r3, [r7, #28]
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	330c      	adds	r3, #12
 8007152:	69fa      	ldr	r2, [r7, #28]
 8007154:	61ba      	str	r2, [r7, #24]
 8007156:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007158:	6979      	ldr	r1, [r7, #20]
 800715a:	69ba      	ldr	r2, [r7, #24]
 800715c:	e841 2300 	strex	r3, r2, [r1]
 8007160:	613b      	str	r3, [r7, #16]
   return(result);
 8007162:	693b      	ldr	r3, [r7, #16]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d1e5      	bne.n	8007134 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2220      	movs	r2, #32
 800716c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8007170:	bf00      	nop
 8007172:	3724      	adds	r7, #36	; 0x24
 8007174:	46bd      	mov	sp, r7
 8007176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717a:	4770      	bx	lr

0800717c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800717c:	b480      	push	{r7}
 800717e:	b095      	sub	sp, #84	; 0x54
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	330c      	adds	r3, #12
 800718a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800718c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800718e:	e853 3f00 	ldrex	r3, [r3]
 8007192:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007196:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800719a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	330c      	adds	r3, #12
 80071a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80071a4:	643a      	str	r2, [r7, #64]	; 0x40
 80071a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071a8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80071aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80071ac:	e841 2300 	strex	r3, r2, [r1]
 80071b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80071b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d1e5      	bne.n	8007184 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	3314      	adds	r3, #20
 80071be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071c0:	6a3b      	ldr	r3, [r7, #32]
 80071c2:	e853 3f00 	ldrex	r3, [r3]
 80071c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80071c8:	69fb      	ldr	r3, [r7, #28]
 80071ca:	f023 0301 	bic.w	r3, r3, #1
 80071ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	3314      	adds	r3, #20
 80071d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80071d8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80071da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80071de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80071e0:	e841 2300 	strex	r3, r2, [r1]
 80071e4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80071e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d1e5      	bne.n	80071b8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071f0:	2b01      	cmp	r3, #1
 80071f2:	d119      	bne.n	8007228 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	330c      	adds	r3, #12
 80071fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	e853 3f00 	ldrex	r3, [r3]
 8007202:	60bb      	str	r3, [r7, #8]
   return(result);
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	f023 0310 	bic.w	r3, r3, #16
 800720a:	647b      	str	r3, [r7, #68]	; 0x44
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	330c      	adds	r3, #12
 8007212:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007214:	61ba      	str	r2, [r7, #24]
 8007216:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007218:	6979      	ldr	r1, [r7, #20]
 800721a:	69ba      	ldr	r2, [r7, #24]
 800721c:	e841 2300 	strex	r3, r2, [r1]
 8007220:	613b      	str	r3, [r7, #16]
   return(result);
 8007222:	693b      	ldr	r3, [r7, #16]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d1e5      	bne.n	80071f4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2220      	movs	r2, #32
 800722c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2200      	movs	r2, #0
 8007234:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007236:	bf00      	nop
 8007238:	3754      	adds	r7, #84	; 0x54
 800723a:	46bd      	mov	sp, r7
 800723c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007240:	4770      	bx	lr

08007242 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007242:	b580      	push	{r7, lr}
 8007244:	b084      	sub	sp, #16
 8007246:	af00      	add	r7, sp, #0
 8007248:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800724e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	2200      	movs	r2, #0
 8007254:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	2200      	movs	r2, #0
 800725a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800725c:	68f8      	ldr	r0, [r7, #12]
 800725e:	f7ff fd5d 	bl	8006d1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007262:	bf00      	nop
 8007264:	3710      	adds	r7, #16
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}

0800726a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800726a:	b480      	push	{r7}
 800726c:	b085      	sub	sp, #20
 800726e:	af00      	add	r7, sp, #0
 8007270:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007278:	b2db      	uxtb	r3, r3
 800727a:	2b21      	cmp	r3, #33	; 0x21
 800727c:	d13e      	bne.n	80072fc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	689b      	ldr	r3, [r3, #8]
 8007282:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007286:	d114      	bne.n	80072b2 <UART_Transmit_IT+0x48>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	691b      	ldr	r3, [r3, #16]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d110      	bne.n	80072b2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6a1b      	ldr	r3, [r3, #32]
 8007294:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	881b      	ldrh	r3, [r3, #0]
 800729a:	461a      	mov	r2, r3
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80072a4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6a1b      	ldr	r3, [r3, #32]
 80072aa:	1c9a      	adds	r2, r3, #2
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	621a      	str	r2, [r3, #32]
 80072b0:	e008      	b.n	80072c4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6a1b      	ldr	r3, [r3, #32]
 80072b6:	1c59      	adds	r1, r3, #1
 80072b8:	687a      	ldr	r2, [r7, #4]
 80072ba:	6211      	str	r1, [r2, #32]
 80072bc:	781a      	ldrb	r2, [r3, #0]
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80072c8:	b29b      	uxth	r3, r3
 80072ca:	3b01      	subs	r3, #1
 80072cc:	b29b      	uxth	r3, r3
 80072ce:	687a      	ldr	r2, [r7, #4]
 80072d0:	4619      	mov	r1, r3
 80072d2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d10f      	bne.n	80072f8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	68da      	ldr	r2, [r3, #12]
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80072e6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	68da      	ldr	r2, [r3, #12]
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80072f6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80072f8:	2300      	movs	r3, #0
 80072fa:	e000      	b.n	80072fe <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80072fc:	2302      	movs	r3, #2
  }
}
 80072fe:	4618      	mov	r0, r3
 8007300:	3714      	adds	r7, #20
 8007302:	46bd      	mov	sp, r7
 8007304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007308:	4770      	bx	lr

0800730a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800730a:	b580      	push	{r7, lr}
 800730c:	b082      	sub	sp, #8
 800730e:	af00      	add	r7, sp, #0
 8007310:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	68da      	ldr	r2, [r3, #12]
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007320:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2220      	movs	r2, #32
 8007326:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f7fb ff12 	bl	8003154 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007330:	2300      	movs	r3, #0
}
 8007332:	4618      	mov	r0, r3
 8007334:	3708      	adds	r7, #8
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}

0800733a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800733a:	b580      	push	{r7, lr}
 800733c:	b08c      	sub	sp, #48	; 0x30
 800733e:	af00      	add	r7, sp, #0
 8007340:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007348:	b2db      	uxtb	r3, r3
 800734a:	2b22      	cmp	r3, #34	; 0x22
 800734c:	f040 80ab 	bne.w	80074a6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	689b      	ldr	r3, [r3, #8]
 8007354:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007358:	d117      	bne.n	800738a <UART_Receive_IT+0x50>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	691b      	ldr	r3, [r3, #16]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d113      	bne.n	800738a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007362:	2300      	movs	r3, #0
 8007364:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800736a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	685b      	ldr	r3, [r3, #4]
 8007372:	b29b      	uxth	r3, r3
 8007374:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007378:	b29a      	uxth	r2, r3
 800737a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800737c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007382:	1c9a      	adds	r2, r3, #2
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	629a      	str	r2, [r3, #40]	; 0x28
 8007388:	e026      	b.n	80073d8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800738e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007390:	2300      	movs	r3, #0
 8007392:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	689b      	ldr	r3, [r3, #8]
 8007398:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800739c:	d007      	beq.n	80073ae <UART_Receive_IT+0x74>
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	689b      	ldr	r3, [r3, #8]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d10a      	bne.n	80073bc <UART_Receive_IT+0x82>
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	691b      	ldr	r3, [r3, #16]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d106      	bne.n	80073bc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	685b      	ldr	r3, [r3, #4]
 80073b4:	b2da      	uxtb	r2, r3
 80073b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073b8:	701a      	strb	r2, [r3, #0]
 80073ba:	e008      	b.n	80073ce <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	685b      	ldr	r3, [r3, #4]
 80073c2:	b2db      	uxtb	r3, r3
 80073c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073c8:	b2da      	uxtb	r2, r3
 80073ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073cc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073d2:	1c5a      	adds	r2, r3, #1
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80073dc:	b29b      	uxth	r3, r3
 80073de:	3b01      	subs	r3, #1
 80073e0:	b29b      	uxth	r3, r3
 80073e2:	687a      	ldr	r2, [r7, #4]
 80073e4:	4619      	mov	r1, r3
 80073e6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d15a      	bne.n	80074a2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	68da      	ldr	r2, [r3, #12]
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f022 0220 	bic.w	r2, r2, #32
 80073fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	68da      	ldr	r2, [r3, #12]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800740a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	695a      	ldr	r2, [r3, #20]
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f022 0201 	bic.w	r2, r2, #1
 800741a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2220      	movs	r2, #32
 8007420:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007428:	2b01      	cmp	r3, #1
 800742a:	d135      	bne.n	8007498 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2200      	movs	r2, #0
 8007430:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	330c      	adds	r3, #12
 8007438:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	e853 3f00 	ldrex	r3, [r3]
 8007440:	613b      	str	r3, [r7, #16]
   return(result);
 8007442:	693b      	ldr	r3, [r7, #16]
 8007444:	f023 0310 	bic.w	r3, r3, #16
 8007448:	627b      	str	r3, [r7, #36]	; 0x24
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	330c      	adds	r3, #12
 8007450:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007452:	623a      	str	r2, [r7, #32]
 8007454:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007456:	69f9      	ldr	r1, [r7, #28]
 8007458:	6a3a      	ldr	r2, [r7, #32]
 800745a:	e841 2300 	strex	r3, r2, [r1]
 800745e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007460:	69bb      	ldr	r3, [r7, #24]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d1e5      	bne.n	8007432 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f003 0310 	and.w	r3, r3, #16
 8007470:	2b10      	cmp	r3, #16
 8007472:	d10a      	bne.n	800748a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007474:	2300      	movs	r3, #0
 8007476:	60fb      	str	r3, [r7, #12]
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	60fb      	str	r3, [r7, #12]
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	685b      	ldr	r3, [r3, #4]
 8007486:	60fb      	str	r3, [r7, #12]
 8007488:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800748e:	4619      	mov	r1, r3
 8007490:	6878      	ldr	r0, [r7, #4]
 8007492:	f7ff fc4d 	bl	8006d30 <HAL_UARTEx_RxEventCallback>
 8007496:	e002      	b.n	800749e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	f7fb fe6d 	bl	8003178 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800749e:	2300      	movs	r3, #0
 80074a0:	e002      	b.n	80074a8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80074a2:	2300      	movs	r3, #0
 80074a4:	e000      	b.n	80074a8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80074a6:	2302      	movs	r3, #2
  }
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	3730      	adds	r7, #48	; 0x30
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd80      	pop	{r7, pc}

080074b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80074b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80074b4:	b0c0      	sub	sp, #256	; 0x100
 80074b6:	af00      	add	r7, sp, #0
 80074b8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80074bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	691b      	ldr	r3, [r3, #16]
 80074c4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80074c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074cc:	68d9      	ldr	r1, [r3, #12]
 80074ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074d2:	681a      	ldr	r2, [r3, #0]
 80074d4:	ea40 0301 	orr.w	r3, r0, r1
 80074d8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80074da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074de:	689a      	ldr	r2, [r3, #8]
 80074e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074e4:	691b      	ldr	r3, [r3, #16]
 80074e6:	431a      	orrs	r2, r3
 80074e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074ec:	695b      	ldr	r3, [r3, #20]
 80074ee:	431a      	orrs	r2, r3
 80074f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074f4:	69db      	ldr	r3, [r3, #28]
 80074f6:	4313      	orrs	r3, r2
 80074f8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80074fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	68db      	ldr	r3, [r3, #12]
 8007504:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007508:	f021 010c 	bic.w	r1, r1, #12
 800750c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007510:	681a      	ldr	r2, [r3, #0]
 8007512:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007516:	430b      	orrs	r3, r1
 8007518:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800751a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	695b      	ldr	r3, [r3, #20]
 8007522:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007526:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800752a:	6999      	ldr	r1, [r3, #24]
 800752c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007530:	681a      	ldr	r2, [r3, #0]
 8007532:	ea40 0301 	orr.w	r3, r0, r1
 8007536:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800753c:	681a      	ldr	r2, [r3, #0]
 800753e:	4b8f      	ldr	r3, [pc, #572]	; (800777c <UART_SetConfig+0x2cc>)
 8007540:	429a      	cmp	r2, r3
 8007542:	d005      	beq.n	8007550 <UART_SetConfig+0xa0>
 8007544:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007548:	681a      	ldr	r2, [r3, #0]
 800754a:	4b8d      	ldr	r3, [pc, #564]	; (8007780 <UART_SetConfig+0x2d0>)
 800754c:	429a      	cmp	r2, r3
 800754e:	d104      	bne.n	800755a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007550:	f7fd fee2 	bl	8005318 <HAL_RCC_GetPCLK2Freq>
 8007554:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007558:	e003      	b.n	8007562 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800755a:	f7fd fec9 	bl	80052f0 <HAL_RCC_GetPCLK1Freq>
 800755e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007562:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007566:	69db      	ldr	r3, [r3, #28]
 8007568:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800756c:	f040 810c 	bne.w	8007788 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007570:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007574:	2200      	movs	r2, #0
 8007576:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800757a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800757e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007582:	4622      	mov	r2, r4
 8007584:	462b      	mov	r3, r5
 8007586:	1891      	adds	r1, r2, r2
 8007588:	65b9      	str	r1, [r7, #88]	; 0x58
 800758a:	415b      	adcs	r3, r3
 800758c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800758e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007592:	4621      	mov	r1, r4
 8007594:	eb12 0801 	adds.w	r8, r2, r1
 8007598:	4629      	mov	r1, r5
 800759a:	eb43 0901 	adc.w	r9, r3, r1
 800759e:	f04f 0200 	mov.w	r2, #0
 80075a2:	f04f 0300 	mov.w	r3, #0
 80075a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80075aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80075ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80075b2:	4690      	mov	r8, r2
 80075b4:	4699      	mov	r9, r3
 80075b6:	4623      	mov	r3, r4
 80075b8:	eb18 0303 	adds.w	r3, r8, r3
 80075bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80075c0:	462b      	mov	r3, r5
 80075c2:	eb49 0303 	adc.w	r3, r9, r3
 80075c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80075ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075ce:	685b      	ldr	r3, [r3, #4]
 80075d0:	2200      	movs	r2, #0
 80075d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80075d6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80075da:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80075de:	460b      	mov	r3, r1
 80075e0:	18db      	adds	r3, r3, r3
 80075e2:	653b      	str	r3, [r7, #80]	; 0x50
 80075e4:	4613      	mov	r3, r2
 80075e6:	eb42 0303 	adc.w	r3, r2, r3
 80075ea:	657b      	str	r3, [r7, #84]	; 0x54
 80075ec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80075f0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80075f4:	f7f9 fa56 	bl	8000aa4 <__aeabi_uldivmod>
 80075f8:	4602      	mov	r2, r0
 80075fa:	460b      	mov	r3, r1
 80075fc:	4b61      	ldr	r3, [pc, #388]	; (8007784 <UART_SetConfig+0x2d4>)
 80075fe:	fba3 2302 	umull	r2, r3, r3, r2
 8007602:	095b      	lsrs	r3, r3, #5
 8007604:	011c      	lsls	r4, r3, #4
 8007606:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800760a:	2200      	movs	r2, #0
 800760c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007610:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007614:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007618:	4642      	mov	r2, r8
 800761a:	464b      	mov	r3, r9
 800761c:	1891      	adds	r1, r2, r2
 800761e:	64b9      	str	r1, [r7, #72]	; 0x48
 8007620:	415b      	adcs	r3, r3
 8007622:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007624:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007628:	4641      	mov	r1, r8
 800762a:	eb12 0a01 	adds.w	sl, r2, r1
 800762e:	4649      	mov	r1, r9
 8007630:	eb43 0b01 	adc.w	fp, r3, r1
 8007634:	f04f 0200 	mov.w	r2, #0
 8007638:	f04f 0300 	mov.w	r3, #0
 800763c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007640:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007644:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007648:	4692      	mov	sl, r2
 800764a:	469b      	mov	fp, r3
 800764c:	4643      	mov	r3, r8
 800764e:	eb1a 0303 	adds.w	r3, sl, r3
 8007652:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007656:	464b      	mov	r3, r9
 8007658:	eb4b 0303 	adc.w	r3, fp, r3
 800765c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007660:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007664:	685b      	ldr	r3, [r3, #4]
 8007666:	2200      	movs	r2, #0
 8007668:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800766c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007670:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007674:	460b      	mov	r3, r1
 8007676:	18db      	adds	r3, r3, r3
 8007678:	643b      	str	r3, [r7, #64]	; 0x40
 800767a:	4613      	mov	r3, r2
 800767c:	eb42 0303 	adc.w	r3, r2, r3
 8007680:	647b      	str	r3, [r7, #68]	; 0x44
 8007682:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007686:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800768a:	f7f9 fa0b 	bl	8000aa4 <__aeabi_uldivmod>
 800768e:	4602      	mov	r2, r0
 8007690:	460b      	mov	r3, r1
 8007692:	4611      	mov	r1, r2
 8007694:	4b3b      	ldr	r3, [pc, #236]	; (8007784 <UART_SetConfig+0x2d4>)
 8007696:	fba3 2301 	umull	r2, r3, r3, r1
 800769a:	095b      	lsrs	r3, r3, #5
 800769c:	2264      	movs	r2, #100	; 0x64
 800769e:	fb02 f303 	mul.w	r3, r2, r3
 80076a2:	1acb      	subs	r3, r1, r3
 80076a4:	00db      	lsls	r3, r3, #3
 80076a6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80076aa:	4b36      	ldr	r3, [pc, #216]	; (8007784 <UART_SetConfig+0x2d4>)
 80076ac:	fba3 2302 	umull	r2, r3, r3, r2
 80076b0:	095b      	lsrs	r3, r3, #5
 80076b2:	005b      	lsls	r3, r3, #1
 80076b4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80076b8:	441c      	add	r4, r3
 80076ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80076be:	2200      	movs	r2, #0
 80076c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80076c4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80076c8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80076cc:	4642      	mov	r2, r8
 80076ce:	464b      	mov	r3, r9
 80076d0:	1891      	adds	r1, r2, r2
 80076d2:	63b9      	str	r1, [r7, #56]	; 0x38
 80076d4:	415b      	adcs	r3, r3
 80076d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80076d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80076dc:	4641      	mov	r1, r8
 80076de:	1851      	adds	r1, r2, r1
 80076e0:	6339      	str	r1, [r7, #48]	; 0x30
 80076e2:	4649      	mov	r1, r9
 80076e4:	414b      	adcs	r3, r1
 80076e6:	637b      	str	r3, [r7, #52]	; 0x34
 80076e8:	f04f 0200 	mov.w	r2, #0
 80076ec:	f04f 0300 	mov.w	r3, #0
 80076f0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80076f4:	4659      	mov	r1, fp
 80076f6:	00cb      	lsls	r3, r1, #3
 80076f8:	4651      	mov	r1, sl
 80076fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80076fe:	4651      	mov	r1, sl
 8007700:	00ca      	lsls	r2, r1, #3
 8007702:	4610      	mov	r0, r2
 8007704:	4619      	mov	r1, r3
 8007706:	4603      	mov	r3, r0
 8007708:	4642      	mov	r2, r8
 800770a:	189b      	adds	r3, r3, r2
 800770c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007710:	464b      	mov	r3, r9
 8007712:	460a      	mov	r2, r1
 8007714:	eb42 0303 	adc.w	r3, r2, r3
 8007718:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800771c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007720:	685b      	ldr	r3, [r3, #4]
 8007722:	2200      	movs	r2, #0
 8007724:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007728:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800772c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007730:	460b      	mov	r3, r1
 8007732:	18db      	adds	r3, r3, r3
 8007734:	62bb      	str	r3, [r7, #40]	; 0x28
 8007736:	4613      	mov	r3, r2
 8007738:	eb42 0303 	adc.w	r3, r2, r3
 800773c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800773e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007742:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007746:	f7f9 f9ad 	bl	8000aa4 <__aeabi_uldivmod>
 800774a:	4602      	mov	r2, r0
 800774c:	460b      	mov	r3, r1
 800774e:	4b0d      	ldr	r3, [pc, #52]	; (8007784 <UART_SetConfig+0x2d4>)
 8007750:	fba3 1302 	umull	r1, r3, r3, r2
 8007754:	095b      	lsrs	r3, r3, #5
 8007756:	2164      	movs	r1, #100	; 0x64
 8007758:	fb01 f303 	mul.w	r3, r1, r3
 800775c:	1ad3      	subs	r3, r2, r3
 800775e:	00db      	lsls	r3, r3, #3
 8007760:	3332      	adds	r3, #50	; 0x32
 8007762:	4a08      	ldr	r2, [pc, #32]	; (8007784 <UART_SetConfig+0x2d4>)
 8007764:	fba2 2303 	umull	r2, r3, r2, r3
 8007768:	095b      	lsrs	r3, r3, #5
 800776a:	f003 0207 	and.w	r2, r3, #7
 800776e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	4422      	add	r2, r4
 8007776:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007778:	e106      	b.n	8007988 <UART_SetConfig+0x4d8>
 800777a:	bf00      	nop
 800777c:	40011000 	.word	0x40011000
 8007780:	40011400 	.word	0x40011400
 8007784:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007788:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800778c:	2200      	movs	r2, #0
 800778e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007792:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007796:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800779a:	4642      	mov	r2, r8
 800779c:	464b      	mov	r3, r9
 800779e:	1891      	adds	r1, r2, r2
 80077a0:	6239      	str	r1, [r7, #32]
 80077a2:	415b      	adcs	r3, r3
 80077a4:	627b      	str	r3, [r7, #36]	; 0x24
 80077a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80077aa:	4641      	mov	r1, r8
 80077ac:	1854      	adds	r4, r2, r1
 80077ae:	4649      	mov	r1, r9
 80077b0:	eb43 0501 	adc.w	r5, r3, r1
 80077b4:	f04f 0200 	mov.w	r2, #0
 80077b8:	f04f 0300 	mov.w	r3, #0
 80077bc:	00eb      	lsls	r3, r5, #3
 80077be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80077c2:	00e2      	lsls	r2, r4, #3
 80077c4:	4614      	mov	r4, r2
 80077c6:	461d      	mov	r5, r3
 80077c8:	4643      	mov	r3, r8
 80077ca:	18e3      	adds	r3, r4, r3
 80077cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80077d0:	464b      	mov	r3, r9
 80077d2:	eb45 0303 	adc.w	r3, r5, r3
 80077d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80077da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077de:	685b      	ldr	r3, [r3, #4]
 80077e0:	2200      	movs	r2, #0
 80077e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80077e6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80077ea:	f04f 0200 	mov.w	r2, #0
 80077ee:	f04f 0300 	mov.w	r3, #0
 80077f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80077f6:	4629      	mov	r1, r5
 80077f8:	008b      	lsls	r3, r1, #2
 80077fa:	4621      	mov	r1, r4
 80077fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007800:	4621      	mov	r1, r4
 8007802:	008a      	lsls	r2, r1, #2
 8007804:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007808:	f7f9 f94c 	bl	8000aa4 <__aeabi_uldivmod>
 800780c:	4602      	mov	r2, r0
 800780e:	460b      	mov	r3, r1
 8007810:	4b60      	ldr	r3, [pc, #384]	; (8007994 <UART_SetConfig+0x4e4>)
 8007812:	fba3 2302 	umull	r2, r3, r3, r2
 8007816:	095b      	lsrs	r3, r3, #5
 8007818:	011c      	lsls	r4, r3, #4
 800781a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800781e:	2200      	movs	r2, #0
 8007820:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007824:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007828:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800782c:	4642      	mov	r2, r8
 800782e:	464b      	mov	r3, r9
 8007830:	1891      	adds	r1, r2, r2
 8007832:	61b9      	str	r1, [r7, #24]
 8007834:	415b      	adcs	r3, r3
 8007836:	61fb      	str	r3, [r7, #28]
 8007838:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800783c:	4641      	mov	r1, r8
 800783e:	1851      	adds	r1, r2, r1
 8007840:	6139      	str	r1, [r7, #16]
 8007842:	4649      	mov	r1, r9
 8007844:	414b      	adcs	r3, r1
 8007846:	617b      	str	r3, [r7, #20]
 8007848:	f04f 0200 	mov.w	r2, #0
 800784c:	f04f 0300 	mov.w	r3, #0
 8007850:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007854:	4659      	mov	r1, fp
 8007856:	00cb      	lsls	r3, r1, #3
 8007858:	4651      	mov	r1, sl
 800785a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800785e:	4651      	mov	r1, sl
 8007860:	00ca      	lsls	r2, r1, #3
 8007862:	4610      	mov	r0, r2
 8007864:	4619      	mov	r1, r3
 8007866:	4603      	mov	r3, r0
 8007868:	4642      	mov	r2, r8
 800786a:	189b      	adds	r3, r3, r2
 800786c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007870:	464b      	mov	r3, r9
 8007872:	460a      	mov	r2, r1
 8007874:	eb42 0303 	adc.w	r3, r2, r3
 8007878:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800787c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007880:	685b      	ldr	r3, [r3, #4]
 8007882:	2200      	movs	r2, #0
 8007884:	67bb      	str	r3, [r7, #120]	; 0x78
 8007886:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007888:	f04f 0200 	mov.w	r2, #0
 800788c:	f04f 0300 	mov.w	r3, #0
 8007890:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007894:	4649      	mov	r1, r9
 8007896:	008b      	lsls	r3, r1, #2
 8007898:	4641      	mov	r1, r8
 800789a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800789e:	4641      	mov	r1, r8
 80078a0:	008a      	lsls	r2, r1, #2
 80078a2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80078a6:	f7f9 f8fd 	bl	8000aa4 <__aeabi_uldivmod>
 80078aa:	4602      	mov	r2, r0
 80078ac:	460b      	mov	r3, r1
 80078ae:	4611      	mov	r1, r2
 80078b0:	4b38      	ldr	r3, [pc, #224]	; (8007994 <UART_SetConfig+0x4e4>)
 80078b2:	fba3 2301 	umull	r2, r3, r3, r1
 80078b6:	095b      	lsrs	r3, r3, #5
 80078b8:	2264      	movs	r2, #100	; 0x64
 80078ba:	fb02 f303 	mul.w	r3, r2, r3
 80078be:	1acb      	subs	r3, r1, r3
 80078c0:	011b      	lsls	r3, r3, #4
 80078c2:	3332      	adds	r3, #50	; 0x32
 80078c4:	4a33      	ldr	r2, [pc, #204]	; (8007994 <UART_SetConfig+0x4e4>)
 80078c6:	fba2 2303 	umull	r2, r3, r2, r3
 80078ca:	095b      	lsrs	r3, r3, #5
 80078cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80078d0:	441c      	add	r4, r3
 80078d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80078d6:	2200      	movs	r2, #0
 80078d8:	673b      	str	r3, [r7, #112]	; 0x70
 80078da:	677a      	str	r2, [r7, #116]	; 0x74
 80078dc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80078e0:	4642      	mov	r2, r8
 80078e2:	464b      	mov	r3, r9
 80078e4:	1891      	adds	r1, r2, r2
 80078e6:	60b9      	str	r1, [r7, #8]
 80078e8:	415b      	adcs	r3, r3
 80078ea:	60fb      	str	r3, [r7, #12]
 80078ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80078f0:	4641      	mov	r1, r8
 80078f2:	1851      	adds	r1, r2, r1
 80078f4:	6039      	str	r1, [r7, #0]
 80078f6:	4649      	mov	r1, r9
 80078f8:	414b      	adcs	r3, r1
 80078fa:	607b      	str	r3, [r7, #4]
 80078fc:	f04f 0200 	mov.w	r2, #0
 8007900:	f04f 0300 	mov.w	r3, #0
 8007904:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007908:	4659      	mov	r1, fp
 800790a:	00cb      	lsls	r3, r1, #3
 800790c:	4651      	mov	r1, sl
 800790e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007912:	4651      	mov	r1, sl
 8007914:	00ca      	lsls	r2, r1, #3
 8007916:	4610      	mov	r0, r2
 8007918:	4619      	mov	r1, r3
 800791a:	4603      	mov	r3, r0
 800791c:	4642      	mov	r2, r8
 800791e:	189b      	adds	r3, r3, r2
 8007920:	66bb      	str	r3, [r7, #104]	; 0x68
 8007922:	464b      	mov	r3, r9
 8007924:	460a      	mov	r2, r1
 8007926:	eb42 0303 	adc.w	r3, r2, r3
 800792a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800792c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007930:	685b      	ldr	r3, [r3, #4]
 8007932:	2200      	movs	r2, #0
 8007934:	663b      	str	r3, [r7, #96]	; 0x60
 8007936:	667a      	str	r2, [r7, #100]	; 0x64
 8007938:	f04f 0200 	mov.w	r2, #0
 800793c:	f04f 0300 	mov.w	r3, #0
 8007940:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007944:	4649      	mov	r1, r9
 8007946:	008b      	lsls	r3, r1, #2
 8007948:	4641      	mov	r1, r8
 800794a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800794e:	4641      	mov	r1, r8
 8007950:	008a      	lsls	r2, r1, #2
 8007952:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007956:	f7f9 f8a5 	bl	8000aa4 <__aeabi_uldivmod>
 800795a:	4602      	mov	r2, r0
 800795c:	460b      	mov	r3, r1
 800795e:	4b0d      	ldr	r3, [pc, #52]	; (8007994 <UART_SetConfig+0x4e4>)
 8007960:	fba3 1302 	umull	r1, r3, r3, r2
 8007964:	095b      	lsrs	r3, r3, #5
 8007966:	2164      	movs	r1, #100	; 0x64
 8007968:	fb01 f303 	mul.w	r3, r1, r3
 800796c:	1ad3      	subs	r3, r2, r3
 800796e:	011b      	lsls	r3, r3, #4
 8007970:	3332      	adds	r3, #50	; 0x32
 8007972:	4a08      	ldr	r2, [pc, #32]	; (8007994 <UART_SetConfig+0x4e4>)
 8007974:	fba2 2303 	umull	r2, r3, r2, r3
 8007978:	095b      	lsrs	r3, r3, #5
 800797a:	f003 020f 	and.w	r2, r3, #15
 800797e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	4422      	add	r2, r4
 8007986:	609a      	str	r2, [r3, #8]
}
 8007988:	bf00      	nop
 800798a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800798e:	46bd      	mov	sp, r7
 8007990:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007994:	51eb851f 	.word	0x51eb851f

08007998 <realloc>:
 8007998:	4b02      	ldr	r3, [pc, #8]	; (80079a4 <realloc+0xc>)
 800799a:	460a      	mov	r2, r1
 800799c:	4601      	mov	r1, r0
 800799e:	6818      	ldr	r0, [r3, #0]
 80079a0:	f000 b802 	b.w	80079a8 <_realloc_r>
 80079a4:	20000058 	.word	0x20000058

080079a8 <_realloc_r>:
 80079a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079ac:	4680      	mov	r8, r0
 80079ae:	4614      	mov	r4, r2
 80079b0:	460e      	mov	r6, r1
 80079b2:	b921      	cbnz	r1, 80079be <_realloc_r+0x16>
 80079b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80079b8:	4611      	mov	r1, r2
 80079ba:	f000 b8d3 	b.w	8007b64 <_malloc_r>
 80079be:	b92a      	cbnz	r2, 80079cc <_realloc_r+0x24>
 80079c0:	f000 f864 	bl	8007a8c <_free_r>
 80079c4:	4625      	mov	r5, r4
 80079c6:	4628      	mov	r0, r5
 80079c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079cc:	f000 f956 	bl	8007c7c <_malloc_usable_size_r>
 80079d0:	4284      	cmp	r4, r0
 80079d2:	4607      	mov	r7, r0
 80079d4:	d802      	bhi.n	80079dc <_realloc_r+0x34>
 80079d6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80079da:	d812      	bhi.n	8007a02 <_realloc_r+0x5a>
 80079dc:	4621      	mov	r1, r4
 80079de:	4640      	mov	r0, r8
 80079e0:	f000 f8c0 	bl	8007b64 <_malloc_r>
 80079e4:	4605      	mov	r5, r0
 80079e6:	2800      	cmp	r0, #0
 80079e8:	d0ed      	beq.n	80079c6 <_realloc_r+0x1e>
 80079ea:	42bc      	cmp	r4, r7
 80079ec:	4622      	mov	r2, r4
 80079ee:	4631      	mov	r1, r6
 80079f0:	bf28      	it	cs
 80079f2:	463a      	movcs	r2, r7
 80079f4:	f000 f83c 	bl	8007a70 <memcpy>
 80079f8:	4631      	mov	r1, r6
 80079fa:	4640      	mov	r0, r8
 80079fc:	f000 f846 	bl	8007a8c <_free_r>
 8007a00:	e7e1      	b.n	80079c6 <_realloc_r+0x1e>
 8007a02:	4635      	mov	r5, r6
 8007a04:	e7df      	b.n	80079c6 <_realloc_r+0x1e>

08007a06 <memset>:
 8007a06:	4402      	add	r2, r0
 8007a08:	4603      	mov	r3, r0
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d100      	bne.n	8007a10 <memset+0xa>
 8007a0e:	4770      	bx	lr
 8007a10:	f803 1b01 	strb.w	r1, [r3], #1
 8007a14:	e7f9      	b.n	8007a0a <memset+0x4>
	...

08007a18 <__errno>:
 8007a18:	4b01      	ldr	r3, [pc, #4]	; (8007a20 <__errno+0x8>)
 8007a1a:	6818      	ldr	r0, [r3, #0]
 8007a1c:	4770      	bx	lr
 8007a1e:	bf00      	nop
 8007a20:	20000058 	.word	0x20000058

08007a24 <__libc_init_array>:
 8007a24:	b570      	push	{r4, r5, r6, lr}
 8007a26:	4d0d      	ldr	r5, [pc, #52]	; (8007a5c <__libc_init_array+0x38>)
 8007a28:	4c0d      	ldr	r4, [pc, #52]	; (8007a60 <__libc_init_array+0x3c>)
 8007a2a:	1b64      	subs	r4, r4, r5
 8007a2c:	10a4      	asrs	r4, r4, #2
 8007a2e:	2600      	movs	r6, #0
 8007a30:	42a6      	cmp	r6, r4
 8007a32:	d109      	bne.n	8007a48 <__libc_init_array+0x24>
 8007a34:	4d0b      	ldr	r5, [pc, #44]	; (8007a64 <__libc_init_array+0x40>)
 8007a36:	4c0c      	ldr	r4, [pc, #48]	; (8007a68 <__libc_init_array+0x44>)
 8007a38:	f000 f938 	bl	8007cac <_init>
 8007a3c:	1b64      	subs	r4, r4, r5
 8007a3e:	10a4      	asrs	r4, r4, #2
 8007a40:	2600      	movs	r6, #0
 8007a42:	42a6      	cmp	r6, r4
 8007a44:	d105      	bne.n	8007a52 <__libc_init_array+0x2e>
 8007a46:	bd70      	pop	{r4, r5, r6, pc}
 8007a48:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a4c:	4798      	blx	r3
 8007a4e:	3601      	adds	r6, #1
 8007a50:	e7ee      	b.n	8007a30 <__libc_init_array+0xc>
 8007a52:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a56:	4798      	blx	r3
 8007a58:	3601      	adds	r6, #1
 8007a5a:	e7f2      	b.n	8007a42 <__libc_init_array+0x1e>
 8007a5c:	08007ff0 	.word	0x08007ff0
 8007a60:	08007ff0 	.word	0x08007ff0
 8007a64:	08007ff0 	.word	0x08007ff0
 8007a68:	08007ff8 	.word	0x08007ff8

08007a6c <__retarget_lock_acquire_recursive>:
 8007a6c:	4770      	bx	lr

08007a6e <__retarget_lock_release_recursive>:
 8007a6e:	4770      	bx	lr

08007a70 <memcpy>:
 8007a70:	440a      	add	r2, r1
 8007a72:	4291      	cmp	r1, r2
 8007a74:	f100 33ff 	add.w	r3, r0, #4294967295
 8007a78:	d100      	bne.n	8007a7c <memcpy+0xc>
 8007a7a:	4770      	bx	lr
 8007a7c:	b510      	push	{r4, lr}
 8007a7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a82:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007a86:	4291      	cmp	r1, r2
 8007a88:	d1f9      	bne.n	8007a7e <memcpy+0xe>
 8007a8a:	bd10      	pop	{r4, pc}

08007a8c <_free_r>:
 8007a8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007a8e:	2900      	cmp	r1, #0
 8007a90:	d044      	beq.n	8007b1c <_free_r+0x90>
 8007a92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a96:	9001      	str	r0, [sp, #4]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	f1a1 0404 	sub.w	r4, r1, #4
 8007a9e:	bfb8      	it	lt
 8007aa0:	18e4      	addlt	r4, r4, r3
 8007aa2:	f000 f8df 	bl	8007c64 <__malloc_lock>
 8007aa6:	4a1e      	ldr	r2, [pc, #120]	; (8007b20 <_free_r+0x94>)
 8007aa8:	9801      	ldr	r0, [sp, #4]
 8007aaa:	6813      	ldr	r3, [r2, #0]
 8007aac:	b933      	cbnz	r3, 8007abc <_free_r+0x30>
 8007aae:	6063      	str	r3, [r4, #4]
 8007ab0:	6014      	str	r4, [r2, #0]
 8007ab2:	b003      	add	sp, #12
 8007ab4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007ab8:	f000 b8da 	b.w	8007c70 <__malloc_unlock>
 8007abc:	42a3      	cmp	r3, r4
 8007abe:	d908      	bls.n	8007ad2 <_free_r+0x46>
 8007ac0:	6825      	ldr	r5, [r4, #0]
 8007ac2:	1961      	adds	r1, r4, r5
 8007ac4:	428b      	cmp	r3, r1
 8007ac6:	bf01      	itttt	eq
 8007ac8:	6819      	ldreq	r1, [r3, #0]
 8007aca:	685b      	ldreq	r3, [r3, #4]
 8007acc:	1949      	addeq	r1, r1, r5
 8007ace:	6021      	streq	r1, [r4, #0]
 8007ad0:	e7ed      	b.n	8007aae <_free_r+0x22>
 8007ad2:	461a      	mov	r2, r3
 8007ad4:	685b      	ldr	r3, [r3, #4]
 8007ad6:	b10b      	cbz	r3, 8007adc <_free_r+0x50>
 8007ad8:	42a3      	cmp	r3, r4
 8007ada:	d9fa      	bls.n	8007ad2 <_free_r+0x46>
 8007adc:	6811      	ldr	r1, [r2, #0]
 8007ade:	1855      	adds	r5, r2, r1
 8007ae0:	42a5      	cmp	r5, r4
 8007ae2:	d10b      	bne.n	8007afc <_free_r+0x70>
 8007ae4:	6824      	ldr	r4, [r4, #0]
 8007ae6:	4421      	add	r1, r4
 8007ae8:	1854      	adds	r4, r2, r1
 8007aea:	42a3      	cmp	r3, r4
 8007aec:	6011      	str	r1, [r2, #0]
 8007aee:	d1e0      	bne.n	8007ab2 <_free_r+0x26>
 8007af0:	681c      	ldr	r4, [r3, #0]
 8007af2:	685b      	ldr	r3, [r3, #4]
 8007af4:	6053      	str	r3, [r2, #4]
 8007af6:	440c      	add	r4, r1
 8007af8:	6014      	str	r4, [r2, #0]
 8007afa:	e7da      	b.n	8007ab2 <_free_r+0x26>
 8007afc:	d902      	bls.n	8007b04 <_free_r+0x78>
 8007afe:	230c      	movs	r3, #12
 8007b00:	6003      	str	r3, [r0, #0]
 8007b02:	e7d6      	b.n	8007ab2 <_free_r+0x26>
 8007b04:	6825      	ldr	r5, [r4, #0]
 8007b06:	1961      	adds	r1, r4, r5
 8007b08:	428b      	cmp	r3, r1
 8007b0a:	bf04      	itt	eq
 8007b0c:	6819      	ldreq	r1, [r3, #0]
 8007b0e:	685b      	ldreq	r3, [r3, #4]
 8007b10:	6063      	str	r3, [r4, #4]
 8007b12:	bf04      	itt	eq
 8007b14:	1949      	addeq	r1, r1, r5
 8007b16:	6021      	streq	r1, [r4, #0]
 8007b18:	6054      	str	r4, [r2, #4]
 8007b1a:	e7ca      	b.n	8007ab2 <_free_r+0x26>
 8007b1c:	b003      	add	sp, #12
 8007b1e:	bd30      	pop	{r4, r5, pc}
 8007b20:	20000d28 	.word	0x20000d28

08007b24 <sbrk_aligned>:
 8007b24:	b570      	push	{r4, r5, r6, lr}
 8007b26:	4e0e      	ldr	r6, [pc, #56]	; (8007b60 <sbrk_aligned+0x3c>)
 8007b28:	460c      	mov	r4, r1
 8007b2a:	6831      	ldr	r1, [r6, #0]
 8007b2c:	4605      	mov	r5, r0
 8007b2e:	b911      	cbnz	r1, 8007b36 <sbrk_aligned+0x12>
 8007b30:	f000 f8ac 	bl	8007c8c <_sbrk_r>
 8007b34:	6030      	str	r0, [r6, #0]
 8007b36:	4621      	mov	r1, r4
 8007b38:	4628      	mov	r0, r5
 8007b3a:	f000 f8a7 	bl	8007c8c <_sbrk_r>
 8007b3e:	1c43      	adds	r3, r0, #1
 8007b40:	d00a      	beq.n	8007b58 <sbrk_aligned+0x34>
 8007b42:	1cc4      	adds	r4, r0, #3
 8007b44:	f024 0403 	bic.w	r4, r4, #3
 8007b48:	42a0      	cmp	r0, r4
 8007b4a:	d007      	beq.n	8007b5c <sbrk_aligned+0x38>
 8007b4c:	1a21      	subs	r1, r4, r0
 8007b4e:	4628      	mov	r0, r5
 8007b50:	f000 f89c 	bl	8007c8c <_sbrk_r>
 8007b54:	3001      	adds	r0, #1
 8007b56:	d101      	bne.n	8007b5c <sbrk_aligned+0x38>
 8007b58:	f04f 34ff 	mov.w	r4, #4294967295
 8007b5c:	4620      	mov	r0, r4
 8007b5e:	bd70      	pop	{r4, r5, r6, pc}
 8007b60:	20000d2c 	.word	0x20000d2c

08007b64 <_malloc_r>:
 8007b64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b68:	1ccd      	adds	r5, r1, #3
 8007b6a:	f025 0503 	bic.w	r5, r5, #3
 8007b6e:	3508      	adds	r5, #8
 8007b70:	2d0c      	cmp	r5, #12
 8007b72:	bf38      	it	cc
 8007b74:	250c      	movcc	r5, #12
 8007b76:	2d00      	cmp	r5, #0
 8007b78:	4607      	mov	r7, r0
 8007b7a:	db01      	blt.n	8007b80 <_malloc_r+0x1c>
 8007b7c:	42a9      	cmp	r1, r5
 8007b7e:	d905      	bls.n	8007b8c <_malloc_r+0x28>
 8007b80:	230c      	movs	r3, #12
 8007b82:	603b      	str	r3, [r7, #0]
 8007b84:	2600      	movs	r6, #0
 8007b86:	4630      	mov	r0, r6
 8007b88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b8c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007c60 <_malloc_r+0xfc>
 8007b90:	f000 f868 	bl	8007c64 <__malloc_lock>
 8007b94:	f8d8 3000 	ldr.w	r3, [r8]
 8007b98:	461c      	mov	r4, r3
 8007b9a:	bb5c      	cbnz	r4, 8007bf4 <_malloc_r+0x90>
 8007b9c:	4629      	mov	r1, r5
 8007b9e:	4638      	mov	r0, r7
 8007ba0:	f7ff ffc0 	bl	8007b24 <sbrk_aligned>
 8007ba4:	1c43      	adds	r3, r0, #1
 8007ba6:	4604      	mov	r4, r0
 8007ba8:	d155      	bne.n	8007c56 <_malloc_r+0xf2>
 8007baa:	f8d8 4000 	ldr.w	r4, [r8]
 8007bae:	4626      	mov	r6, r4
 8007bb0:	2e00      	cmp	r6, #0
 8007bb2:	d145      	bne.n	8007c40 <_malloc_r+0xdc>
 8007bb4:	2c00      	cmp	r4, #0
 8007bb6:	d048      	beq.n	8007c4a <_malloc_r+0xe6>
 8007bb8:	6823      	ldr	r3, [r4, #0]
 8007bba:	4631      	mov	r1, r6
 8007bbc:	4638      	mov	r0, r7
 8007bbe:	eb04 0903 	add.w	r9, r4, r3
 8007bc2:	f000 f863 	bl	8007c8c <_sbrk_r>
 8007bc6:	4581      	cmp	r9, r0
 8007bc8:	d13f      	bne.n	8007c4a <_malloc_r+0xe6>
 8007bca:	6821      	ldr	r1, [r4, #0]
 8007bcc:	1a6d      	subs	r5, r5, r1
 8007bce:	4629      	mov	r1, r5
 8007bd0:	4638      	mov	r0, r7
 8007bd2:	f7ff ffa7 	bl	8007b24 <sbrk_aligned>
 8007bd6:	3001      	adds	r0, #1
 8007bd8:	d037      	beq.n	8007c4a <_malloc_r+0xe6>
 8007bda:	6823      	ldr	r3, [r4, #0]
 8007bdc:	442b      	add	r3, r5
 8007bde:	6023      	str	r3, [r4, #0]
 8007be0:	f8d8 3000 	ldr.w	r3, [r8]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d038      	beq.n	8007c5a <_malloc_r+0xf6>
 8007be8:	685a      	ldr	r2, [r3, #4]
 8007bea:	42a2      	cmp	r2, r4
 8007bec:	d12b      	bne.n	8007c46 <_malloc_r+0xe2>
 8007bee:	2200      	movs	r2, #0
 8007bf0:	605a      	str	r2, [r3, #4]
 8007bf2:	e00f      	b.n	8007c14 <_malloc_r+0xb0>
 8007bf4:	6822      	ldr	r2, [r4, #0]
 8007bf6:	1b52      	subs	r2, r2, r5
 8007bf8:	d41f      	bmi.n	8007c3a <_malloc_r+0xd6>
 8007bfa:	2a0b      	cmp	r2, #11
 8007bfc:	d917      	bls.n	8007c2e <_malloc_r+0xca>
 8007bfe:	1961      	adds	r1, r4, r5
 8007c00:	42a3      	cmp	r3, r4
 8007c02:	6025      	str	r5, [r4, #0]
 8007c04:	bf18      	it	ne
 8007c06:	6059      	strne	r1, [r3, #4]
 8007c08:	6863      	ldr	r3, [r4, #4]
 8007c0a:	bf08      	it	eq
 8007c0c:	f8c8 1000 	streq.w	r1, [r8]
 8007c10:	5162      	str	r2, [r4, r5]
 8007c12:	604b      	str	r3, [r1, #4]
 8007c14:	4638      	mov	r0, r7
 8007c16:	f104 060b 	add.w	r6, r4, #11
 8007c1a:	f000 f829 	bl	8007c70 <__malloc_unlock>
 8007c1e:	f026 0607 	bic.w	r6, r6, #7
 8007c22:	1d23      	adds	r3, r4, #4
 8007c24:	1af2      	subs	r2, r6, r3
 8007c26:	d0ae      	beq.n	8007b86 <_malloc_r+0x22>
 8007c28:	1b9b      	subs	r3, r3, r6
 8007c2a:	50a3      	str	r3, [r4, r2]
 8007c2c:	e7ab      	b.n	8007b86 <_malloc_r+0x22>
 8007c2e:	42a3      	cmp	r3, r4
 8007c30:	6862      	ldr	r2, [r4, #4]
 8007c32:	d1dd      	bne.n	8007bf0 <_malloc_r+0x8c>
 8007c34:	f8c8 2000 	str.w	r2, [r8]
 8007c38:	e7ec      	b.n	8007c14 <_malloc_r+0xb0>
 8007c3a:	4623      	mov	r3, r4
 8007c3c:	6864      	ldr	r4, [r4, #4]
 8007c3e:	e7ac      	b.n	8007b9a <_malloc_r+0x36>
 8007c40:	4634      	mov	r4, r6
 8007c42:	6876      	ldr	r6, [r6, #4]
 8007c44:	e7b4      	b.n	8007bb0 <_malloc_r+0x4c>
 8007c46:	4613      	mov	r3, r2
 8007c48:	e7cc      	b.n	8007be4 <_malloc_r+0x80>
 8007c4a:	230c      	movs	r3, #12
 8007c4c:	603b      	str	r3, [r7, #0]
 8007c4e:	4638      	mov	r0, r7
 8007c50:	f000 f80e 	bl	8007c70 <__malloc_unlock>
 8007c54:	e797      	b.n	8007b86 <_malloc_r+0x22>
 8007c56:	6025      	str	r5, [r4, #0]
 8007c58:	e7dc      	b.n	8007c14 <_malloc_r+0xb0>
 8007c5a:	605b      	str	r3, [r3, #4]
 8007c5c:	deff      	udf	#255	; 0xff
 8007c5e:	bf00      	nop
 8007c60:	20000d28 	.word	0x20000d28

08007c64 <__malloc_lock>:
 8007c64:	4801      	ldr	r0, [pc, #4]	; (8007c6c <__malloc_lock+0x8>)
 8007c66:	f7ff bf01 	b.w	8007a6c <__retarget_lock_acquire_recursive>
 8007c6a:	bf00      	nop
 8007c6c:	20000d24 	.word	0x20000d24

08007c70 <__malloc_unlock>:
 8007c70:	4801      	ldr	r0, [pc, #4]	; (8007c78 <__malloc_unlock+0x8>)
 8007c72:	f7ff befc 	b.w	8007a6e <__retarget_lock_release_recursive>
 8007c76:	bf00      	nop
 8007c78:	20000d24 	.word	0x20000d24

08007c7c <_malloc_usable_size_r>:
 8007c7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c80:	1f18      	subs	r0, r3, #4
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	bfbc      	itt	lt
 8007c86:	580b      	ldrlt	r3, [r1, r0]
 8007c88:	18c0      	addlt	r0, r0, r3
 8007c8a:	4770      	bx	lr

08007c8c <_sbrk_r>:
 8007c8c:	b538      	push	{r3, r4, r5, lr}
 8007c8e:	4d06      	ldr	r5, [pc, #24]	; (8007ca8 <_sbrk_r+0x1c>)
 8007c90:	2300      	movs	r3, #0
 8007c92:	4604      	mov	r4, r0
 8007c94:	4608      	mov	r0, r1
 8007c96:	602b      	str	r3, [r5, #0]
 8007c98:	f7fc f9f8 	bl	800408c <_sbrk>
 8007c9c:	1c43      	adds	r3, r0, #1
 8007c9e:	d102      	bne.n	8007ca6 <_sbrk_r+0x1a>
 8007ca0:	682b      	ldr	r3, [r5, #0]
 8007ca2:	b103      	cbz	r3, 8007ca6 <_sbrk_r+0x1a>
 8007ca4:	6023      	str	r3, [r4, #0]
 8007ca6:	bd38      	pop	{r3, r4, r5, pc}
 8007ca8:	20000d20 	.word	0x20000d20

08007cac <_init>:
 8007cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cae:	bf00      	nop
 8007cb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cb2:	bc08      	pop	{r3}
 8007cb4:	469e      	mov	lr, r3
 8007cb6:	4770      	bx	lr

08007cb8 <_fini>:
 8007cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cba:	bf00      	nop
 8007cbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cbe:	bc08      	pop	{r3}
 8007cc0:	469e      	mov	lr, r3
 8007cc2:	4770      	bx	lr
